// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_ImageManager
#include <ImageManager.h>
#endif
#ifndef INCLUDED_SceneManager
#include <SceneManager.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8aa72d4520882b31_23_setMyStage,"ImageManager","setMyStage",0x9eb2f6ac,"ImageManager.setMyStage","ImageManager.hx",23,0xd4283d8c)
HX_LOCAL_STACK_FRAME(_hx_pos_8aa72d4520882b31_29_addImage,"ImageManager","addImage",0x39692cf6,"ImageManager.addImage","ImageManager.hx",29,0xd4283d8c)

void ImageManager_obj::__construct() { }

Dynamic ImageManager_obj::__CreateEmpty() { return new ImageManager_obj; }

void *ImageManager_obj::_hx_vtable = 0;

Dynamic ImageManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageManager_obj > _hx_result = new ImageManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0acd5ed6;
}

 ::openfl::display::Stage ImageManager_obj::myStage;

void ImageManager_obj::setMyStage(){
            	HX_STACKFRAME(&_hx_pos_8aa72d4520882b31_23_setMyStage)
HXDLIN(  23)		::ImageManager_obj::myStage = ::SceneManager_obj::getMyStage();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ImageManager_obj,setMyStage,(void))

void ImageManager_obj::addImage(::String imagePath,int xPos,int yPos){
            	HX_GC_STACKFRAME(&_hx_pos_8aa72d4520882b31_29_addImage)
HXLINE(  31)		::ImageManager_obj::setMyStage();
HXLINE(  33)		 ::openfl::display::BitmapData imageData = ::openfl::utils::Assets_obj::getBitmapData(imagePath,null());
HXLINE(  34)		 ::openfl::display::Bitmap Image =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,imageData,null(),null());
HXLINE(  37)		Image->set_x(xPos);
HXLINE(  38)		Image->set_y(yPos);
HXLINE(  41)		::ImageManager_obj::myStage->addChild(Image);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageManager_obj,addImage,(void))


ImageManager_obj::ImageManager_obj()
{
}

bool ImageManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"myStage") ) { outValue = ( myStage ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addImage") ) { outValue = addImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setMyStage") ) { outValue = setMyStage_dyn(); return true; }
	}
	return false;
}

bool ImageManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"myStage") ) { myStage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ImageManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &ImageManager_obj::myStage,HX_HCSTRING("myStage","\xb2","\x13","\x0b","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ImageManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ImageManager_obj::myStage,"myStage");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ImageManager_obj::myStage,"myStage");
};

#endif

hx::Class ImageManager_obj::__mClass;

static ::String ImageManager_obj_sStaticFields[] = {
	HX_HCSTRING("myStage","\xb2","\x13","\x0b","\x2d"),
	HX_HCSTRING("setMyStage","\x30","\x38","\xea","\x7f"),
	HX_HCSTRING("addImage","\x7a","\x45","\xc6","\x36"),
	::String(null())
};

void ImageManager_obj::__register()
{
	hx::Object *dummy = new ImageManager_obj;
	ImageManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ImageManager","\x72","\x58","\x9c","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageManager_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageManager_obj::__SetStatic;
	__mClass->mMarkFunc = ImageManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

