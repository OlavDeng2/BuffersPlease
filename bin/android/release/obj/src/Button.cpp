// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95476733ad03172e_22_new,"Button","new",0x9489e804,"Button.new","Button.hx",22,0xf1be03ec)
HX_LOCAL_STACK_FRAME(_hx_pos_95476733ad03172e_40_buttonPress,"Button","buttonPress",0xa37f6fd5,"Button.buttonPress","Button.hx",40,0xf1be03ec)

void Button_obj::__construct(::String buttonName){
            	HX_GC_STACKFRAME(&_hx_pos_95476733ad03172e_22_new)
HXLINE(  23)		super::__construct();
HXLINE(  25)		 ::openfl::display::BitmapData buttonImageData = ::openfl::utils::Assets_obj::getBitmapData(((HX_("img/Buttons/",ba,85,64,24) + buttonName) + HX_(".png",3b,2d,bd,1e)),null());
HXLINE(  26)		 ::openfl::display::Bitmap buttonImage =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,buttonImageData,null(),null());
HXLINE(  29)		buttonImage->set_x(((Float)-(buttonImage->get_width()) / (Float)(int)2));
HXLINE(  30)		buttonImage->set_y(((Float)-(buttonImage->get_height()) / (Float)(int)2));
HXLINE(  33)		this->addChild(buttonImage);
HXLINE(  36)		this->addEventListener(HX_("click",48,7c,5e,48),this->buttonPress_dyn(),null(),null(),null());
            	}

Dynamic Button_obj::__CreateEmpty() { return new Button_obj; }

void *Button_obj::_hx_vtable = 0;

Dynamic Button_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Button_obj > _hx_result = new Button_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Button_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0e74d612) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0e74d612;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Button_obj::buttonPress( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_95476733ad03172e_40_buttonPress)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,buttonPress,(void))


hx::ObjectPtr< Button_obj > Button_obj::__new(::String buttonName) {
	hx::ObjectPtr< Button_obj > __this = new Button_obj();
	__this->__construct(buttonName);
	return __this;
}

hx::ObjectPtr< Button_obj > Button_obj::__alloc(hx::Ctx *_hx_ctx,::String buttonName) {
	Button_obj *__this = (Button_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Button_obj), true, "Button"));
	*(void **)__this = Button_obj::_hx_vtable;
	__this->__construct(buttonName);
	return __this;
}

Button_obj::Button_obj()
{
}

hx::Val Button_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"buttonPress") ) { return hx::Val( buttonPress_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Button_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Button_obj_sStaticStorageInfo = 0;
#endif

static ::String Button_obj_sMemberFields[] = {
	HX_HCSTRING("buttonPress","\x31","\x14","\x33","\x16"),
	::String(null()) };

static void Button_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Button_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Button_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Button_obj::__mClass,"__mClass");
};

#endif

hx::Class Button_obj::__mClass;

void Button_obj::__register()
{
	hx::Object *dummy = new Button_obj;
	Button_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Button","\x12","\xd6","\x74","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Button_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Button_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Button_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Button_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Button_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Button_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

