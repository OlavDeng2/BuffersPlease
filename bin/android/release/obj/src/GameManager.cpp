// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Atom
#include <Atom.h>
#endif
#ifndef INCLUDED_GameManager
#include <GameManager.h>
#endif
#ifndef INCLUDED_SceneManager
#include <SceneManager.h>
#endif
#ifndef INCLUDED_SoundManager
#include <SoundManager.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_db_Connection
#include <sys/db/Connection.h>
#endif
#ifndef INCLUDED_sys_db_ResultSet
#include <sys/db/ResultSet.h>
#endif
#ifndef INCLUDED_sys_db_Sqlite
#include <sys/db/Sqlite.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_44_setMyStage,"GameManager","setMyStage",0x52f48943,"GameManager.setMyStage","GameManager.hx",44,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_51_getCurrentScore,"GameManager","getCurrentScore",0x4c87981c,"GameManager.getCurrentScore","GameManager.hx",51,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_56_setCurrentScore,"GameManager","setCurrentScore",0x48531528,"GameManager.setCurrentScore","GameManager.hx",56,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_62_getCurrentName,"GameManager","getCurrentName",0x8ed374c1,"GameManager.getCurrentName","GameManager.hx",62,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_66_setCurrentName,"GameManager","setCurrentName",0xaef35d35,"GameManager.setCurrentName","GameManager.hx",66,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_72_writeScoreToDB,"GameManager","writeScoreToDB",0xcc331bdf,"GameManager.writeScoreToDB","GameManager.hx",72,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_80_getLeaderboard,"GameManager","getLeaderboard",0x413a949a,"GameManager.getLeaderboard","GameManager.hx",80,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_140_getPuzzle,"GameManager","getPuzzle",0x83a37d41,"GameManager.getPuzzle","GameManager.hx",140,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_279_hydrogenAtom,"GameManager","hydrogenAtom",0x7dfc94a4,"GameManager.hydrogenAtom","GameManager.hx",279,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_289_carbonAtom,"GameManager","carbonAtom",0x63fddef1,"GameManager.carbonAtom","GameManager.hx",289,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_300_oxygenAtom,"GameManager","oxygenAtom",0xbbe6c164,"GameManager.oxygenAtom","GameManager.hx",300,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_310_sodiumAtom,"GameManager","sodiumAtom",0xc6eab23d,"GameManager.sodiumAtom","GameManager.hx",310,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_320_onAtomSelect,"GameManager","onAtomSelect",0xd138387f,"GameManager.onAtomSelect","GameManager.hx",320,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_347_checkIfMixed,"GameManager","checkIfMixed",0xc6e7afc9,"GameManager.checkIfMixed","GameManager.hx",347,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_31_boot,"GameManager","boot",0x0040f505,"GameManager.boot","GameManager.hx",31,0xfd29e123)
HX_LOCAL_STACK_FRAME(_hx_pos_c98349a901c50ee9_35_boot,"GameManager","boot",0x0040f505,"GameManager.boot","GameManager.hx",35,0xfd29e123)

void GameManager_obj::__construct() { }

Dynamic GameManager_obj::__CreateEmpty() { return new GameManager_obj; }

void *GameManager_obj::_hx_vtable = 0;

Dynamic GameManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameManager_obj > _hx_result = new GameManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a3844b3;
}

int GameManager_obj::currentScore;

int GameManager_obj::place;

::String GameManager_obj::currentName;

 ::openfl::text::TextField GameManager_obj::characterTextInput;

::Array< ::Dynamic> GameManager_obj::selection;

 ::openfl::display::Stage GameManager_obj::myStage;

void GameManager_obj::setMyStage(){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_44_setMyStage)
HXDLIN(  44)		::GameManager_obj::myStage = ::SceneManager_obj::getMyStage();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameManager_obj,setMyStage,(void))

int GameManager_obj::getCurrentScore(){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_51_getCurrentScore)
HXDLIN(  51)		return ::GameManager_obj::currentScore;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameManager_obj,getCurrentScore,return )

void GameManager_obj::setCurrentScore(int score){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_56_setCurrentScore)
HXDLIN(  56)		::GameManager_obj::currentScore = score;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameManager_obj,setCurrentScore,(void))

::String GameManager_obj::getCurrentName(){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_62_getCurrentName)
HXDLIN(  62)		return ::GameManager_obj::currentName;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameManager_obj,getCurrentName,return )

void GameManager_obj::setCurrentName(::String name){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_66_setCurrentName)
HXLINE(  67)		::GameManager_obj::currentName = name;
HXLINE(  68)		::Sys_obj::println(::GameManager_obj::currentName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameManager_obj,setCurrentName,(void))

void GameManager_obj::writeScoreToDB(){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_72_writeScoreToDB)
HXLINE(  73)		::Dynamic cnx = ::sys::db::Sqlite_obj::open(HX_("DB/Data.db",51,a4,55,d5));
HXLINE(  74)		::sys::db::Connection_obj::request(cnx,((((HX_(" INSERT INTO Highscores (name, Score) VALUES(\"",22,55,be,26) + ::GameManager_obj::currentName) + HX_("\", ",16,f3,19,00)) + ::GameManager_obj::currentScore) + HX_(")",29,00,00,00)));
HXLINE(  76)		::sys::db::Connection_obj::close(cnx);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameManager_obj,writeScoreToDB,(void))

void GameManager_obj::getLeaderboard(){
            	HX_GC_STACKFRAME(&_hx_pos_c98349a901c50ee9_80_getLeaderboard)
HXLINE(  81)		::GameManager_obj::setMyStage();
HXLINE(  85)		::Dynamic cnx = ::sys::db::Sqlite_obj::open(HX_("DB/Data.db",51,a4,55,d5));
HXLINE(  88)		::Dynamic scoreSet = ::sys::db::Connection_obj::request(cnx,HX_("SELECT * FROM Highscores ORDER BY Score DESC LIMIT 5",65,c3,6a,43));
HXLINE(  92)		{
HXLINE(  92)			::Dynamic row = scoreSet;
HXDLIN(  92)			while(::sys::db::ResultSet_obj::hasNext(row)){
HXLINE(  92)				 ::Dynamic row1 = ::sys::db::ResultSet_obj::next(row);
HXLINE(  94)				::String charName = ( (::String)(row1->__Field(HX_("Name",6b,9e,d8,33),hx::paccDynamic)) );
HXLINE(  95)				int charScore = ( (int)(row1->__Field(HX_("Score",32,e3,06,0c),hx::paccDynamic)) );
HXLINE(  96)				int scoreYStartPos = (int)0;
HXLINE(  97)				int scoreXPos = (int)75;
HXLINE( 100)				::String scoreNameTextFieldText = ((((HX_("",00,00,00,00) + ::GameManager_obj::place) + HX_(" ",20,00,00,00)) + charName) + HX_(" ",20,00,00,00));
HXLINE( 101)				 ::openfl::text::TextField scoreNameTextField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 102)				scoreNameTextField->set_text(scoreNameTextFieldText);
HXLINE( 103)				int fontSize = (int)40;
HXLINE( 104)				scoreNameTextField->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getFont(HX_("Fonts/TIMES.TTF",93,38,16,a3),null())->name,fontSize,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 105)				scoreNameTextField->set_autoSize((int)1);
HXLINE( 106)				scoreNameTextField->set_x(scoreXPos);
HXLINE( 107)				scoreNameTextField->set_y(((::GameManager_obj::place * (int)50) + scoreYStartPos));
HXLINE( 108)				::GameManager_obj::myStage->addChild(scoreNameTextField);
HXLINE( 111)				::String scoreTextFieldText = ((HX_("",00,00,00,00) + charScore) + HX_(" ",20,00,00,00));
HXLINE( 112)				 ::openfl::text::TextField scoreTextField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 113)				scoreTextField->set_text(scoreTextFieldText);
HXLINE( 114)				int fontSize1 = (int)40;
HXLINE( 115)				scoreTextField->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getFont(HX_("Fonts/TIMES.TTF",93,38,16,a3),null())->name,fontSize1,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 116)				scoreTextField->set_autoSize((int)1);
HXLINE( 117)				scoreTextField->set_x((scoreXPos + (int)415));
HXLINE( 118)				scoreTextField->set_y(((::GameManager_obj::place * (int)50) + scoreYStartPos));
HXLINE( 119)				::GameManager_obj::myStage->addChild(scoreTextField);
HXLINE( 121)				 ::Dynamic _hx_tmp = hx::ClassOf< ::GameManager >();
HXDLIN( 121)				::GameManager_obj::place = (::GameManager_obj::place + (int)1);
            			}
            		}
HXLINE( 126)		::sys::db::Connection_obj::close(cnx);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameManager_obj,getLeaderboard,(void))

void GameManager_obj::getPuzzle(::String puzzle){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_140_getPuzzle)
HXLINE( 150)		int xPos = (int)50;
HXLINE( 151)		int yPos = (int)50;
HXLINE( 155)		int nothing = (int)0;
HXLINE( 156)		int H = (int)1;
HXLINE( 157)		int C = (int)6;
HXLINE( 158)		int O = (int)8;
HXLINE( 159)		int Na = (int)11;
HXLINE( 160)		::GameManager_obj::setMyStage();
HXLINE( 164)		::Dynamic cnx = ::sys::db::Sqlite_obj::open(HX_("DB/Data.db",51,a4,55,d5));
HXLINE( 167)		::Dynamic mixingLevelData = ::sys::db::Connection_obj::request(cnx,(HX_("SELECT * FROM ",dc,bd,4a,ff) + puzzle));
HXLINE( 169)		{
HXLINE( 169)			::Dynamic row = mixingLevelData;
HXDLIN( 169)			while(::sys::db::ResultSet_obj::hasNext(row)){
HXLINE( 169)				 ::Dynamic row1 = ::sys::db::ResultSet_obj::next(row);
HXLINE( 171)				if ((( (int)(row1->__Field(HX_("Collumn1",a7,06,7d,ab),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 174)					::Sys_obj::println(HX_("nothing was found",38,fe,90,32));
            				}
HXLINE( 178)				if ((( (int)(row1->__Field(HX_("Collumn1",a7,06,7d,ab),hx::paccDynamic)) ) == H)) {
HXLINE( 180)					::GameManager_obj::hydrogenAtom(xPos,yPos);
HXLINE( 181)					::Sys_obj::println(HX_("a Hydrogen Atom was found",7d,e3,5a,6d));
            				}
HXLINE( 184)				if ((( (int)(row1->__Field(HX_("Collumn1",a7,06,7d,ab),hx::paccDynamic)) ) == C)) {
HXLINE( 186)					::GameManager_obj::carbonAtom(xPos,yPos);
HXLINE( 187)					::Sys_obj::println(HX_("a Carbon Atom was found",50,e5,b1,dc));
            				}
HXLINE( 190)				if ((( (int)(row1->__Field(HX_("Collumn1",a7,06,7d,ab),hx::paccDynamic)) ) == O)) {
HXLINE( 192)					::GameManager_obj::oxygenAtom(xPos,yPos);
HXLINE( 193)					::Sys_obj::println(HX_("an Oxygen Atom was found",49,9f,33,8b));
            				}
HXLINE( 196)				if ((( (int)(row1->__Field(HX_("Collumn1",a7,06,7d,ab),hx::paccDynamic)) ) == Na)) {
HXLINE( 198)					::GameManager_obj::sodiumAtom(xPos,yPos);
HXLINE( 199)					::Sys_obj::println(HX_("a Sodium Atom was found",84,7d,74,15));
            				}
HXLINE( 204)				xPos = (xPos + (int)150);
HXLINE( 205)				if ((( (int)(row1->__Field(HX_("Collumn2",a8,06,7d,ab),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 208)					::Sys_obj::println(HX_("nothing was found",38,fe,90,32));
            				}
HXLINE( 212)				if ((( (int)(row1->__Field(HX_("Collumn2",a8,06,7d,ab),hx::paccDynamic)) ) == H)) {
HXLINE( 214)					::GameManager_obj::hydrogenAtom(xPos,yPos);
            				}
HXLINE( 217)				if ((( (int)(row1->__Field(HX_("Collumn2",a8,06,7d,ab),hx::paccDynamic)) ) == C)) {
HXLINE( 219)					::GameManager_obj::carbonAtom(xPos,yPos);
HXLINE( 220)					::Sys_obj::println(HX_("a Carbon Atom was found",50,e5,b1,dc));
            				}
HXLINE( 223)				if ((( (int)(row1->__Field(HX_("Collumn2",a8,06,7d,ab),hx::paccDynamic)) ) == O)) {
HXLINE( 225)					::GameManager_obj::oxygenAtom(xPos,yPos);
HXLINE( 226)					::Sys_obj::println(HX_("an Oxygen Atom was found",49,9f,33,8b));
            				}
HXLINE( 229)				if ((( (int)(row1->__Field(HX_("Collumn2",a8,06,7d,ab),hx::paccDynamic)) ) == Na)) {
HXLINE( 231)					::GameManager_obj::sodiumAtom(xPos,yPos);
HXLINE( 232)					::Sys_obj::println(HX_("a Sodium Atom was found",84,7d,74,15));
            				}
HXLINE( 236)				xPos = (xPos + (int)150);
HXLINE( 237)				if ((( (int)(row1->__Field(HX_("Collumn3",a9,06,7d,ab),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 239)					::Sys_obj::println(HX_("nothing was found",38,fe,90,32));
            				}
HXLINE( 243)				if ((( (int)(row1->__Field(HX_("Collumn3",a9,06,7d,ab),hx::paccDynamic)) ) == H)) {
HXLINE( 245)					::GameManager_obj::hydrogenAtom(xPos,yPos);
HXLINE( 247)					::Sys_obj::println(HX_("a Hydrogen Atom was found",7d,e3,5a,6d));
            				}
HXLINE( 250)				if ((( (int)(row1->__Field(HX_("Collumn3",a9,06,7d,ab),hx::paccDynamic)) ) == C)) {
HXLINE( 252)					::GameManager_obj::carbonAtom(xPos,yPos);
HXLINE( 253)					::Sys_obj::println(HX_("a Carbon Atom was found",50,e5,b1,dc));
            				}
HXLINE( 256)				if ((( (int)(row1->__Field(HX_("Collumn3",a9,06,7d,ab),hx::paccDynamic)) ) == O)) {
HXLINE( 258)					::GameManager_obj::oxygenAtom(xPos,yPos);
HXLINE( 259)					::Sys_obj::println(HX_("an Oxygen Atom was found",49,9f,33,8b));
            				}
HXLINE( 262)				if ((( (int)(row1->__Field(HX_("Collumn3",a9,06,7d,ab),hx::paccDynamic)) ) == Na)) {
HXLINE( 264)					::GameManager_obj::sodiumAtom(xPos,yPos);
HXLINE( 265)					::Sys_obj::println(HX_("a Sodium Atom was found",84,7d,74,15));
            				}
HXLINE( 269)				yPos = (yPos + (int)150);
HXLINE( 270)				xPos = (int)50;
            			}
            		}
HXLINE( 275)		::sys::db::Connection_obj::close(cnx);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameManager_obj,getPuzzle,(void))

void GameManager_obj::hydrogenAtom(int xPos,int yPos){
            	HX_GC_STACKFRAME(&_hx_pos_c98349a901c50ee9_279_hydrogenAtom)
HXLINE( 280)		 ::Atom hydrogenAtom =  ::Atom_obj::__alloc( HX_CTX ,HX_("H",48,00,00,00));
HXLINE( 281)		hydrogenAtom->set_x(xPos);
HXLINE( 282)		hydrogenAtom->set_y(yPos);
HXLINE( 283)		hydrogenAtom->addEventListener(HX_("click",48,7c,5e,48),::GameManager_obj::onAtomSelect_dyn(),null(),null(),null());
HXLINE( 285)		::GameManager_obj::myStage->addChild(hydrogenAtom);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GameManager_obj,hydrogenAtom,(void))

void GameManager_obj::carbonAtom(int xPos,int yPos){
            	HX_GC_STACKFRAME(&_hx_pos_c98349a901c50ee9_289_carbonAtom)
HXLINE( 290)		 ::Atom carbonAtom =  ::Atom_obj::__alloc( HX_CTX ,HX_("C",43,00,00,00));
HXLINE( 291)		carbonAtom->set_x(xPos);
HXLINE( 292)		carbonAtom->set_y(yPos);
HXLINE( 293)		carbonAtom->addEventListener(HX_("click",48,7c,5e,48),::GameManager_obj::onAtomSelect_dyn(),null(),null(),null());
HXLINE( 296)		::GameManager_obj::myStage->addChild(carbonAtom);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GameManager_obj,carbonAtom,(void))

void GameManager_obj::oxygenAtom(int xPos,int yPos){
            	HX_GC_STACKFRAME(&_hx_pos_c98349a901c50ee9_300_oxygenAtom)
HXLINE( 301)		 ::Atom oxygenAtom =  ::Atom_obj::__alloc( HX_CTX ,HX_("O",4f,00,00,00));
HXLINE( 302)		oxygenAtom->set_x(xPos);
HXLINE( 303)		oxygenAtom->set_y(yPos);
HXLINE( 304)		oxygenAtom->addEventListener(HX_("click",48,7c,5e,48),::GameManager_obj::onAtomSelect_dyn(),null(),null(),null());
HXLINE( 306)		::GameManager_obj::myStage->addChild(oxygenAtom);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GameManager_obj,oxygenAtom,(void))

void GameManager_obj::sodiumAtom(int xPos,int yPos){
            	HX_GC_STACKFRAME(&_hx_pos_c98349a901c50ee9_310_sodiumAtom)
HXLINE( 311)		 ::Atom sodiumAtom =  ::Atom_obj::__alloc( HX_CTX ,HX_("Na",53,44,00,00));
HXLINE( 312)		sodiumAtom->set_x(xPos);
HXLINE( 313)		sodiumAtom->set_y(yPos);
HXLINE( 314)		sodiumAtom->addEventListener(HX_("click",48,7c,5e,48),::GameManager_obj::onAtomSelect_dyn(),null(),null(),null());
HXLINE( 315)		::GameManager_obj::myStage->addChild(sodiumAtom);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GameManager_obj,sodiumAtom,(void))

void GameManager_obj::onAtomSelect( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_320_onAtomSelect)
HXLINE( 323)		 ::Atom atom = ( ( ::Atom)(event->target) );
HXLINE( 324)		::Sys_obj::println(HX_("atom was selected",e1,64,7c,ea));
HXLINE( 327)		atom->set_scaleX(((Float)1.1));
HXLINE( 328)		atom->set_scaleY(((Float)1.1));
HXLINE( 330)		if ((::GameManager_obj::selection->indexOf(atom,null()) == (int)-1)) {
HXLINE( 332)			::GameManager_obj::selection->push(atom);
            		}
HXLINE( 336)		if ((::GameManager_obj::selection->length == (int)3)) {
HXLINE( 339)			::GameManager_obj::checkIfMixed();
HXLINE( 342)			::GameManager_obj::selection = ::Array_obj< ::Dynamic>::__new();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameManager_obj,onAtomSelect,(void))

void GameManager_obj::checkIfMixed(){
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_347_checkIfMixed)
HXLINE( 351)		bool notMixed = true;
HXLINE( 356)		bool _hx_tmp;
HXDLIN( 356)		if ((::GameManager_obj::selection->__get((int)0).StaticCast<  ::Atom >()->element == ::GameManager_obj::selection->__get((int)1).StaticCast<  ::Atom >()->element)) {
HXLINE( 356)			_hx_tmp = (::GameManager_obj::selection->__get((int)0).StaticCast<  ::Atom >()->element == ::GameManager_obj::selection->__get((int)2).StaticCast<  ::Atom >()->element);
            		}
            		else {
HXLINE( 356)			_hx_tmp = false;
            		}
HXDLIN( 356)		if (_hx_tmp) {
HXLINE( 358)			notMixed = false;
            		}
HXLINE( 362)		if ((notMixed == false)) {
HXLINE( 364)			::SoundManager_obj::playSFX(HX_("Mixing",e6,58,2f,8e));
HXLINE( 367)			{
HXLINE( 367)				int _g = (int)0;
HXDLIN( 367)				::Array< ::Dynamic> _g1 = ::GameManager_obj::selection;
HXDLIN( 367)				while((_g < _g1->length)){
HXLINE( 367)					 ::Atom atom = _g1->__get(_g).StaticCast<  ::Atom >();
HXDLIN( 367)					_g = (_g + (int)1);
HXLINE( 370)					::GameManager_obj::myStage->removeChild(atom);
            				}
            			}
            		}
            		else {
HXLINE( 378)			notMixed = true;
            		}
HXLINE( 382)		if (notMixed) {
HXLINE( 385)			::SoundManager_obj::playSFX(HX_("WrongMix",8f,4a,b4,f0));
HXLINE( 386)			{
HXLINE( 386)				int _g2 = (int)0;
HXDLIN( 386)				::Array< ::Dynamic> _g11 = ::GameManager_obj::selection;
HXDLIN( 386)				while((_g2 < _g11->length)){
HXLINE( 386)					 ::Atom card = _g11->__get(_g2).StaticCast<  ::Atom >();
HXDLIN( 386)					_g2 = (_g2 + (int)1);
HXLINE( 388)					card->set_scaleX(((Float)1.0));
HXLINE( 389)					card->set_scaleY(((Float)1.0));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameManager_obj,checkIfMixed,(void))


GameManager_obj::GameManager_obj()
{
}

bool GameManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"place") ) { outValue = ( place ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myStage") ) { outValue = ( myStage ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"selection") ) { outValue = ( selection ); return true; }
		if (HX_FIELD_EQ(inName,"getPuzzle") ) { outValue = getPuzzle_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setMyStage") ) { outValue = setMyStage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"carbonAtom") ) { outValue = carbonAtom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"oxygenAtom") ) { outValue = oxygenAtom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sodiumAtom") ) { outValue = sodiumAtom_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentName") ) { outValue = ( currentName ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentScore") ) { outValue = ( currentScore ); return true; }
		if (HX_FIELD_EQ(inName,"hydrogenAtom") ) { outValue = hydrogenAtom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onAtomSelect") ) { outValue = onAtomSelect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkIfMixed") ) { outValue = checkIfMixed_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentName") ) { outValue = getCurrentName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setCurrentName") ) { outValue = setCurrentName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeScoreToDB") ) { outValue = writeScoreToDB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLeaderboard") ) { outValue = getLeaderboard_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getCurrentScore") ) { outValue = getCurrentScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setCurrentScore") ) { outValue = setCurrentScore_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"characterTextInput") ) { outValue = ( characterTextInput ); return true; }
	}
	return false;
}

bool GameManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"place") ) { place=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myStage") ) { myStage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"selection") ) { selection=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentName") ) { currentName=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentScore") ) { currentScore=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"characterTextInput") ) { characterTextInput=ioValue.Cast<  ::openfl::text::TextField >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GameManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GameManager_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &GameManager_obj::currentScore,HX_HCSTRING("currentScore","\x59","\x58","\xe5","\xbf")},
	{hx::fsInt,(void *) &GameManager_obj::place,HX_HCSTRING("place","\xc7","\xf4","\x8d","\xc4")},
	{hx::fsString,(void *) &GameManager_obj::currentName,HX_HCSTRING("currentName","\x24","\x4b","\x91","\x81")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(void *) &GameManager_obj::characterTextInput,HX_HCSTRING("characterTextInput","\x34","\x1b","\xa2","\x1a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &GameManager_obj::selection,HX_HCSTRING("selection","\x4c","\xf8","\x1a","\x8e")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &GameManager_obj::myStage,HX_HCSTRING("myStage","\xb2","\x13","\x0b","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GameManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GameManager_obj::currentScore,"currentScore");
	HX_MARK_MEMBER_NAME(GameManager_obj::place,"place");
	HX_MARK_MEMBER_NAME(GameManager_obj::currentName,"currentName");
	HX_MARK_MEMBER_NAME(GameManager_obj::characterTextInput,"characterTextInput");
	HX_MARK_MEMBER_NAME(GameManager_obj::selection,"selection");
	HX_MARK_MEMBER_NAME(GameManager_obj::myStage,"myStage");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GameManager_obj::currentScore,"currentScore");
	HX_VISIT_MEMBER_NAME(GameManager_obj::place,"place");
	HX_VISIT_MEMBER_NAME(GameManager_obj::currentName,"currentName");
	HX_VISIT_MEMBER_NAME(GameManager_obj::characterTextInput,"characterTextInput");
	HX_VISIT_MEMBER_NAME(GameManager_obj::selection,"selection");
	HX_VISIT_MEMBER_NAME(GameManager_obj::myStage,"myStage");
};

#endif

hx::Class GameManager_obj::__mClass;

static ::String GameManager_obj_sStaticFields[] = {
	HX_HCSTRING("currentScore","\x59","\x58","\xe5","\xbf"),
	HX_HCSTRING("place","\xc7","\xf4","\x8d","\xc4"),
	HX_HCSTRING("currentName","\x24","\x4b","\x91","\x81"),
	HX_HCSTRING("characterTextInput","\x34","\x1b","\xa2","\x1a"),
	HX_HCSTRING("selection","\x4c","\xf8","\x1a","\x8e"),
	HX_HCSTRING("myStage","\xb2","\x13","\x0b","\x2d"),
	HX_HCSTRING("setMyStage","\x30","\x38","\xea","\x7f"),
	HX_HCSTRING("getCurrentScore","\x0f","\xae","\xcf","\xe2"),
	HX_HCSTRING("setCurrentScore","\x1b","\x2b","\x9b","\xde"),
	HX_HCSTRING("getCurrentName","\x2e","\x9e","\x2f","\x09"),
	HX_HCSTRING("setCurrentName","\xa2","\x86","\x4f","\x29"),
	HX_HCSTRING("writeScoreToDB","\x4c","\x45","\x8f","\x46"),
	HX_HCSTRING("getLeaderboard","\x07","\xbe","\x96","\xbb"),
	HX_HCSTRING("getPuzzle","\xf4","\xca","\x31","\xf3"),
	HX_HCSTRING("hydrogenAtom","\xd1","\x98","\xed","\x16"),
	HX_HCSTRING("carbonAtom","\xde","\x8d","\xf3","\x90"),
	HX_HCSTRING("oxygenAtom","\x51","\x70","\xdc","\xe8"),
	HX_HCSTRING("sodiumAtom","\x2a","\x61","\xe0","\xf3"),
	HX_HCSTRING("onAtomSelect","\xac","\x3c","\x29","\x6a"),
	HX_HCSTRING("checkIfMixed","\xf6","\xb3","\xd8","\x5f"),
	::String(null())
};

void GameManager_obj::__register()
{
	hx::Object *dummy = new GameManager_obj;
	GameManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GameManager","\x7b","\xa0","\xaa","\xdc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GameManager_obj::__GetStatic;
	__mClass->mSetStaticField = &GameManager_obj::__SetStatic;
	__mClass->mMarkFunc = GameManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GameManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GameManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GameManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_31_boot)
HXDLIN(  31)		place = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c98349a901c50ee9_35_boot)
HXDLIN(  35)		selection = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

