// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_TextLayout
#include <lime/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_126_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",126,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_174_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",174,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_169_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",169,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_232_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",232,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_506_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",506,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_527_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",527,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_540_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",540,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_671_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",671,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1226_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1226,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1341_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1341,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1379_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1379,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1404_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1404,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_200_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",200,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_242_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",242,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_279_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",279,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_301_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",301,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_51_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",51,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_52_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",52,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_53_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",53,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_54_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",54,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_56_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",56,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_126_new)
HXLINE( 128)		this->textField = textField;
HXLINE( 130)		this->width = (int)100;
HXLINE( 131)		this->height = (int)100;
HXLINE( 132)		this->set_text(HX_("",00,00,00,00));
HXLINE( 134)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 136)		this->type = (int)0;
HXLINE( 137)		this->autoSize = (int)2;
HXLINE( 138)		this->embedFonts = false;
HXLINE( 139)		this->selectable = true;
HXLINE( 140)		this->borderColor = (int)0;
HXLINE( 141)		this->border = false;
HXLINE( 142)		this->backgroundColor = (int)16777215;
HXLINE( 143)		this->background = false;
HXLINE( 144)		this->gridFitType = (int)1;
HXLINE( 145)		this->maxChars = (int)0;
HXLINE( 146)		this->multiline = false;
HXLINE( 147)		this->sharpness = (int)0;
HXLINE( 148)		this->scrollH = (int)0;
HXLINE( 149)		this->scrollV = (int)1;
HXLINE( 150)		this->wordWrap = false;
HXLINE( 152)		int length = null();
HXDLIN( 152)		bool fixed = null();
HXDLIN( 152)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 153)		int length1 = null();
HXDLIN( 153)		bool fixed1 = null();
HXDLIN( 153)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 154)		int length2 = null();
HXDLIN( 154)		bool fixed2 = null();
HXDLIN( 154)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null());
HXLINE( 155)		int length3 = null();
HXDLIN( 155)		bool fixed3 = null();
HXDLIN( 155)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null());
HXLINE( 156)		int length4 = null();
HXDLIN( 156)		bool fixed4 = null();
HXDLIN( 156)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null());
HXLINE( 157)		int length5 = null();
HXDLIN( 157)		bool fixed5 = null();
HXDLIN( 157)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null());
HXLINE( 158)		int length6 = null();
HXDLIN( 158)		bool fixed6 = null();
HXDLIN( 158)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null());
HXLINE( 159)		int length7 = null();
HXDLIN( 159)		bool fixed7 = null();
HXDLIN( 159)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null());
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_174_createRestrictRegexp)
HXLINE( 176)			::Array< ::String > declined1 = declined;
HXDLIN( 176)			int accepted1 = (int)0;
HXDLIN( 176)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 176)			declined1[accepted1] = (declined2 + ereg->matched((int)1));
HXLINE( 177)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_169_createRestrictRegexp)
HXLINE( 171)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 172)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 174)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 181)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 183)		if ((accepted.length > (int)0)) {
HXLINE( 185)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 189)		if ((declined->__get((int)0).length > (int)0)) {
HXLINE( 191)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get((int)0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 195)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_232_getBounds)
HXLINE( 234)		int padding;
HXDLIN( 234)		if (this->border) {
HXLINE( 234)			padding = (int)1;
            		}
            		else {
HXLINE( 234)			padding = (int)0;
            		}
HXLINE( 236)		this->bounds->width = (this->width + padding);
HXLINE( 237)		this->bounds->height = (this->height + padding);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_506_getLine)
HXLINE( 508)		bool _hx_tmp;
HXDLIN( 508)		if ((index >= (int)0)) {
HXLINE( 508)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 508)			_hx_tmp = true;
            		}
HXDLIN( 508)		if (_hx_tmp) {
HXLINE( 510)			return null();
            		}
HXLINE( 514)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 516)			return this->text;
            		}
            		else {
HXLINE( 520)			::String _hx_tmp1 = this->text;
HXDLIN( 520)			int _hx_tmp2;
HXDLIN( 520)			if ((index > (int)0)) {
HXLINE( 520)				_hx_tmp2 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 520)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 520)			return _hx_tmp1.substring(_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 514)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_527_getLineBreakIndex)
HXLINE( 529)		int cr = this->text.indexOf(HX_("\n",0a,00,00,00),startIndex);
HXLINE( 530)		int lf = this->text.indexOf(HX_("\r",0d,00,00,00),startIndex);
HXLINE( 532)		if ((cr == (int)-1)) {
HXLINE( 532)			return lf;
            		}
HXLINE( 533)		if ((lf == (int)-1)) {
HXLINE( 533)			return cr;
            		}
HXLINE( 535)		if ((cr < lf)) {
HXLINE( 535)			return cr;
            		}
            		else {
HXLINE( 535)			return lf;
            		}
HXDLIN( 535)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_540_getLineMeasurements)
HXLINE( 542)		this->lineAscents->set_length((int)0);
HXLINE( 543)		this->lineDescents->set_length((int)0);
HXLINE( 544)		this->lineLeadings->set_length((int)0);
HXLINE( 545)		this->lineHeights->set_length((int)0);
HXLINE( 546)		this->lineWidths->set_length((int)0);
HXLINE( 548)		Float currentLineAscent = ((Float)0.0);
HXLINE( 549)		Float currentLineDescent = ((Float)0.0);
HXLINE( 550)		 ::Dynamic currentLineLeading = null();
HXLINE( 551)		Float currentLineHeight = ((Float)0.0);
HXLINE( 552)		Float currentLineWidth = ((Float)0.0);
HXLINE( 554)		this->textWidth = (int)0;
HXLINE( 555)		this->textHeight = (int)0;
HXLINE( 556)		this->numLines = (int)1;
HXLINE( 557)		this->bottomScrollV = (int)0;
HXLINE( 558)		this->maxScrollH = (int)0;
HXLINE( 560)		{
HXLINE( 560)			int _g = (int)0;
HXDLIN( 560)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 560)			while((_g < _g1->get_length())){
HXLINE( 560)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 560)				_g = (_g + (int)1);
HXLINE( 562)				while(true){
HXLINE( 562)					int group1 = group->lineIndex;
HXDLIN( 562)					if (!((group1 > (this->numLines - (int)1)))) {
HXLINE( 562)						goto _hx_goto_8;
            					}
HXLINE( 564)					this->lineAscents->push(currentLineAscent);
HXLINE( 565)					this->lineDescents->push(currentLineDescent);
HXLINE( 566)					{
HXLINE( 566)						Float _hx_tmp;
HXDLIN( 566)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 566)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 566)							_hx_tmp = (int)0;
            						}
HXDLIN( 566)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 567)					this->lineHeights->push(currentLineHeight);
HXLINE( 568)					this->lineWidths->push(currentLineWidth);
HXLINE( 570)					currentLineAscent = (int)0;
HXLINE( 571)					currentLineDescent = (int)0;
HXLINE( 572)					currentLineLeading = null();
HXLINE( 573)					currentLineHeight = (int)0;
HXLINE( 574)					currentLineWidth = (int)0;
HXLINE( 576)					this->numLines++;
HXLINE( 578)					Float _hx_tmp1 = this->textHeight;
HXDLIN( 578)					if ((_hx_tmp1 <= (this->height - (int)2))) {
HXLINE( 580)						this->bottomScrollV++;
            					}
            				}
            				_hx_goto_8:;
HXLINE( 586)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 587)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 589)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 591)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 595)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 599)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 600)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 602)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 604)					this->textWidth = currentLineWidth;
            				}
HXLINE( 608)				this->textHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
            			}
            		}
HXLINE( 612)		this->lineAscents->push(currentLineAscent);
HXLINE( 613)		this->lineDescents->push(currentLineDescent);
HXLINE( 614)		{
HXLINE( 614)			Float _hx_tmp2;
HXDLIN( 614)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 614)				_hx_tmp2 = currentLineLeading;
            			}
            			else {
HXLINE( 614)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 614)			this->lineLeadings->push(_hx_tmp2);
            		}
HXLINE( 615)		this->lineHeights->push(currentLineHeight);
HXLINE( 616)		this->lineWidths->push(currentLineWidth);
HXLINE( 618)		if ((this->numLines == (int)1)) {
HXLINE( 620)			this->bottomScrollV = (int)1;
HXLINE( 622)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 624)				 ::openfl::_internal::text::TextEngine _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 624)				_hx_tmp3->textHeight = (_hx_tmp3->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 628)			Float _hx_tmp4 = this->textHeight;
HXDLIN( 628)			if ((_hx_tmp4 <= (this->height - (int)2))) {
HXLINE( 630)				this->bottomScrollV++;
            			}
            		}
HXLINE( 634)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 636)			 ::Dynamic _g2 = this->autoSize;
HXDLIN( 636)			 ::Dynamic _hx_switch_0 = _g2;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 640)				if (!(this->wordWrap)) {
HXLINE( 642)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 646)				this->height = (this->textHeight + (int)4);
HXLINE( 647)				this->bottomScrollV = this->numLines;
HXLINE( 638)				goto _hx_goto_9;
            			}
            			/* default */{
            			}
            			_hx_goto_9:;
            		}
HXLINE( 656)		Float _hx_tmp5 = this->textWidth;
HXDLIN( 656)		if ((_hx_tmp5 > (this->width - (int)4))) {
HXLINE( 658)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 662)			this->maxScrollH = (int)0;
            		}
HXLINE( 666)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_671_getLayoutGroups)
HXDLIN( 671)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 673)		this->layoutGroups->set_length((int)0);
HXLINE( 675)		int rangeIndex = (int)-1;
HXLINE( 676)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 677)		 ::lime::text::Font font = null();
HXLINE( 679)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 681)		int leading = (int)0;
HXLINE( 682)		Float ascent = ((Float)0.0);
HXLINE( 683)		Float descent = ((Float)0.0);
HXLINE( 685)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 685)		::Array< Float > advances = null();
HXLINE( 686)		Float widthValue;
HXDLIN( 686)		Float heightValue = ((Float)0.0);
HXLINE( 688)		int previousSpaceIndex = (int)-2;
HXLINE( 689)		int spaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),null());
HXLINE( 690)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 692)		Float offsetX = ((Float)2.0);
HXLINE( 693)		Float offsetY = ((Float)2.0);
HXLINE( 694)		int textIndex = (int)0;
HXLINE( 695)		int lineIndex = (int)0;
HXLINE( 696)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE( 903)		if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE( 903)			rangeIndex = (rangeIndex + (int)1);
HXDLIN( 903)			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN( 903)			currentFormat->_hx___merge(formatRange->format);
HXDLIN( 903)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 903)			if (hx::IsNotNull( font )) {
HXLINE( 903)				int ascent1 = font->get_ascender();
HXDLIN( 903)				Float ascent2 = ((Float)ascent1 / (Float)font->get_unitsPerEM());
HXDLIN( 903)				ascent = (ascent2 * currentFormat->size);
HXDLIN( 903)				int descent1 = font->get_descender();
HXDLIN( 903)				Float descent2 = ((Float)descent1 / (Float)font->get_unitsPerEM());
HXDLIN( 903)				descent = ::Math_obj::abs((descent2 * currentFormat->size));
HXDLIN( 903)				leading = currentFormat->leading;
HXDLIN( 903)				heightValue = ((ascent + descent) + leading);
            			}
            			else {
HXLINE( 903)				ascent = currentFormat->size;
HXDLIN( 903)				descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 903)				leading = currentFormat->leading;
HXDLIN( 903)				heightValue = ((ascent + descent) + leading);
            			}
            		}
HXLINE( 905)		lineFormat = formatRange->format;
HXLINE( 906)		bool wrap;
HXLINE( 907)		int maxLoops = this->text.length;
HXLINE( 908)		if (this->multiline) {
HXLINE( 908)			maxLoops = (maxLoops + (int)1);
            		}
HXLINE( 910)		while((textIndex < maxLoops)){
HXLINE( 912)			bool _hx_tmp;
HXDLIN( 912)			bool _hx_tmp1;
HXDLIN( 912)			if ((breakIndex > (int)-1)) {
HXLINE( 912)				if ((spaceIndex != (int)-1)) {
HXLINE( 912)					_hx_tmp1 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE( 912)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 912)				_hx_tmp1 = false;
            			}
HXDLIN( 912)			if (_hx_tmp1) {
HXLINE( 912)				_hx_tmp = (formatRange->end >= breakIndex);
            			}
            			else {
HXLINE( 912)				_hx_tmp = false;
            			}
HXDLIN( 912)			if (_hx_tmp) {
HXLINE( 914)				if ((textIndex <= breakIndex)) {
HXLINE( 916)					bool _hx_tmp2;
HXDLIN( 916)					if (hx::IsNotNull( layoutGroup )) {
HXLINE( 916)						_hx_tmp2 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE( 916)						_hx_tmp2 = true;
            					}
HXDLIN( 916)					if (_hx_tmp2) {
HXLINE( 916)						layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN( 916)						::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            					}
            					else {
HXLINE( 916)						layoutGroup->format = formatRange->format;
HXDLIN( 916)						layoutGroup->startIndex = textIndex;
HXDLIN( 916)						layoutGroup->endIndex = breakIndex;
            					}
HXLINE( 918)					::String text = this->text;
HXDLIN( 918)					::Array< Float > advances1 = ::Array_obj< Float >::__new(0);
HXDLIN( 918)					if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE( 918)						_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            					}
HXDLIN( 918)					Float width = ((Float)0.0);
HXDLIN( 918)					_gthis->_hx___textLayout->set_text(null());
HXDLIN( 918)					_gthis->_hx___textLayout->set_font(font);
HXDLIN( 918)					if (hx::IsNotNull( formatRange->format->size )) {
HXLINE( 918)						_gthis->_hx___textLayout->set_size(formatRange->format->size);
            					}
HXDLIN( 918)					 ::lime::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN( 918)					_gthis1->set_text(text.substring(textIndex,breakIndex));
HXDLIN( 918)					{
HXLINE( 918)						int _g = (int)0;
HXDLIN( 918)						::Array< ::Dynamic> _g1 = _gthis->_hx___textLayout->get_positions();
HXDLIN( 918)						while((_g < _g1->length)){
HXLINE( 918)							 ::lime::text::GlyphPosition position = _g1->__get(_g).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 918)							_g = (_g + (int)1);
HXDLIN( 918)							advances1->push(position->advance->x);
            						}
            					}
HXDLIN( 918)					layoutGroup->advances = advances1;
HXLINE( 919)					layoutGroup->offsetX = offsetX;
HXLINE( 920)					layoutGroup->ascent = ascent;
HXLINE( 921)					layoutGroup->descent = descent;
HXLINE( 922)					layoutGroup->leading = leading;
HXLINE( 923)					layoutGroup->lineIndex = lineIndex;
HXLINE( 924)					layoutGroup->offsetY = offsetY;
HXLINE( 925)					::Array< Float > advances2 = layoutGroup->advances;
HXDLIN( 925)					Float width1 = ((Float)0.0);
HXDLIN( 925)					{
HXLINE( 925)						int _g2 = (int)0;
HXDLIN( 925)						while((_g2 < advances2->length)){
HXLINE( 925)							Float advance = advances2->__get(_g2);
HXDLIN( 925)							_g2 = (_g2 + (int)1);
HXDLIN( 925)							width1 = (width1 + advance);
            						}
            					}
HXDLIN( 925)					layoutGroup->width = width1;
HXLINE( 926)					layoutGroup->height = heightValue;
HXLINE( 928)					layoutGroup = null();
            				}
            				else {
HXLINE( 930)					bool _hx_tmp3;
HXDLIN( 930)					if (hx::IsNotNull( layoutGroup )) {
HXLINE( 930)						_hx_tmp3 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE( 930)						_hx_tmp3 = false;
            					}
HXDLIN( 930)					if (_hx_tmp3) {
HXLINE( 933)						 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN( 933)						::Array< Float > layoutGroup2 = layoutGroup->advances;
HXDLIN( 933)						layoutGroup1->width = (layoutGroup1->width - layoutGroup2->__get((layoutGroup->advances->length - (int)1)));
HXLINE( 935)						layoutGroup = null();
            					}
            				}
HXLINE( 939)				offsetY = (offsetY + heightValue);
HXLINE( 940)				offsetX = (int)2;
HXLINE( 942)				if ((formatRange->end == breakIndex)) {
HXLINE( 944)					if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE( 944)						rangeIndex = (rangeIndex + (int)1);
HXDLIN( 944)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN( 944)						currentFormat->_hx___merge(formatRange->format);
HXDLIN( 944)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 944)						if (hx::IsNotNull( font )) {
HXLINE( 944)							int ascent3 = font->get_ascender();
HXDLIN( 944)							Float ascent4 = ((Float)ascent3 / (Float)font->get_unitsPerEM());
HXDLIN( 944)							ascent = (ascent4 * currentFormat->size);
HXDLIN( 944)							int descent3 = font->get_descender();
HXDLIN( 944)							Float descent4 = ((Float)descent3 / (Float)font->get_unitsPerEM());
HXDLIN( 944)							descent = ::Math_obj::abs((descent4 * currentFormat->size));
HXDLIN( 944)							leading = currentFormat->leading;
HXDLIN( 944)							heightValue = ((ascent + descent) + leading);
            						}
            						else {
HXLINE( 944)							ascent = currentFormat->size;
HXDLIN( 944)							descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 944)							leading = currentFormat->leading;
HXDLIN( 944)							heightValue = ((ascent + descent) + leading);
            						}
            					}
HXLINE( 945)					lineFormat = formatRange->format;
            				}
HXLINE( 949)				textIndex = (breakIndex + (int)1);
HXLINE( 950)				breakIndex = this->getLineBreakIndex(textIndex);
HXLINE( 951)				lineIndex = (lineIndex + (int)1);
            			}
            			else {
HXLINE( 953)				bool _hx_tmp4;
HXDLIN( 953)				bool _hx_tmp5;
HXDLIN( 953)				if ((formatRange->end >= spaceIndex)) {
HXLINE( 953)					_hx_tmp5 = (spaceIndex > (int)-1);
            				}
            				else {
HXLINE( 953)					_hx_tmp5 = false;
            				}
HXDLIN( 953)				if (_hx_tmp5) {
HXLINE( 953)					_hx_tmp4 = (textIndex < formatRange->end);
            				}
            				else {
HXLINE( 953)					_hx_tmp4 = false;
            				}
HXDLIN( 953)				if (_hx_tmp4) {
HXLINE( 955)					bool _hx_tmp6;
HXDLIN( 955)					if (hx::IsNotNull( layoutGroup )) {
HXLINE( 955)						_hx_tmp6 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE( 955)						_hx_tmp6 = false;
            					}
HXDLIN( 955)					if (_hx_tmp6) {
HXLINE( 957)						layoutGroup = null();
            					}
HXLINE( 961)					wrap = false;
HXLINE( 963)					while((textIndex != formatRange->end)){
HXLINE( 967)						int endIndex;
HXDLIN( 967)						if ((spaceIndex == (int)-1)) {
HXLINE( 967)							if ((breakIndex == (int)-1)) {
HXLINE( 967)								endIndex = formatRange->end;
            							}
            							else {
HXLINE( 967)								endIndex = breakIndex;
            							}
            						}
            						else {
HXLINE( 967)							if (((spaceIndex + (int)1) > formatRange->end)) {
HXLINE( 967)								endIndex = formatRange->end;
            							}
            							else {
HXLINE( 967)								endIndex = (spaceIndex + (int)1);
            							}
            						}
HXLINE( 969)						::String text1 = this->text;
HXDLIN( 969)						::Array< Float > advances3 = ::Array_obj< Float >::__new(0);
HXDLIN( 969)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE( 969)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN( 969)						Float width2 = ((Float)0.0);
HXDLIN( 969)						_gthis->_hx___textLayout->set_text(null());
HXDLIN( 969)						_gthis->_hx___textLayout->set_font(font);
HXDLIN( 969)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE( 969)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN( 969)						 ::lime::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN( 969)						_gthis2->set_text(text1.substring(textIndex,endIndex));
HXDLIN( 969)						{
HXLINE( 969)							int _g3 = (int)0;
HXDLIN( 969)							::Array< ::Dynamic> _g11 = _gthis->_hx___textLayout->get_positions();
HXDLIN( 969)							while((_g3 < _g11->length)){
HXLINE( 969)								 ::lime::text::GlyphPosition position1 = _g11->__get(_g3).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 969)								_g3 = (_g3 + (int)1);
HXDLIN( 969)								advances3->push(position1->advance->x);
            							}
            						}
HXDLIN( 969)						advances = advances3;
HXLINE( 970)						Float width3 = ((Float)0.0);
HXDLIN( 970)						{
HXLINE( 970)							int _g4 = (int)0;
HXDLIN( 970)							while((_g4 < advances->length)){
HXLINE( 970)								Float advance1 = advances->__get(_g4);
HXDLIN( 970)								_g4 = (_g4 + (int)1);
HXDLIN( 970)								width3 = (width3 + advance1);
            							}
            						}
HXDLIN( 970)						widthValue = width3;
HXLINE( 973)						if (hx::IsEq( lineFormat->align,(int)2 )) {
HXLINE( 975)							bool _hx_tmp7;
HXDLIN( 975)							if ((advances->length > (int)0)) {
HXLINE( 975)								_hx_tmp7 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE( 975)								_hx_tmp7 = false;
            							}
HXDLIN( 975)							if (_hx_tmp7) {
HXLINE( 978)								textIndex = (textIndex + (int)1);
HXLINE( 980)								 ::Dynamic spaceWidth = advances->shift();
HXLINE( 981)								widthValue = (widthValue - spaceWidth);
HXLINE( 982)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE( 986)							bool _hx_tmp8;
HXDLIN( 986)							if ((advances->length > (int)0)) {
HXLINE( 986)								_hx_tmp8 = (endIndex == (spaceIndex + (int)1));
            							}
            							else {
HXLINE( 986)								_hx_tmp8 = false;
            							}
HXDLIN( 986)							if (_hx_tmp8) {
HXLINE( 989)								endIndex = (endIndex - (int)1);
HXLINE( 991)								 ::Dynamic spaceWidth1 = advances->pop();
HXLINE( 992)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE( 998)						if (this->wordWrap) {
HXLINE(1000)							if (((offsetX + widthValue) > this->width)) {
HXLINE(1002)								wrap = true;
            							}
            						}
HXLINE(1008)						if (wrap) {
HXLINE(1010)							bool _hx_tmp9;
HXDLIN(1010)							if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1010)								if (hx::IsNull( layoutGroup )) {
HXLINE(1010)									_hx_tmp9 = (this->layoutGroups->get_length() > (int)0);
            								}
            								else {
HXLINE(1010)									_hx_tmp9 = true;
            								}
            							}
            							else {
HXLINE(1010)								_hx_tmp9 = false;
            							}
HXDLIN(1010)							if (_hx_tmp9) {
HXLINE(1012)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1013)								if (hx::IsNull( previous )) {
HXLINE(1014)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1014)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1018)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1018)								::Array< Float > previous2 = previous->advances;
HXDLIN(1018)								previous1->width = (previous1->width - previous2->__get((previous->advances->length - (int)1)));
HXLINE(1019)								previous->endIndex--;
            							}
HXLINE(1023)							offsetY = (offsetY + heightValue);
HXLINE(1025)							int i = (this->layoutGroups->get_length() - (int)1);
HXLINE(1026)							int offsetCount = (int)0;
HXLINE(1028)							while(true){
HXLINE(1030)								layoutGroup = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1032)								bool _hx_tmp10;
HXDLIN(1032)								if ((i > (int)0)) {
HXLINE(1032)									_hx_tmp10 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1032)									_hx_tmp10 = false;
            								}
HXDLIN(1032)								if (_hx_tmp10) {
HXLINE(1034)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE(1038)									goto _hx_goto_17;
            								}
HXLINE(1042)								i = (i - (int)1);
            							}
            							_hx_goto_17:;
HXLINE(1046)							lineIndex = (lineIndex + (int)1);
HXLINE(1048)							offsetX = (int)2;
HXLINE(1050)							if ((offsetCount > (int)0)) {
HXLINE(1052)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1052)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1054)								{
HXLINE(1054)									int _g12 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1054)									int _g5 = this->layoutGroups->get_length();
HXDLIN(1054)									while((_g12 < _g5)){
HXLINE(1054)										_g12 = (_g12 + (int)1);
HXDLIN(1054)										int i1 = (_g12 - (int)1);
HXLINE(1056)										layoutGroup = this->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1057)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1057)										layoutGroup3->offsetX = (layoutGroup3->offsetX - bumpX);
HXLINE(1058)										layoutGroup->offsetY = offsetY;
HXLINE(1059)										layoutGroup->lineIndex = lineIndex;
HXLINE(1060)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1066)							bool _hx_tmp11;
HXDLIN(1066)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1066)								_hx_tmp11 = (layoutGroup->startIndex != layoutGroup->endIndex);
            							}
            							else {
HXLINE(1066)								_hx_tmp11 = true;
            							}
HXDLIN(1066)							if (_hx_tmp11) {
HXLINE(1066)								layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXDLIN(1066)								::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            							}
            							else {
HXLINE(1066)								layoutGroup->format = formatRange->format;
HXDLIN(1066)								layoutGroup->startIndex = textIndex;
HXDLIN(1066)								layoutGroup->endIndex = endIndex;
            							}
HXLINE(1068)							layoutGroup->advances = advances;
HXLINE(1069)							layoutGroup->offsetX = offsetX;
HXLINE(1070)							layoutGroup->ascent = ascent;
HXLINE(1071)							layoutGroup->descent = descent;
HXLINE(1072)							layoutGroup->leading = leading;
HXLINE(1073)							layoutGroup->lineIndex = lineIndex;
HXLINE(1074)							layoutGroup->offsetY = offsetY;
HXLINE(1075)							layoutGroup->width = widthValue;
HXLINE(1076)							layoutGroup->height = heightValue;
HXLINE(1078)							offsetX = (offsetX + widthValue);
HXLINE(1080)							textIndex = endIndex;
HXLINE(1082)							wrap = false;
            						}
            						else {
HXLINE(1086)							bool _hx_tmp12;
HXDLIN(1086)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1086)								_hx_tmp12 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1086)								_hx_tmp12 = false;
            							}
HXDLIN(1086)							if (_hx_tmp12) {
HXLINE(1088)								if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1090)									layoutGroup->endIndex = spaceIndex;
            								}
            							}
            							else {
HXLINE(1094)								bool _hx_tmp13;
HXDLIN(1094)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1094)									_hx_tmp13 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE(1094)									_hx_tmp13 = true;
            								}
HXDLIN(1094)								if (_hx_tmp13) {
HXLINE(1096)									bool _hx_tmp14;
HXDLIN(1096)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1096)										_hx_tmp14 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1096)										_hx_tmp14 = true;
            									}
HXDLIN(1096)									if (_hx_tmp14) {
HXLINE(1096)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXDLIN(1096)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1096)										layoutGroup->format = formatRange->format;
HXDLIN(1096)										layoutGroup->startIndex = textIndex;
HXDLIN(1096)										layoutGroup->endIndex = endIndex;
            									}
HXLINE(1098)									layoutGroup->advances = advances;
HXLINE(1099)									layoutGroup->offsetX = offsetX;
HXLINE(1100)									layoutGroup->ascent = ascent;
HXLINE(1101)									layoutGroup->descent = descent;
HXLINE(1102)									layoutGroup->leading = leading;
HXLINE(1103)									layoutGroup->lineIndex = lineIndex;
HXLINE(1104)									layoutGroup->offsetY = offsetY;
HXLINE(1105)									layoutGroup->width = widthValue;
HXLINE(1106)									layoutGroup->height = heightValue;
            								}
            								else {
HXLINE(1110)									layoutGroup->endIndex = endIndex;
HXLINE(1111)									layoutGroup->advances = layoutGroup->advances->concat(advances);
HXLINE(1112)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1112)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1115)									if ((breakIndex == endIndex)) {
HXLINE(1115)										endIndex = (endIndex + (int)1);
            									}
            								}
            							}
HXLINE(1119)							offsetX = (offsetX + widthValue);
HXLINE(1121)							textIndex = endIndex;
            						}
HXLINE(1125)						int nextSpaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),textIndex);
HXLINE(1127)						if ((formatRange->end <= previousSpaceIndex)) {
HXLINE(1129)							layoutGroup = null();
HXLINE(1130)							textIndex = formatRange->end;
HXLINE(1131)							if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE(1131)								rangeIndex = (rangeIndex + (int)1);
HXDLIN(1131)								formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1131)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1131)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1131)								if (hx::IsNotNull( font )) {
HXLINE(1131)									int ascent5 = font->get_ascender();
HXDLIN(1131)									Float ascent6 = ((Float)ascent5 / (Float)font->get_unitsPerEM());
HXDLIN(1131)									ascent = (ascent6 * currentFormat->size);
HXDLIN(1131)									int descent5 = font->get_descender();
HXDLIN(1131)									Float descent6 = ((Float)descent5 / (Float)font->get_unitsPerEM());
HXDLIN(1131)									descent = ::Math_obj::abs((descent6 * currentFormat->size));
HXDLIN(1131)									leading = currentFormat->leading;
HXDLIN(1131)									heightValue = ((ascent + descent) + leading);
            								}
            								else {
HXLINE(1131)									ascent = currentFormat->size;
HXDLIN(1131)									descent = (currentFormat->size * ((Float)0.185));
HXDLIN(1131)									leading = currentFormat->leading;
HXDLIN(1131)									heightValue = ((ascent + descent) + leading);
            								}
            							}
            						}
            						else {
HXLINE(1138)							if ((breakIndex == previousSpaceIndex)) {
HXLINE(1140)								layoutGroup->endIndex = breakIndex;
HXLINE(1142)								if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->advances->length) < (int)0)) {
HXLINE(1145)									layoutGroup->advances->push(((Float)0.0));
            								}
HXLINE(1149)								textIndex = (breakIndex + (int)1);
            							}
HXLINE(1153)							previousSpaceIndex = spaceIndex;
HXLINE(1154)							spaceIndex = nextSpaceIndex;
            						}
HXLINE(1158)						bool _hx_tmp15;
HXDLIN(1158)						bool _hx_tmp16;
HXDLIN(1158)						bool _hx_tmp17;
HXDLIN(1158)						if ((breakIndex > (int)-1)) {
HXLINE(1158)							if ((spaceIndex <= breakIndex)) {
HXLINE(1158)								if ((spaceIndex == (int)-1)) {
HXLINE(1158)									_hx_tmp17 = (breakIndex <= textIndex);
            								}
            								else {
HXLINE(1158)									_hx_tmp17 = false;
            								}
            							}
            							else {
HXLINE(1158)								_hx_tmp17 = true;
            							}
            						}
            						else {
HXLINE(1158)							_hx_tmp17 = false;
            						}
HXDLIN(1158)						if (!(_hx_tmp17)) {
HXLINE(1158)							_hx_tmp16 = (textIndex > this->text.length);
            						}
            						else {
HXLINE(1158)							_hx_tmp16 = true;
            						}
HXDLIN(1158)						if (!(_hx_tmp16)) {
HXLINE(1158)							_hx_tmp15 = (spaceIndex > formatRange->end);
            						}
            						else {
HXLINE(1158)							_hx_tmp15 = true;
            						}
HXDLIN(1158)						if (_hx_tmp15) {
HXLINE(1160)							goto _hx_goto_14;
            						}
            					}
            					_hx_goto_14:;
            				}
            				else {
HXLINE(1168)					if ((textIndex > formatRange->end)) {
HXLINE(1170)						goto _hx_goto_11;
            					}
            					else {
HXLINE(1172)						bool _hx_tmp18;
HXDLIN(1172)						if ((textIndex >= formatRange->end)) {
HXLINE(1172)							_hx_tmp18 = (textIndex == this->text.length);
            						}
            						else {
HXLINE(1172)							_hx_tmp18 = true;
            						}
HXDLIN(1172)						if (_hx_tmp18) {
HXLINE(1174)							::String text2 = this->text;
HXDLIN(1174)							int endIndex1 = formatRange->end;
HXDLIN(1174)							::Array< Float > advances4 = ::Array_obj< Float >::__new(0);
HXDLIN(1174)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1174)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1174)							Float width4 = ((Float)0.0);
HXDLIN(1174)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1174)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1174)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1174)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1174)							 ::lime::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1174)							_gthis3->set_text(text2.substring(textIndex,endIndex1));
HXDLIN(1174)							{
HXLINE(1174)								int _g6 = (int)0;
HXDLIN(1174)								::Array< ::Dynamic> _g13 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1174)								while((_g6 < _g13->length)){
HXLINE(1174)									 ::lime::text::GlyphPosition position2 = _g13->__get(_g6).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1174)									_g6 = (_g6 + (int)1);
HXDLIN(1174)									advances4->push(position2->advance->x);
            								}
            							}
HXDLIN(1174)							advances = advances4;
HXLINE(1175)							Float width5 = ((Float)0.0);
HXDLIN(1175)							{
HXLINE(1175)								int _g7 = (int)0;
HXDLIN(1175)								while((_g7 < advances->length)){
HXLINE(1175)									Float advance2 = advances->__get(_g7);
HXDLIN(1175)									_g7 = (_g7 + (int)1);
HXDLIN(1175)									width5 = (width5 + advance2);
            								}
            							}
HXDLIN(1175)							widthValue = width5;
HXLINE(1177)							bool _hx_tmp19;
HXDLIN(1177)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1177)								_hx_tmp19 = (layoutGroup->startIndex != layoutGroup->endIndex);
            							}
            							else {
HXLINE(1177)								_hx_tmp19 = false;
            							}
HXDLIN(1177)							if (_hx_tmp19) {
HXLINE(1179)								layoutGroup->advances = layoutGroup->advances->concat(advances);
HXLINE(1180)								 ::openfl::_internal::text::TextLayoutGroup layoutGroup5 = layoutGroup;
HXDLIN(1180)								layoutGroup5->width = (layoutGroup5->width + widthValue);
HXLINE(1181)								layoutGroup->endIndex = formatRange->end;
            							}
            							else {
HXLINE(1185)								{
HXLINE(1185)									int endIndex2 = formatRange->end;
HXDLIN(1185)									bool _hx_tmp20;
HXDLIN(1185)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1185)										_hx_tmp20 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1185)										_hx_tmp20 = true;
            									}
HXDLIN(1185)									if (_hx_tmp20) {
HXLINE(1185)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1185)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1185)										layoutGroup->format = formatRange->format;
HXDLIN(1185)										layoutGroup->startIndex = textIndex;
HXDLIN(1185)										layoutGroup->endIndex = endIndex2;
            									}
            								}
HXLINE(1187)								::String text3 = this->text;
HXDLIN(1187)								int endIndex3 = formatRange->end;
HXDLIN(1187)								::Array< Float > advances5 = ::Array_obj< Float >::__new(0);
HXDLIN(1187)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1187)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1187)								Float width6 = ((Float)0.0);
HXDLIN(1187)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1187)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1187)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1187)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1187)								 ::lime::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1187)								_gthis4->set_text(text3.substring(textIndex,endIndex3));
HXDLIN(1187)								{
HXLINE(1187)									int _g8 = (int)0;
HXDLIN(1187)									::Array< ::Dynamic> _g14 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1187)									while((_g8 < _g14->length)){
HXLINE(1187)										 ::lime::text::GlyphPosition position3 = _g14->__get(_g8).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1187)										_g8 = (_g8 + (int)1);
HXDLIN(1187)										advances5->push(position3->advance->x);
            									}
            								}
HXDLIN(1187)								layoutGroup->advances = advances5;
HXLINE(1188)								layoutGroup->offsetX = offsetX;
HXLINE(1189)								layoutGroup->ascent = ascent;
HXLINE(1190)								layoutGroup->descent = descent;
HXLINE(1191)								layoutGroup->leading = leading;
HXLINE(1192)								layoutGroup->lineIndex = lineIndex;
HXLINE(1193)								layoutGroup->offsetY = offsetY;
HXLINE(1194)								::Array< Float > advances6 = layoutGroup->advances;
HXDLIN(1194)								Float width7 = ((Float)0.0);
HXDLIN(1194)								{
HXLINE(1194)									int _g9 = (int)0;
HXDLIN(1194)									while((_g9 < advances6->length)){
HXLINE(1194)										Float advance3 = advances6->__get(_g9);
HXDLIN(1194)										_g9 = (_g9 + (int)1);
HXDLIN(1194)										width7 = (width7 + advance3);
            									}
            								}
HXDLIN(1194)								layoutGroup->width = width7;
HXLINE(1195)								layoutGroup->height = heightValue;
            							}
HXLINE(1199)							offsetX = (offsetX + widthValue);
HXLINE(1200)							textIndex = formatRange->end;
            						}
            					}
HXLINE(1204)					if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE(1204)						rangeIndex = (rangeIndex + (int)1);
HXDLIN(1204)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1204)						currentFormat->_hx___merge(formatRange->format);
HXDLIN(1204)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1204)						if (hx::IsNotNull( font )) {
HXLINE(1204)							int ascent7 = font->get_ascender();
HXDLIN(1204)							Float ascent8 = ((Float)ascent7 / (Float)font->get_unitsPerEM());
HXDLIN(1204)							ascent = (ascent8 * currentFormat->size);
HXDLIN(1204)							int descent7 = font->get_descender();
HXDLIN(1204)							Float descent8 = ((Float)descent7 / (Float)font->get_unitsPerEM());
HXDLIN(1204)							descent = ::Math_obj::abs((descent8 * currentFormat->size));
HXDLIN(1204)							leading = currentFormat->leading;
HXDLIN(1204)							heightValue = ((ascent + descent) + leading);
            						}
            						else {
HXLINE(1204)							ascent = currentFormat->size;
HXDLIN(1204)							descent = (currentFormat->size * ((Float)0.185));
HXDLIN(1204)							leading = currentFormat->leading;
HXDLIN(1204)							heightValue = ((ascent + descent) + leading);
            						}
            					}
HXLINE(1206)					if ((textIndex == formatRange->end)) {
HXLINE(1208)						textIndex = (textIndex + (int)1);
HXLINE(1209)						goto _hx_goto_11;
            					}
            				}
            			}
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1226_setTextAlignment)
HXLINE(1228)		int lineIndex = (int)-1;
HXLINE(1229)		Float offsetX = ((Float)0.0);
HXLINE(1230)		Float totalWidth = (this->width - (int)4);
HXLINE(1231)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1231)		int lineLength;
HXLINE(1233)		{
HXLINE(1233)			int _g1 = (int)0;
HXDLIN(1233)			int _g = this->layoutGroups->get_length();
HXDLIN(1233)			while((_g1 < _g)){
HXLINE(1233)				_g1 = (_g1 + (int)1);
HXDLIN(1233)				int i = (_g1 - (int)1);
HXLINE(1235)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1237)				if ((group->lineIndex != lineIndex)) {
HXLINE(1239)					lineIndex = group->lineIndex;
HXLINE(1241)					{
HXLINE(1241)						 ::Dynamic _g2 = group->format->align;
HXDLIN(1241)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1245)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1247)								offsetX = ::Math_obj::round(((Float)(totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            							}
            							else {
HXLINE(1251)								offsetX = (int)0;
            							}
HXLINE(1245)							goto _hx_goto_25;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1269)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1271)								lineLength = (int)1;
HXLINE(1273)								{
HXLINE(1273)									int _g3 = (i + (int)1);
HXDLIN(1273)									int _g21 = ( (int)(this->layoutGroups->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) );
HXDLIN(1273)									while((_g3 < _g21)){
HXLINE(1273)										_g3 = (_g3 + (int)1);
HXDLIN(1273)										int j = (_g3 - (int)1);
HXLINE(1275)										if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->lineIndex == lineIndex)) {
HXLINE(1277)											bool _hx_tmp;
HXDLIN(1277)											if ((j != (int)0)) {
HXLINE(1277)												::String _hx_tmp1 = this->text;
HXDLIN(1277)												_hx_tmp = hx::IsEq( _hx_tmp1.charCodeAt((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1277)												_hx_tmp = true;
            											}
HXDLIN(1277)											if (_hx_tmp) {
HXLINE(1279)												lineLength = (lineLength + (int)1);
            											}
            										}
            										else {
HXLINE(1285)											goto _hx_goto_26;
            										}
            									}
            									_hx_goto_26:;
            								}
HXLINE(1291)								if ((lineLength > (int)1)) {
HXLINE(1293)									group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1295)									 ::Dynamic endChar = this->text.charCodeAt(group->endIndex);
HXLINE(1296)									bool _hx_tmp2;
HXDLIN(1296)									bool _hx_tmp3;
HXDLIN(1296)									if ((group->endIndex < this->text.length)) {
HXLINE(1296)										_hx_tmp3 = hx::IsNotEq( endChar,(int)10 );
            									}
            									else {
HXLINE(1296)										_hx_tmp3 = false;
            									}
HXDLIN(1296)									if (_hx_tmp3) {
HXLINE(1296)										_hx_tmp2 = hx::IsNotEq( endChar,(int)13 );
            									}
            									else {
HXLINE(1296)										_hx_tmp2 = false;
            									}
HXDLIN(1296)									if (_hx_tmp2) {
HXLINE(1298)										Float offsetX1 = (totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ));
HXDLIN(1298)										offsetX = ((Float)offsetX1 / (Float)(lineLength - (int)1));
HXLINE(1300)										int j1 = (int)0;
HXLINE(1301)										while(true){
HXLINE(1303)											bool _hx_tmp4;
HXDLIN(1303)											if ((j1 > (int)1)) {
HXLINE(1303)												::String _hx_tmp5 = this->text;
HXDLIN(1303)												_hx_tmp4 = hx::IsNotEq( _hx_tmp5.charCodeAt((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j1)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1303)												_hx_tmp4 = false;
            											}
HXDLIN(1303)											if (_hx_tmp4) {
HXLINE(1305)												 ::openfl::_internal::text::TextLayoutGroup _hx_tmp6 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1305)												_hx_tmp6->offsetX = (_hx_tmp6->offsetX + (offsetX * (j1 - (int)1)));
HXLINE(1306)												j1 = (j1 + (int)1);
            											}
HXLINE(1310)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp7 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1310)											_hx_tmp7->offsetX = (_hx_tmp7->offsetX + (offsetX * j1));
HXLINE(1312)											j1 = (j1 + (int)1);
HXLINE(1301)											if (!((j1 < lineLength))) {
HXLINE(1301)												goto _hx_goto_27;
            											}
            										}
            										_hx_goto_27:;
            									}
            								}
            							}
HXLINE(1320)							offsetX = (int)0;
HXLINE(1267)							goto _hx_goto_25;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1257)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1259)								offsetX = ::Math_obj::round((totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            							}
            							else {
HXLINE(1263)								offsetX = (int)0;
            							}
HXLINE(1257)							goto _hx_goto_25;
            						}
            						/* default */{
HXLINE(1324)							offsetX = (int)0;
            						}
            						_hx_goto_25:;
            					}
            				}
HXLINE(1330)				if ((offsetX > (int)0)) {
HXLINE(1332)					 ::openfl::_internal::text::TextLayoutGroup group1 = group;
HXDLIN(1332)					group1->offsetX = (group1->offsetX + offsetX);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1341_update)
HXLINE(1343)		bool _hx_tmp;
HXDLIN(1343)		bool _hx_tmp1;
HXDLIN(1343)		if (hx::IsNotNull( this->text )) {
HXLINE(1343)			if (!(this->multiline)) {
HXLINE(1343)				_hx_tmp1 = (::StringTools_obj::trim(this->text) == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1343)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1343)			_hx_tmp1 = true;
            		}
HXDLIN(1343)		if (!(_hx_tmp1)) {
HXLINE(1343)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1343)			_hx_tmp = true;
            		}
HXDLIN(1343)		if (_hx_tmp) {
HXLINE(1345)			this->lineAscents->set_length((int)0);
HXLINE(1346)			this->lineBreaks->set_length((int)0);
HXLINE(1347)			this->lineDescents->set_length((int)0);
HXLINE(1348)			this->lineLeadings->set_length((int)0);
HXLINE(1349)			this->lineHeights->set_length((int)0);
HXLINE(1350)			this->lineWidths->set_length((int)0);
HXLINE(1351)			this->layoutGroups->set_length((int)0);
HXLINE(1353)			this->textWidth = (int)0;
HXLINE(1354)			this->textHeight = (int)0;
HXLINE(1355)			this->numLines = (int)1;
HXLINE(1356)			this->maxScrollH = (int)0;
HXLINE(1357)			this->maxScrollV = (int)1;
HXLINE(1358)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1362)			this->getLayoutGroups();
HXLINE(1363)			this->getLineMeasurements();
HXLINE(1364)			this->setTextAlignment();
            		}
HXLINE(1368)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1379_set_restrict)
HXLINE(1381)		if ((this->restrict == value)) {
HXLINE(1383)			return this->restrict;
            		}
HXLINE(1387)		this->restrict = value;
HXLINE(1389)		bool _hx_tmp;
HXDLIN(1389)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1389)			_hx_tmp = (this->restrict.length == (int)0);
            		}
            		else {
HXLINE(1389)			_hx_tmp = true;
            		}
HXDLIN(1389)		if (_hx_tmp) {
HXLINE(1391)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1395)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1399)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1404_set_text)
HXLINE(1406)		if (hx::IsNull( value )) {
HXLINE(1407)			return (this->text = value);
            		}
HXLINE(1410)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1412)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1416)		bool _hx_tmp;
HXDLIN(1416)		if ((this->maxChars > (int)0)) {
HXLINE(1416)			_hx_tmp = (value.length > this->maxChars);
            		}
            		else {
HXLINE(1416)			_hx_tmp = false;
            		}
HXDLIN(1416)		if (_hx_tmp) {
HXLINE(1418)			value = value.substr((int)0,this->maxChars);
            		}
HXLINE(1422)		this->text = value;
HXLINE(1424)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_200_findFont)
HXLINE( 204)		{
HXLINE( 204)			int _g = (int)0;
HXDLIN( 204)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 204)			while((_g < _g1->length)){
HXLINE( 204)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 204)				_g = (_g + (int)1);
HXLINE( 206)				if (hx::IsNull( registeredFont )) {
HXLINE( 206)					continue;
            				}
HXLINE( 208)				bool _hx_tmp;
HXDLIN( 208)				if ((registeredFont->name != name)) {
HXLINE( 208)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 208)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 208)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 208)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 208)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 208)					_hx_tmp = true;
            				}
HXDLIN( 208)				if (_hx_tmp) {
HXLINE( 210)					return registeredFont;
            				}
            			}
            		}
HXLINE( 216)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 218)		if (hx::IsNotNull( font )) {
HXLINE( 220)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 221)			return font;
            		}
HXLINE( 227)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_242_getFormatHeight)
HXLINE( 244)		Float ascent;
HXDLIN( 244)		Float descent;
HXDLIN( 244)		 ::Dynamic leading;
HXLINE( 256)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 258)		if (hx::IsNotNull( font )) {
HXLINE( 260)			int ascent1 = font->get_ascender();
HXDLIN( 260)			Float ascent2 = ((Float)ascent1 / (Float)font->get_unitsPerEM());
HXDLIN( 260)			ascent = (ascent2 * format->size);
HXLINE( 261)			int descent1 = font->get_descender();
HXDLIN( 261)			Float descent2 = ((Float)descent1 / (Float)font->get_unitsPerEM());
HXDLIN( 261)			descent = ::Math_obj::abs((descent2 * format->size));
HXLINE( 262)			leading = format->leading;
            		}
            		else {
HXLINE( 266)			ascent = format->size;
HXLINE( 267)			descent = (format->size * ((Float)0.185));
HXLINE( 268)			leading = format->leading;
            		}
HXLINE( 274)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_279_getFont)
HXLINE( 281)		::String font;
HXDLIN( 281)		if (format->italic) {
HXLINE( 281)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 281)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 282)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 283)		::String font1;
HXDLIN( 283)		if (format->bold) {
HXLINE( 283)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 283)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 283)		font = (font + font1);
HXLINE( 284)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 285)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + (int)3)) + HX_("px ",18,65,55,00)));
HXLINE( 287)		::String _g1 = format->font;
HXDLIN( 287)		::String font2;
HXDLIN( 287)		::String _hx_switch_0 = _g1;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 287)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 287)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 287)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 287)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 287)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 287)			goto _hx_goto_35;
            		}
            		/* default */{
HXLINE( 287)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(format->font,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_35:;
HXDLIN( 287)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 296)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_301_getFontInstance)
HXLINE( 305)		 ::openfl::text::Font instance = null();
HXLINE( 306)		::Array< ::String > fontList = null();
HXLINE( 308)		bool _hx_tmp;
HXDLIN( 308)		if (hx::IsNotNull( format )) {
HXLINE( 308)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 308)			_hx_tmp = false;
            		}
HXDLIN( 308)		if (_hx_tmp) {
HXLINE( 310)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 312)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 316)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(format->font);
HXLINE( 317)			if (hx::IsNotNull( instance )) {
HXLINE( 317)				return instance;
            			}
HXLINE( 319)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 321)			{
HXLINE( 321)				::String _g = format->font;
HXDLIN( 321)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 356)					fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/DroidSans.ttf",f8,c6,8e,4f)));
HXDLIN( 356)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 361)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 398)					fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/DroidSansMono.ttf",bb,6c,31,55)));
HXDLIN( 398)					goto _hx_goto_37;
            				}
            				/* default */{
HXLINE( 405)					fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            				}
            				_hx_goto_37:;
            			}
HXLINE( 422)			if (hx::IsNotNull( fontList )) {
HXLINE( 424)				int _g1 = (int)0;
HXDLIN( 424)				while((_g1 < fontList->length)){
HXLINE( 424)					::String font = fontList->__get(_g1);
HXDLIN( 424)					_g1 = (_g1 + (int)1);
HXLINE( 426)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 428)					if (hx::IsNotNull( instance )) {
HXLINE( 430)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 431)						return instance;
            					}
            				}
            			}
HXLINE( 439)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 440)			if (hx::IsNotNull( instance )) {
HXLINE( 440)				return instance;
            			}
            		}
HXLINE( 444)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 477)		fontList = ::Array_obj< ::String >::__new(2)->init(0,(systemFontDirectory1 + HX_("/DroidSerif-Regular.ttf",57,b0,ef,46)))->init(1,(systemFontDirectory1 + HX_("/NotoSerif-Regular.ttf",59,73,f1,28)));
HXLINE( 484)		{
HXLINE( 484)			int _g2 = (int)0;
HXDLIN( 484)			while((_g2 < fontList->length)){
HXLINE( 484)				::String font1 = fontList->__get(_g2);
HXDLIN( 484)				_g2 = (_g2 + (int)1);
HXLINE( 486)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 488)				if (hx::IsNotNull( instance )) {
HXLINE( 490)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 491)					return instance;
            				}
            			}
            		}
HXLINE( 497)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 501)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::lime::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::lime::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("createRestrictRegexp","\x41","\xd0","\x6b","\xe1"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_51_boot)
HXDLIN(  51)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_52_boot)
HXDLIN(  52)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_53_boot)
HXDLIN(  53)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_54_boot)
HXDLIN(  54)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_56_boot)
HXDLIN(  56)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
