// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_FilterType
#include <openfl/_internal/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_Frame
#include <openfl/_internal/timeline/Frame.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_FrameObject
#include <openfl/_internal/timeline/FrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_FrameObjectType
#include <openfl/_internal/timeline/FrameObjectType.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display__MovieClip_TimelineObject
#include <openfl/display/_MovieClip/TimelineObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_60_new,"openfl.display.MovieClip","new",0xe16984e8,"openfl.display.MovieClip.new","openfl/display/MovieClip.hx",60,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_86_addFrameScript,"openfl.display.MovieClip","addFrameScript",0xff5029ef,"openfl.display.MovieClip.addFrameScript","openfl/display/MovieClip.hx",86,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_107_gotoAndPlay,"openfl.display.MovieClip","gotoAndPlay",0x3bade190,"openfl.display.MovieClip.gotoAndPlay","openfl/display/MovieClip.hx",107,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_120_gotoAndStop,"openfl.display.MovieClip","gotoAndStop",0x3dafa39e,"openfl.display.MovieClip.gotoAndStop","openfl/display/MovieClip.hx",120,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_133_nextFrame,"openfl.display.MovieClip","nextFrame",0x3b845cc2,"openfl.display.MovieClip.nextFrame","openfl/display/MovieClip.hx",133,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_152_play,"openfl.display.MovieClip","play",0x5c42706c,"openfl.display.MovieClip.play","openfl/display/MovieClip.hx",152,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_172_prevFrame,"openfl.display.MovieClip","prevFrame",0x7f95e2c2,"openfl.display.MovieClip.prevFrame","openfl/display/MovieClip.hx",172,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_191_stop,"openfl.display.MovieClip","stop",0x5e44327a,"openfl.display.MovieClip.stop","openfl/display/MovieClip.hx",191,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_206___applyTween,"openfl.display.MovieClip","__applyTween",0x55791bb5,"openfl.display.MovieClip.__applyTween","openfl/display/MovieClip.hx",206,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_211___enterFrame,"openfl.display.MovieClip","__enterFrame",0x9306f98d,"openfl.display.MovieClip.__enterFrame","openfl/display/MovieClip.hx",211,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_269___fromSymbol,"openfl.display.MovieClip","__fromSymbol",0xc2d8a9fa,"openfl.display.MovieClip.__fromSymbol","openfl/display/MovieClip.hx",269,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_322___getFrame,"openfl.display.MovieClip","__getFrame",0x8028674f,"openfl.display.MovieClip.__getFrame","openfl/display/MovieClip.hx",322,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_354___placeObject,"openfl.display.MovieClip","__placeObject",0x4de0264e,"openfl.display.MovieClip.__placeObject","openfl/display/MovieClip.hx",354,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_415___renderFrame,"openfl.display.MovieClip","__renderFrame",0xe194945f,"openfl.display.MovieClip.__renderFrame","openfl/display/MovieClip.hx",415,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_638___sortTimelineDepth,"openfl.display.MovieClip","__sortTimelineDepth",0x441c91ec,"openfl.display.MovieClip.__sortTimelineDepth","openfl/display/MovieClip.hx",638,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_643___stopAllMovieClips,"openfl.display.MovieClip","__stopAllMovieClips",0x702dce5a,"openfl.display.MovieClip.__stopAllMovieClips","openfl/display/MovieClip.hx",643,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_651___updateFrame,"openfl.display.MovieClip","__updateFrame",0xfb7bd0cc,"openfl.display.MovieClip.__updateFrame","openfl/display/MovieClip.hx",651,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_718_get_currentFrame,"openfl.display.MovieClip","get_currentFrame",0xf2ac6035,"openfl.display.MovieClip.get_currentFrame","openfl/display/MovieClip.hx",718,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_719_get_currentFrameLabel,"openfl.display.MovieClip","get_currentFrameLabel",0x543e3d7f,"openfl.display.MovieClip.get_currentFrameLabel","openfl/display/MovieClip.hx",719,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_720_get_currentLabel,"openfl.display.MovieClip","get_currentLabel",0x5bd7f5fc,"openfl.display.MovieClip.get_currentLabel","openfl/display/MovieClip.hx",720,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_721_get_currentLabels,"openfl.display.MovieClip","get_currentLabels",0x011f46f7,"openfl.display.MovieClip.get_currentLabels","openfl/display/MovieClip.hx",721,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_722_get_framesLoaded,"openfl.display.MovieClip","get_framesLoaded",0xb37eaf4c,"openfl.display.MovieClip.get_framesLoaded","openfl/display/MovieClip.hx",722,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_723_get_isPlaying,"openfl.display.MovieClip","get_isPlaying",0x16620f03,"openfl.display.MovieClip.get_isPlaying","openfl/display/MovieClip.hx",723,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_724_get_totalFrames,"openfl.display.MovieClip","get_totalFrames",0x46b3baa9,"openfl.display.MovieClip.get_totalFrames","openfl/display/MovieClip.hx",724,0x2b84738a)
namespace openfl{
namespace display{

void MovieClip_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_60_new)
HXLINE(  62)		super::__construct();
HXLINE(  64)		this->_hx___currentFrame = (int)0;
HXLINE(  65)		this->_hx___currentLabels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  66)		this->_hx___totalFrames = (int)0;
HXLINE(  67)		this->enabled = true;
HXLINE(  69)		if (hx::IsNotNull( ::openfl::display::MovieClip_obj::_hx___initSymbol )) {
HXLINE(  71)			this->_hx___swf = ::openfl::display::MovieClip_obj::_hx___initSWF;
HXLINE(  72)			this->_hx___symbol = ::openfl::display::MovieClip_obj::_hx___initSymbol;
HXLINE(  74)			::openfl::display::MovieClip_obj::_hx___initSWF = null();
HXLINE(  75)			::openfl::display::MovieClip_obj::_hx___initSymbol = null();
HXLINE(  77)			this->_hx___fromSymbol(this->_hx___swf,this->_hx___symbol);
            		}
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x21e31f0e;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void MovieClip_obj::addFrameScript(int index, ::Dynamic method){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_86_addFrameScript)
HXDLIN(  86)		if (hx::IsNotNull( method )) {
HXLINE(  88)			if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE(  90)				this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            			}
HXLINE(  94)			this->_hx___frameScripts->set(index,method);
            		}
            		else {
HXLINE(  96)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE(  98)				this->_hx___frameScripts->remove(index);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,addFrameScript,(void))

void MovieClip_obj::gotoAndPlay( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_107_gotoAndPlay)
HXDLIN( 107)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 109)			this->_hx___currentFrame = this->_hx___getFrame(frame);
HXLINE( 110)			this->_hx___updateFrame();
HXLINE( 111)			this->play();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndPlay,(void))

void MovieClip_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_120_gotoAndStop)
HXDLIN( 120)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 122)			this->_hx___currentFrame = this->_hx___getFrame(frame);
HXLINE( 123)			this->_hx___updateFrame();
HXLINE( 124)			this->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndStop,(void))

void MovieClip_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_133_nextFrame)
HXDLIN( 133)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 135)			int next = (this->_hx___currentFrame + (int)1);
HXLINE( 137)			if ((next > this->_hx___totalFrames)) {
HXLINE( 139)				next = this->_hx___totalFrames;
            			}
HXLINE( 143)			this->gotoAndStop(next,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,nextFrame,(void))

void MovieClip_obj::play(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_152_play)
HXDLIN( 152)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 154)			bool _hx_tmp;
HXDLIN( 154)			if (!(this->_hx___playing)) {
HXLINE( 154)				_hx_tmp = (this->_hx___totalFrames > (int)1);
            			}
            			else {
HXLINE( 154)				_hx_tmp = false;
            			}
HXDLIN( 154)			if (_hx_tmp) {
HXLINE( 156)				this->_hx___playing = true;
HXLINE( 159)				this->_hx___frameTime = ::Std_obj::_hx_int(((Float)(int)1000 / (Float)this->_hx___swf->frameRate));
HXLINE( 160)				this->_hx___timeElapsed = (int)0;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,play,(void))

void MovieClip_obj::prevFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_172_prevFrame)
HXDLIN( 172)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 174)			int previous = (this->_hx___currentFrame - (int)1);
HXLINE( 176)			if ((previous < (int)1)) {
HXLINE( 178)				previous = (int)1;
            			}
HXLINE( 182)			this->gotoAndStop(previous,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,prevFrame,(void))

void MovieClip_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_191_stop)
HXDLIN( 191)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 193)			if (this->_hx___playing) {
HXLINE( 195)				this->_hx___playing = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,stop,(void))

Float MovieClip_obj::_hx___applyTween(Float start,Float end,Float ratio){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_206___applyTween)
HXDLIN( 206)		return (start + ((end - start) * ratio));
            	}


HX_DEFINE_DYNAMIC_FUNC3(MovieClip_obj,_hx___applyTween,return )

void MovieClip_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_211___enterFrame)
HXLINE( 213)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 215)			if (this->_hx___playing) {
HXLINE( 218)				 ::openfl::display::MovieClip _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 218)				_hx_tmp->_hx___timeElapsed = (_hx_tmp->_hx___timeElapsed + deltaTime);
HXLINE( 219)				int advanceFrames = ::Math_obj::floor(((Float)this->_hx___timeElapsed / (Float)this->_hx___frameTime));
HXLINE( 220)				this->_hx___timeElapsed = hx::Mod(this->_hx___timeElapsed,this->_hx___frameTime);
HXLINE( 225)				if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 227)					int _g1 = (int)0;
HXDLIN( 227)					int _g = advanceFrames;
HXDLIN( 227)					while((_g1 < _g)){
HXLINE( 227)						_g1 = (_g1 + (int)1);
HXDLIN( 227)						int i = (_g1 - (int)1);
HXLINE( 229)						this->_hx___currentFrame++;
HXLINE( 231)						if ((this->_hx___currentFrame > this->_hx___totalFrames)) {
HXLINE( 233)							this->_hx___currentFrame = (int)1;
            						}
HXLINE( 237)						if (this->_hx___frameScripts->exists((this->_hx___currentFrame - (int)1))) {
HXLINE( 239)							this->_hx___frameScripts->get((this->_hx___currentFrame - (int)1))();
HXLINE( 240)							if (!(this->_hx___playing)) {
HXLINE( 240)								goto _hx_goto_9;
            							}
            						}
            					}
            					_hx_goto_9:;
            				}
            				else {
HXLINE( 248)					 ::openfl::display::MovieClip _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)					_hx_tmp1->_hx___currentFrame = (_hx_tmp1->_hx___currentFrame + advanceFrames);
HXLINE( 250)					while((this->_hx___currentFrame > this->_hx___totalFrames)){
HXLINE( 252)						 ::openfl::display::MovieClip _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 252)						_hx_tmp2->_hx___currentFrame = (_hx_tmp2->_hx___currentFrame - this->_hx___totalFrames);
            					}
            				}
HXLINE( 258)				this->_hx___updateFrame();
            			}
            		}
HXLINE( 264)		this->super::_hx___enterFrame(deltaTime);
            	}


void MovieClip_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::SpriteSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_269___fromSymbol)
HXLINE( 271)		if (hx::IsNotNull( this->_hx___objects )) {
HXLINE( 271)			return;
            		}
HXLINE( 273)		this->_hx___swf = swf;
HXLINE( 274)		this->_hx___symbol = symbol;
HXLINE( 276)		this->_hx___lastUpdate = (int)-1;
HXLINE( 277)		this->_hx___maskCount = (int)0;
HXLINE( 278)		this->_hx___objectDepths = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 279)		this->_hx___objects =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 280)		this->_hx___zeroSymbol = (int)-1;
HXLINE( 282)		this->_hx___currentFrame = (int)1;
HXLINE( 283)		this->_hx___totalFrames = this->_hx___symbol->frames->length;
HXLINE( 285)		{
HXLINE( 285)			int _g1 = (int)0;
HXDLIN( 285)			int _g = this->_hx___symbol->frames->length;
HXDLIN( 285)			while((_g1 < _g)){
HXLINE( 285)				_g1 = (_g1 + (int)1);
HXDLIN( 285)				int i = (_g1 - (int)1);
HXLINE( 287)				if (hx::IsNotNull( this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::timeline::Frame >()->label )) {
HXLINE( 289)					::Array< ::Dynamic> _hx_tmp = this->_hx___currentLabels;
HXDLIN( 289)					::String _hx_tmp1 = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::timeline::Frame >()->label;
HXDLIN( 289)					_hx_tmp->push( ::openfl::display::FrameLabel_obj::__alloc( HX_CTX ,_hx_tmp1,(i + (int)1)));
            				}
            			}
            		}
HXLINE( 295)		this->_hx___updateFrame();
HXLINE( 298)		{
HXLINE( 298)			int _g2 = (int)0;
HXDLIN( 298)			::Array< ::String > _g11 = ::Type_obj::getInstanceFields(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)));
HXDLIN( 298)			while((_g2 < _g11->length)){
HXLINE( 298)				::String field = _g11->__get(_g2);
HXDLIN( 298)				_g2 = (_g2 + (int)1);
HXLINE( 300)				{
HXLINE( 300)					int _g21 = (int)0;
HXDLIN( 300)					::Array< ::Dynamic> _g3 = this->_hx___children;
HXDLIN( 300)					while((_g21 < _g3->length)){
HXLINE( 300)						 ::openfl::display::DisplayObject child = _g3->__get(_g21).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 300)						_g21 = (_g21 + (int)1);
HXLINE( 302)						if ((child->get_name() == field)) {
HXLINE( 304)							::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),field,child);
            						}
            					}
            				}
            			}
            		}
HXLINE( 313)		if ((this->_hx___totalFrames > (int)1)) {
HXLINE( 315)			this->play();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___fromSymbol,(void))

int MovieClip_obj::_hx___getFrame( ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_322___getFrame)
HXLINE( 324)		if (::Std_obj::is(frame,hx::ClassOf< int >())) {
HXLINE( 326)			int index = ( (int)(frame) );
HXLINE( 328)			if ((index < (int)1)) {
HXLINE( 328)				return (int)1;
            			}
HXLINE( 329)			if ((index > this->_hx___totalFrames)) {
HXLINE( 329)				return this->_hx___totalFrames;
            			}
HXLINE( 331)			return index;
            		}
            		else {
HXLINE( 333)			if (::Std_obj::is(frame,hx::ClassOf< ::String >())) {
HXLINE( 335)				::String label = ( (::String)(frame) );
HXLINE( 337)				{
HXLINE( 337)					int _g = (int)0;
HXDLIN( 337)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 337)					while((_g < _g1->length)){
HXLINE( 337)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 337)						_g = (_g + (int)1);
HXLINE( 339)						if ((frameLabel->get_name() == label)) {
HXLINE( 341)							return frameLabel->get_frame();
            						}
            					}
            				}
            			}
            		}
HXLINE( 349)		return (int)1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___getFrame,return )

void MovieClip_obj::_hx___placeObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::timeline::FrameObject frameObject){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_354___placeObject)
HXLINE( 356)		if (hx::IsNotNull( frameObject->name )) {
HXLINE( 358)			displayObject->set_name(frameObject->name);
            		}
HXLINE( 362)		if (hx::IsNotNull( frameObject->matrix )) {
HXLINE( 364)			displayObject->get_transform()->set_matrix(frameObject->matrix);
            		}
HXLINE( 368)		if (hx::IsNotNull( frameObject->colorTransform )) {
HXLINE( 370)			displayObject->get_transform()->set_colorTransform(frameObject->colorTransform);
            		}
HXLINE( 374)		if (hx::IsNotNull( frameObject->filters )) {
HXLINE( 376)			::Array< ::Dynamic> filters = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 378)			{
HXLINE( 378)				int _g = (int)0;
HXDLIN( 378)				::Array< ::Dynamic> _g1 = frameObject->filters;
HXDLIN( 378)				while((_g < _g1->length)){
HXLINE( 378)					 ::openfl::_internal::swf::FilterType filter = _g1->__get(_g).StaticCast<  ::openfl::_internal::swf::FilterType >();
HXDLIN( 378)					_g = (_g + (int)1);
HXLINE( 380)					switch((int)(_hx_getEnumValueIndex(filter))){
            						case (int)0: {
HXLINE( 382)							int quality = filter->_hx_getInt(2);
HXDLIN( 382)							Float blurY = filter->_hx_getFloat(1);
HXDLIN( 382)							Float blurX = filter->_hx_getFloat(0);
HXLINE( 384)							filters->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,blurX,blurY,quality));
            						}
            						break;
            						case (int)1: {
HXLINE( 386)							::Array< Float > matrix = filter->_hx_getObject(0).StaticCast< ::Array< Float > >();
HXLINE( 388)							filters->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,matrix));
            						}
            						break;
            						case (int)2: {
HXLINE( 390)							bool hideObject = filter->_hx_getBool(10);
HXDLIN( 390)							bool knockout = filter->_hx_getBool(9);
HXDLIN( 390)							bool inner = filter->_hx_getBool(8);
HXDLIN( 390)							int quality1 = filter->_hx_getInt(7);
HXDLIN( 390)							Float strength = filter->_hx_getFloat(6);
HXDLIN( 390)							Float blurY1 = filter->_hx_getFloat(5);
HXDLIN( 390)							Float blurX1 = filter->_hx_getFloat(4);
HXDLIN( 390)							Float alpha = filter->_hx_getFloat(3);
HXDLIN( 390)							int color = filter->_hx_getInt(2);
HXDLIN( 390)							Float angle = filter->_hx_getFloat(1);
HXDLIN( 390)							Float distance = filter->_hx_getFloat(0);
HXLINE( 392)							filters->push( ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
            						}
            						break;
            						case (int)3: {
HXLINE( 394)							bool knockout1 = filter->_hx_getBool(7);
HXDLIN( 394)							bool inner1 = filter->_hx_getBool(6);
HXDLIN( 394)							int quality2 = filter->_hx_getInt(5);
HXDLIN( 394)							Float strength1 = filter->_hx_getFloat(4);
HXDLIN( 394)							Float blurY2 = filter->_hx_getFloat(3);
HXDLIN( 394)							Float blurX2 = filter->_hx_getFloat(2);
HXDLIN( 394)							Float alpha1 = filter->_hx_getFloat(1);
HXDLIN( 394)							int color1 = filter->_hx_getInt(0);
HXLINE( 396)							filters->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
            						}
            						break;
            					}
            				}
            			}
HXLINE( 402)			displayObject->set_filters(filters);
            		}
HXLINE( 406)		displayObject->set_visible(frameObject->visible);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___placeObject,(void))

void MovieClip_obj::_hx___renderFrame(int index){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_415___renderFrame)
HXLINE( 417)		int previousIndex = (this->_hx___lastUpdate - (int)1);
HXLINE( 419)		if ((previousIndex > index)) {
HXLINE( 421)			 ::openfl::display::_MovieClip::TimelineObject timelineObject;
HXDLIN( 421)			bool exists;
HXLINE( 422)			int i = (int)0;
HXLINE( 424)			while((i < this->_hx___objectDepths->length)){
HXLINE( 426)				timelineObject = this->_hx___objectDepths->__get(i).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 427)				exists = false;
HXLINE( 429)				{
HXLINE( 429)					int _g = (int)0;
HXDLIN( 429)					::Array< ::Dynamic> _g1 = this->_hx___symbol->frames->__get((int)0).StaticCast<  ::openfl::_internal::timeline::Frame >()->objects;
HXDLIN( 429)					while((_g < _g1->length)){
HXLINE( 429)						 ::openfl::_internal::timeline::FrameObject frameObject = _g1->__get(_g).StaticCast<  ::openfl::_internal::timeline::FrameObject >();
HXDLIN( 429)						_g = (_g + (int)1);
HXLINE( 431)						if ((frameObject->id == timelineObject->id)) {
HXLINE( 433)							exists = true;
HXLINE( 434)							goto _hx_goto_21;
            						}
            					}
            					_hx_goto_21:;
            				}
HXLINE( 440)				if (!(exists)) {
HXLINE( 442)					if (hx::IsEq( timelineObject->displayObject->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 444)						this->removeChild(timelineObject->displayObject);
            					}
HXLINE( 448)					if ((timelineObject->clipDepth > (int)0)) {
HXLINE( 448)						this->_hx___maskCount--;
            					}
HXLINE( 449)					if ((this->_hx___maskCount < (int)0)) {
HXLINE( 449)						this->_hx___maskCount = (int)0;
            					}
HXLINE( 451)					this->_hx___objectDepths->removeRange(i,(int)1);
            				}
            				else {
HXLINE( 455)					i = (i + (int)1);
            				}
            			}
HXLINE( 461)			previousIndex = (int)0;
            		}
HXLINE( 465)		 ::openfl::_internal::timeline::Frame frame;
HXDLIN( 465)		 ::openfl::display::_MovieClip::TimelineObject timelineObject1;
HXDLIN( 465)		 ::openfl::display::DisplayObject displayObject;
HXDLIN( 465)		 ::Dynamic depth;
HXDLIN( 465)		 ::openfl::_internal::symbols::SWFSymbol symbol;
HXLINE( 466)		bool depthChange = false;
HXLINE( 468)		{
HXLINE( 468)			int _g11 = previousIndex;
HXDLIN( 468)			int _g2 = (index + (int)1);
HXDLIN( 468)			while((_g11 < _g2)){
HXLINE( 468)				_g11 = (_g11 + (int)1);
HXDLIN( 468)				int i1 = (_g11 - (int)1);
HXLINE( 470)				if ((i1 < (int)0)) {
HXLINE( 470)					continue;
            				}
HXLINE( 472)				frame = this->_hx___symbol->frames->__get(i1).StaticCast<  ::openfl::_internal::timeline::Frame >();
HXLINE( 474)				{
HXLINE( 474)					int _g21 = (int)0;
HXDLIN( 474)					::Array< ::Dynamic> _g3 = frame->objects;
HXDLIN( 474)					while((_g21 < _g3->length)){
HXLINE( 474)						 ::openfl::_internal::timeline::FrameObject frameObject1 = _g3->__get(_g21).StaticCast<  ::openfl::_internal::timeline::FrameObject >();
HXDLIN( 474)						_g21 = (_g21 + (int)1);
HXLINE( 476)						if (hx::IsNotEq( frameObject1->type,::openfl::_internal::timeline::FrameObjectType_obj::DESTROY_dyn() )) {
HXLINE( 478)							bool _hx_tmp;
HXDLIN( 478)							if ((frameObject1->id == (int)0)) {
HXLINE( 478)								_hx_tmp = (frameObject1->symbol != this->_hx___zeroSymbol);
            							}
            							else {
HXLINE( 478)								_hx_tmp = false;
            							}
HXDLIN( 478)							if (_hx_tmp) {
HXLINE( 480)								timelineObject1 = this->_hx___objects->get((int)0).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 482)								bool _hx_tmp1;
HXDLIN( 482)								if (hx::IsNotNull( timelineObject1 )) {
HXLINE( 482)									_hx_tmp1 = hx::IsEq( timelineObject1->displayObject->parent,hx::ObjectPtr<OBJ_>(this) );
            								}
            								else {
HXLINE( 482)									_hx_tmp1 = false;
            								}
HXDLIN( 482)								if (_hx_tmp1) {
HXLINE( 484)									this->removeChild(timelineObject1->displayObject);
            								}
HXLINE( 488)								::Array< ::Dynamic> _hx_tmp2 = this->_hx___objectDepths;
HXDLIN( 488)								_hx_tmp2->remove(this->_hx___objects->get((int)0).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >());
HXLINE( 489)								timelineObject1 = null();
HXLINE( 490)								this->_hx___zeroSymbol = frameObject1->symbol;
            							}
HXLINE( 494)							displayObject = null();
HXLINE( 496)							if (!(this->_hx___objects->exists(frameObject1->id))) {
HXLINE( 498)								if (this->_hx___swf->symbols->exists(frameObject1->symbol)) {
HXLINE( 500)									symbol = this->_hx___swf->symbols->get(frameObject1->symbol).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >();
HXLINE( 501)									displayObject = symbol->_hx___createObject(this->_hx___swf);
            								}
HXLINE( 505)								if (hx::IsNotNull( displayObject )) {
HXLINE( 507)									timelineObject1 =  ::openfl::display::_MovieClip::TimelineObject_obj::__alloc( HX_CTX ,frameObject1->id,frameObject1->depth,frameObject1->clipDepth,displayObject);
HXLINE( 509)									if ((frameObject1->clipDepth > (int)0)) {
HXLINE( 509)										this->_hx___maskCount++;
            									}
HXLINE( 510)									this->_hx___objectDepths->push(timelineObject1);
HXLINE( 511)									this->_hx___objects->set(frameObject1->id,timelineObject1);
HXLINE( 513)									depthChange = true;
            								}
            							}
            							else {
HXLINE( 519)								timelineObject1 = this->_hx___objects->get(frameObject1->id).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 520)								displayObject = timelineObject1->displayObject;
HXLINE( 522)								if (hx::IsNull( timelineObject1->displayObject->parent )) {
HXLINE( 524)									if ((frameObject1->clipDepth > (int)0)) {
HXLINE( 524)										this->_hx___maskCount++;
            									}
HXLINE( 525)									this->_hx___objectDepths->push(timelineObject1);
HXLINE( 527)									depthChange = true;
            								}
            							}
HXLINE( 533)							if (hx::IsNotNull( displayObject )) {
HXLINE( 535)								this->_hx___placeObject(displayObject,frameObject1);
            							}
            						}
            						else {
HXLINE( 541)							if (this->_hx___objects->exists(frameObject1->id)) {
HXLINE( 543)								timelineObject1 = this->_hx___objects->get(frameObject1->id).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 545)								if (hx::IsNotNull( timelineObject1 )) {
HXLINE( 547)									if (hx::IsEq( timelineObject1->displayObject->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 549)										this->removeChild(timelineObject1->displayObject);
            									}
HXLINE( 553)									if ((timelineObject1->clipDepth > (int)0)) {
HXLINE( 555)										this->_hx___maskCount--;
HXLINE( 557)										{
HXLINE( 557)											int _g4 = (int)0;
HXDLIN( 557)											::Array< ::Dynamic> _g5 = this->_hx___objectDepths;
HXDLIN( 557)											while((_g4 < _g5->length)){
HXLINE( 557)												 ::openfl::display::_MovieClip::TimelineObject object = _g5->__get(_g4).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXDLIN( 557)												_g4 = (_g4 + (int)1);
HXLINE( 559)												 ::openfl::display::DisplayObject _hx_tmp3 = object->displayObject->get_mask();
HXDLIN( 559)												if (hx::IsEq( _hx_tmp3,timelineObject1->displayObject )) {
HXLINE( 561)													object->displayObject->set_mask(null());
            												}
            											}
            										}
            									}
HXLINE( 569)									this->_hx___objectDepths->remove(timelineObject1);
            								}
HXLINE( 573)								depthChange = true;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 583)		if (depthChange) {
HXLINE( 585)			this->_hx___objectDepths->sort(this->_hx___sortTimelineDepth_dyn());
HXLINE( 587)			int i2 = (this->_hx___objectDepths->length - (int)1);
HXLINE( 589)			while((i2 >= (int)0)){
HXLINE( 591)				timelineObject1 = this->_hx___objectDepths->__get(i2).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 592)				this->addChildAt(timelineObject1->displayObject,(int)0);
HXLINE( 593)				i2 = (i2 - (int)1);
            			}
            		}
HXLINE( 599)		if ((this->_hx___maskCount > (int)0)) {
HXLINE( 601)			 ::Dynamic object1;
HXDLIN( 601)			 ::openfl::display::DisplayObject mask;
HXLINE( 603)			{
HXLINE( 603)				int _g6 = (int)0;
HXDLIN( 603)				::Array< ::Dynamic> _g12 = this->_hx___objectDepths;
HXDLIN( 603)				while((_g6 < _g12->length)){
HXLINE( 603)					 ::openfl::display::_MovieClip::TimelineObject timelineObject2 = _g12->__get(_g6).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXDLIN( 603)					_g6 = (_g6 + (int)1);
HXLINE( 605)					if ((timelineObject2->clipDepth > (int)0)) {
HXLINE( 607)						mask = timelineObject2->displayObject;
HXLINE( 609)						{
HXLINE( 609)							int _g22 = (int)0;
HXDLIN( 609)							::Array< ::Dynamic> _g31 = this->_hx___objectDepths;
HXDLIN( 609)							while((_g22 < _g31->length)){
HXLINE( 609)								 ::openfl::display::_MovieClip::TimelineObject object2 = _g31->__get(_g22).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXDLIN( 609)								_g22 = (_g22 + (int)1);
HXLINE( 611)								if ((object2->depth <= timelineObject2->clipDepth)) {
HXLINE( 613)									if ((object2->depth >= timelineObject2->depth)) {
HXLINE( 615)										object2->displayObject->set_mask(mask);
            									}
            								}
            								else {
HXLINE( 621)									goto _hx_goto_27;
            								}
            							}
            							_hx_goto_27:;
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___renderFrame,(void))

int MovieClip_obj::_hx___sortTimelineDepth( ::openfl::display::_MovieClip::TimelineObject a, ::openfl::display::_MovieClip::TimelineObject b){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_638___sortTimelineDepth)
HXDLIN( 638)		return (a->depth - b->depth);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___sortTimelineDepth,return )

void MovieClip_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_643___stopAllMovieClips)
HXLINE( 645)		this->super::_hx___stopAllMovieClips();
HXLINE( 646)		this->stop();
            	}


void MovieClip_obj::_hx___updateFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_651___updateFrame)
HXLINE( 653)		if ((this->_hx___currentFrame != this->_hx___lastUpdate)) {
HXLINE( 655)			int frameIndex = (this->_hx___currentFrame - (int)1);
HXLINE( 657)			if ((frameIndex > (int)-1)) {
HXLINE( 659)				bool _hx_tmp;
HXDLIN( 659)				if ((this->_hx___symbol->frames->length > frameIndex)) {
HXLINE( 659)					_hx_tmp = hx::IsNotNull( this->_hx___symbol->frames->__get(frameIndex).StaticCast<  ::openfl::_internal::timeline::Frame >() );
            				}
            				else {
HXLINE( 659)					_hx_tmp = false;
            				}
HXDLIN( 659)				if (_hx_tmp) {
HXLINE( 661)					this->_hx___currentFrameLabel = this->_hx___symbol->frames->__get(frameIndex).StaticCast<  ::openfl::_internal::timeline::Frame >()->label;
            				}
            				else {
HXLINE( 665)					this->_hx___currentFrameLabel = null();
            				}
HXLINE( 669)				if (hx::IsNotNull( this->_hx___currentFrameLabel )) {
HXLINE( 671)					this->_hx___currentLabel = this->_hx___currentFrameLabel;
            				}
            				else {
HXLINE( 675)					int _hx_tmp1 = this->_hx___currentFrame;
HXDLIN( 675)					if ((_hx_tmp1 != (this->_hx___lastUpdate + (int)1))) {
HXLINE( 677)						this->_hx___currentLabel = null();
HXLINE( 679)						{
HXLINE( 679)							int _g = (int)0;
HXDLIN( 679)							::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 679)							while((_g < _g1->length)){
HXLINE( 679)								 ::openfl::display::FrameLabel label = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 679)								_g = (_g + (int)1);
HXLINE( 681)								int _hx_tmp2 = label->get_frame();
HXDLIN( 681)								if ((_hx_tmp2 <= this->_hx___currentFrame)) {
HXLINE( 683)									this->_hx___currentLabel = label->get_name();
            								}
            								else {
HXLINE( 687)									goto _hx_goto_31;
            								}
            							}
            							_hx_goto_31:;
            						}
            					}
            				}
HXLINE( 697)				this->_hx___renderFrame(frameIndex);
            			}
HXLINE( 701)			this->_hx___renderDirty = true;
HXLINE( 702)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE( 706)		this->_hx___lastUpdate = this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateFrame,(void))

int MovieClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_718_get_currentFrame)
HXDLIN( 718)		return this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrame,return )

::String MovieClip_obj::get_currentFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_719_get_currentFrameLabel)
HXDLIN( 719)		return this->_hx___currentFrameLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrameLabel,return )

::String MovieClip_obj::get_currentLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_720_get_currentLabel)
HXDLIN( 720)		return this->_hx___currentLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabel,return )

::Array< ::Dynamic> MovieClip_obj::get_currentLabels(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_721_get_currentLabels)
HXDLIN( 721)		return this->_hx___currentLabels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabels,return )

int MovieClip_obj::get_framesLoaded(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_722_get_framesLoaded)
HXDLIN( 722)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_framesLoaded,return )

bool MovieClip_obj::get_isPlaying(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_723_get_isPlaying)
HXDLIN( 723)		return this->_hx___playing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_isPlaying,return )

int MovieClip_obj::get_totalFrames(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_724_get_totalFrames)
HXDLIN( 724)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_totalFrames,return )

 ::openfl::_internal::swf::SWFLite MovieClip_obj::_hx___initSWF;

 ::openfl::_internal::symbols::SpriteSymbol MovieClip_obj::_hx___initSymbol;


hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new() {
	hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(hx::Ctx *_hx_ctx) {
	MovieClip_obj *__this = (MovieClip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "openfl.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_MARK_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_MARK_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_MARK_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_MARK_MEMBER_NAME(_hx___lastUpdate,"__lastUpdate");
	HX_MARK_MEMBER_NAME(_hx___maskCount,"__maskCount");
	HX_MARK_MEMBER_NAME(_hx___objectDepths,"__objectDepths");
	HX_MARK_MEMBER_NAME(_hx___objects,"__objects");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___swf,"__swf");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_MARK_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	HX_MARK_MEMBER_NAME(_hx___zeroSymbol,"__zeroSymbol");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_VISIT_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_VISIT_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_VISIT_MEMBER_NAME(_hx___lastUpdate,"__lastUpdate");
	HX_VISIT_MEMBER_NAME(_hx___maskCount,"__maskCount");
	HX_VISIT_MEMBER_NAME(_hx___objectDepths,"__objectDepths");
	HX_VISIT_MEMBER_NAME(_hx___objects,"__objects");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___swf,"__swf");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_VISIT_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	HX_VISIT_MEMBER_NAME(_hx___zeroSymbol,"__zeroSymbol");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MovieClip_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { return hx::Val( _hx___swf ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isPlaying() ); }
		if (HX_FIELD_EQ(inName,"__objects") ) { return hx::Val( _hx___objects ); }
		if (HX_FIELD_EQ(inName,"__playing") ) { return hx::Val( _hx___playing ); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"prevFrame") ) { return hx::Val( prevFrame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__getFrame") ) { return hx::Val( _hx___getFrame_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_totalFrames() ); }
		if (HX_FIELD_EQ(inName,"__frameTime") ) { return hx::Val( _hx___frameTime ); }
		if (HX_FIELD_EQ(inName,"__maskCount") ) { return hx::Val( _hx___maskCount ); }
		if (HX_FIELD_EQ(inName,"gotoAndPlay") ) { return hx::Val( gotoAndPlay_dyn() ); }
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return hx::Val( gotoAndStop_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentFrame() ); }
		if (HX_FIELD_EQ(inName,"currentLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentLabel() ); }
		if (HX_FIELD_EQ(inName,"framesLoaded") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_framesLoaded() ); }
		if (HX_FIELD_EQ(inName,"__lastUpdate") ) { return hx::Val( _hx___lastUpdate ); }
		if (HX_FIELD_EQ(inName,"__zeroSymbol") ) { return hx::Val( _hx___zeroSymbol ); }
		if (HX_FIELD_EQ(inName,"__applyTween") ) { return hx::Val( _hx___applyTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentLabels") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentLabels() ); }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { return hx::Val( _hx___timeElapsed ); }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { return hx::Val( _hx___totalFrames ); }
		if (HX_FIELD_EQ(inName,"__placeObject") ) { return hx::Val( _hx___placeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderFrame") ) { return hx::Val( _hx___renderFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateFrame") ) { return hx::Val( _hx___updateFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isPlaying") ) { return hx::Val( get_isPlaying_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { return hx::Val( _hx___currentFrame ); }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { return hx::Val( _hx___currentLabel ); }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { return hx::Val( _hx___frameScripts ); }
		if (HX_FIELD_EQ(inName,"__objectDepths") ) { return hx::Val( _hx___objectDepths ); }
		if (HX_FIELD_EQ(inName,"addFrameScript") ) { return hx::Val( addFrameScript_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { return hx::Val( _hx___currentLabels ); }
		if (HX_FIELD_EQ(inName,"get_totalFrames") ) { return hx::Val( get_totalFrames_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return hx::Val( get_currentFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentLabel") ) { return hx::Val( get_currentLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_framesLoaded") ) { return hx::Val( get_framesLoaded_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentFrameLabel() ); }
		if (HX_FIELD_EQ(inName,"get_currentLabels") ) { return hx::Val( get_currentLabels_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { return hx::Val( _hx___currentFrameLabel ); }
		if (HX_FIELD_EQ(inName,"__sortTimelineDepth") ) { return hx::Val( _hx___sortTimelineDepth_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_currentFrameLabel") ) { return hx::Val( get_currentFrameLabel_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MovieClip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = ( _hx___initSWF ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = ( _hx___initSymbol ); return true; }
	}
	return false;
}

hx::Val MovieClip_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { _hx___swf=inValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__objects") ) { _hx___objects=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { _hx___frameTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__maskCount") ) { _hx___maskCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__lastUpdate") ) { _hx___lastUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__zeroSymbol") ) { _hx___zeroSymbol=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { _hx___timeElapsed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { _hx___totalFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { _hx___currentFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { _hx___currentLabel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { _hx___frameScripts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__objectDepths") ) { _hx___objectDepths=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { _hx___currentLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { _hx___currentFrameLabel=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MovieClip_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return true; }
	}
	return false;
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentFrame","\x34","\x5d","\x8f","\x4d"));
	outFields->push(HX_HCSTRING("currentFrameLabel","\x20","\xc4","\x0a","\x2a"));
	outFields->push(HX_HCSTRING("currentLabel","\xfb","\xf2","\xba","\xb6"));
	outFields->push(HX_HCSTRING("currentLabels","\x18","\xa9","\xd9","\x2c"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("framesLoaded","\x4b","\xac","\x61","\x0e"));
	outFields->push(HX_HCSTRING("isPlaying","\xa4","\x8c","\x16","\x8e"));
	outFields->push(HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"));
	outFields->push(HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e"));
	outFields->push(HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc"));
	outFields->push(HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7"));
	outFields->push(HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4"));
	outFields->push(HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee"));
	outFields->push(HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68"));
	outFields->push(HX_HCSTRING("__lastUpdate","\x1f","\xe4","\x73","\x8a"));
	outFields->push(HX_HCSTRING("__maskCount","\x23","\xe5","\xf7","\xfe"));
	outFields->push(HX_HCSTRING("__objectDepths","\x4f","\x81","\x53","\x68"));
	outFields->push(HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"));
	outFields->push(HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"));
	outFields->push(HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75"));
	outFields->push(HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb"));
	outFields->push(HX_HCSTRING("__zeroSymbol","\xc0","\x7b","\x06","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(MovieClip_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___currentFrame),HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e")},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentFrameLabel),HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc")},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentLabel),HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MovieClip_obj,_hx___currentLabels),HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(MovieClip_obj,_hx___frameScripts),HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___frameTime),HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastUpdate),HX_HCSTRING("__lastUpdate","\x1f","\xe4","\x73","\x8a")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___maskCount),HX_HCSTRING("__maskCount","\x23","\xe5","\xf7","\xfe")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MovieClip_obj,_hx___objectDepths),HX_HCSTRING("__objectDepths","\x4f","\x81","\x53","\x68")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(MovieClip_obj,_hx___objects),HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___playing),HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b")},
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(int)offsetof(MovieClip_obj,_hx___swf),HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2")},
	{hx::fsObject /*::openfl::_internal::symbols::SpriteSymbol*/ ,(int)offsetof(MovieClip_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___timeElapsed),HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___totalFrames),HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___zeroSymbol),HX_HCSTRING("__zeroSymbol","\xc0","\x7b","\x06","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MovieClip_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(void *) &MovieClip_obj::_hx___initSWF,HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c")},
	{hx::fsObject /*::openfl::_internal::symbols::SpriteSymbol*/ ,(void *) &MovieClip_obj::_hx___initSymbol,HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e"),
	HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc"),
	HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7"),
	HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4"),
	HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee"),
	HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68"),
	HX_HCSTRING("__lastUpdate","\x1f","\xe4","\x73","\x8a"),
	HX_HCSTRING("__maskCount","\x23","\xe5","\xf7","\xfe"),
	HX_HCSTRING("__objectDepths","\x4f","\x81","\x53","\x68"),
	HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"),
	HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"),
	HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75"),
	HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb"),
	HX_HCSTRING("__zeroSymbol","\xc0","\x7b","\x06","\xb9"),
	HX_HCSTRING("addFrameScript","\x77","\x21","\x7f","\xbb"),
	HX_HCSTRING("gotoAndPlay","\x08","\x65","\x84","\xef"),
	HX_HCSTRING("gotoAndStop","\x16","\x27","\x86","\xf1"),
	HX_HCSTRING("nextFrame","\x3a","\x92","\xc8","\xad"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("prevFrame","\x3a","\x18","\xda","\xf1"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("__applyTween","\x3d","\xa1","\x55","\xfd"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getFrame","\xd7","\xfa","\x92","\x09"),
	HX_HCSTRING("__placeObject","\xc6","\x77","\xf8","\x86"),
	HX_HCSTRING("__renderFrame","\xd7","\xe5","\xac","\x1a"),
	HX_HCSTRING("__sortTimelineDepth","\x64","\x4d","\xd7","\x27"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__updateFrame","\x44","\x22","\x94","\x34"),
	HX_HCSTRING("get_currentFrame","\xbd","\x49","\x2e","\x52"),
	HX_HCSTRING("get_currentFrameLabel","\xf7","\xc6","\xb8","\xa8"),
	HX_HCSTRING("get_currentLabel","\x84","\xdf","\x59","\xbb"),
	HX_HCSTRING("get_currentLabels","\x6f","\xb4","\x49","\x33"),
	HX_HCSTRING("get_framesLoaded","\xd4","\x98","\x00","\x13"),
	HX_HCSTRING("get_isPlaying","\x7b","\x60","\x7a","\x4f"),
	HX_HCSTRING("get_totalFrames","\x21","\x5a","\x9d","\x33"),
	::String(null()) };

static void MovieClip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
};

#endif

hx::Class MovieClip_obj::__mClass;

static ::String MovieClip_obj_sStaticFields[] = {
	HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c"),
	HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b"),
	::String(null())
};

void MovieClip_obj::__register()
{
	hx::Object *dummy = new MovieClip_obj;
	MovieClip_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.MovieClip","\xf6","\x30","\xc3","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MovieClip_obj::__GetStatic;
	__mClass->mSetStaticField = &MovieClip_obj::__SetStatic;
	__mClass->mMarkFunc = MovieClip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MovieClip_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
