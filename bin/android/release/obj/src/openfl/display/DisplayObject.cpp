// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractFilterManager
#include <openfl/_internal/renderer/AbstractFilterManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26400284d5456c16_132_new,"openfl.display.DisplayObject","new",0xb225b469,"openfl.display.DisplayObject.new","openfl/display/DisplayObject.hx",132,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_163_addEventListener,"openfl.display.DisplayObject","addEventListener",0xe74b9624,"openfl.display.DisplayObject.addEventListener","openfl/display/DisplayObject.hx",163,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_192_dispatchEvent,"openfl.display.DisplayObject","dispatchEvent",0xe6cd7049,"openfl.display.DisplayObject.dispatchEvent","openfl/display/DisplayObject.hx",192,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_213_getBounds,"openfl.display.DisplayObject","getBounds",0xdb0a2074,"openfl.display.DisplayObject.getBounds","openfl/display/DisplayObject.hx",213,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_240_getRect,"openfl.display.DisplayObject","getRect",0x17591963,"openfl.display.DisplayObject.getRect","openfl/display/DisplayObject.hx",240,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_245_globalToLocal,"openfl.display.DisplayObject","globalToLocal",0x8c16f816,"openfl.display.DisplayObject.globalToLocal","openfl/display/DisplayObject.hx",245,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_254_hitTestObject,"openfl.display.DisplayObject","hitTestObject",0xf7ccfe2d,"openfl.display.DisplayObject.hitTestObject","openfl/display/DisplayObject.hx",254,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_272_hitTestPoint,"openfl.display.DisplayObject","hitTestPoint",0x05917ca2,"openfl.display.DisplayObject.hitTestPoint","openfl/display/DisplayObject.hx",272,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_287_localToGlobal,"openfl.display.DisplayObject","localToGlobal",0x6853eb12,"openfl.display.DisplayObject.localToGlobal","openfl/display/DisplayObject.hx",287,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_292_removeEventListener,"openfl.display.DisplayObject","removeEventListener",0x3ae1cdd3,"openfl.display.DisplayObject.removeEventListener","openfl/display/DisplayObject.hx",292,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_317___cleanup,"openfl.display.DisplayObject","__cleanup",0x25266dcd,"openfl.display.DisplayObject.__cleanup","openfl/display/DisplayObject.hx",317,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_335___dispatch,"openfl.display.DisplayObject","__dispatch",0x4c54e0f1,"openfl.display.DisplayObject.__dispatch","openfl/display/DisplayObject.hx",335,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_356___dispatchChildren,"openfl.display.DisplayObject","__dispatchChildren",0xdb948f50,"openfl.display.DisplayObject.__dispatchChildren","openfl/display/DisplayObject.hx",356,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_398___dispatchEvent,"openfl.display.DisplayObject","__dispatchEvent",0xd8f34d69,"openfl.display.DisplayObject.__dispatchEvent","openfl/display/DisplayObject.hx",398,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_427___dispatchStack,"openfl.display.DisplayObject","__dispatchStack",0xe739ec97,"openfl.display.DisplayObject.__dispatchStack","openfl/display/DisplayObject.hx",427,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_491___enterFrame,"openfl.display.DisplayObject","__enterFrame",0x5c5351ec,"openfl.display.DisplayObject.__enterFrame","openfl/display/DisplayObject.hx",491,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_500___getBounds,"openfl.display.DisplayObject","__getBounds",0xe772ed94,"openfl.display.DisplayObject.__getBounds","openfl/display/DisplayObject.hx",500,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_511___getCursor,"openfl.display.DisplayObject","__getCursor",0xc03df5f5,"openfl.display.DisplayObject.__getCursor","openfl/display/DisplayObject.hx",511,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_518___getInteractive,"openfl.display.DisplayObject","__getInteractive",0xee1ea663,"openfl.display.DisplayObject.__getInteractive","openfl/display/DisplayObject.hx",518,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_523___getLocalBounds,"openfl.display.DisplayObject","__getLocalBounds",0xd51d8ec1,"openfl.display.DisplayObject.__getLocalBounds","openfl/display/DisplayObject.hx",523,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_539___getRenderBounds,"openfl.display.DisplayObject","__getRenderBounds",0xb06992ca,"openfl.display.DisplayObject.__getRenderBounds","openfl/display/DisplayObject.hx",539,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_555___getRenderTransform,"openfl.display.DisplayObject","__getRenderTransform",0x9985c437,"openfl.display.DisplayObject.__getRenderTransform","openfl/display/DisplayObject.hx",555,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_563___getWorldTransform,"openfl.display.DisplayObject","__getWorldTransform",0x71693ad9,"openfl.display.DisplayObject.__getWorldTransform","openfl/display/DisplayObject.hx",563,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_612___hitTest,"openfl.display.DisplayObject","__hitTest",0x5c63c1ee,"openfl.display.DisplayObject.__hitTest","openfl/display/DisplayObject.hx",612,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_638___hitTestMask,"openfl.display.DisplayObject","__hitTestMask",0x5c65bdfa,"openfl.display.DisplayObject.__hitTestMask","openfl/display/DisplayObject.hx",638,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_657___readGraphicsData,"openfl.display.DisplayObject","__readGraphicsData",0xd9311e42,"openfl.display.DisplayObject.__readGraphicsData","openfl/display/DisplayObject.hx",657,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_669___renderCairo,"openfl.display.DisplayObject","__renderCairo",0x75ab477b,"openfl.display.DisplayObject.__renderCairo","openfl/display/DisplayObject.hx",669,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_678___renderCairoMask,"openfl.display.DisplayObject","__renderCairoMask",0x9fd38e07,"openfl.display.DisplayObject.__renderCairoMask","openfl/display/DisplayObject.hx",678,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_690___renderCanvas,"openfl.display.DisplayObject","__renderCanvas",0x83845285,"openfl.display.DisplayObject.__renderCanvas","openfl/display/DisplayObject.hx",690,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_701___renderCanvasMask,"openfl.display.DisplayObject","__renderCanvasMask",0x388fe611,"openfl.display.DisplayObject.__renderCanvasMask","openfl/display/DisplayObject.hx",701,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_710___renderDOM,"openfl.display.DisplayObject","__renderDOM",0xd2568ab5,"openfl.display.DisplayObject.__renderDOM","openfl/display/DisplayObject.hx",710,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_721___renderGL,"openfl.display.DisplayObject","__renderGL",0xe0ccbd32,"openfl.display.DisplayObject.__renderGL","openfl/display/DisplayObject.hx",721,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_728___setRenderDirty,"openfl.display.DisplayObject","__setRenderDirty",0x7766cdd1,"openfl.display.DisplayObject.__setRenderDirty","openfl/display/DisplayObject.hx",728,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_740___setStageReference,"openfl.display.DisplayObject","__setStageReference",0xda522b58,"openfl.display.DisplayObject.__setStageReference","openfl/display/DisplayObject.hx",740,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_747___setTransformDirty,"openfl.display.DisplayObject","__setTransformDirty",0x7e906131,"openfl.display.DisplayObject.__setTransformDirty","openfl/display/DisplayObject.hx",747,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_757___stopAllMovieClips,"openfl.display.DisplayObject","__stopAllMovieClips",0x3954cfdb,"openfl.display.DisplayObject.__stopAllMovieClips","openfl/display/DisplayObject.hx",757,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_764___update,"openfl.display.DisplayObject","__update",0x3f3ecc80,"openfl.display.DisplayObject.__update","openfl/display/DisplayObject.hx",764,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_862___updateChildren,"openfl.display.DisplayObject","__updateChildren",0xcfbb21df,"openfl.display.DisplayObject.__updateChildren","openfl/display/DisplayObject.hx",862,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_879___updateMask,"openfl.display.DisplayObject","__updateMask",0x5b0e798c,"openfl.display.DisplayObject.__updateMask","openfl/display/DisplayObject.hx",879,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_899___updateTransforms,"openfl.display.DisplayObject","__updateTransforms",0x37510227,"openfl.display.DisplayObject.__updateTransforms","openfl/display/DisplayObject.hx",899,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_961_get_alpha,"openfl.display.DisplayObject","get_alpha",0x5dd6147e,"openfl.display.DisplayObject.get_alpha","openfl/display/DisplayObject.hx",961,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_966_set_alpha,"openfl.display.DisplayObject","set_alpha",0x4127008a,"openfl.display.DisplayObject.set_alpha","openfl/display/DisplayObject.hx",966,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_977_get_blendMode,"openfl.display.DisplayObject","get_blendMode",0xee046174,"openfl.display.DisplayObject.get_blendMode","openfl/display/DisplayObject.hx",977,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_982_set_blendMode,"openfl.display.DisplayObject","set_blendMode",0x330a4380,"openfl.display.DisplayObject.set_blendMode","openfl/display/DisplayObject.hx",982,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_992_get_cacheAsBitmap,"openfl.display.DisplayObject","get_cacheAsBitmap",0xa5311003,"openfl.display.DisplayObject.get_cacheAsBitmap","openfl/display/DisplayObject.hx",992,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_997_set_cacheAsBitmap,"openfl.display.DisplayObject","set_cacheAsBitmap",0xc89ee80f,"openfl.display.DisplayObject.set_cacheAsBitmap","openfl/display/DisplayObject.hx",997,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1007_get_cacheAsBitmapMatrix,"openfl.display.DisplayObject","get_cacheAsBitmapMatrix",0xe47a1ea4,"openfl.display.DisplayObject.get_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",1007,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1012_set_cacheAsBitmapMatrix,"openfl.display.DisplayObject","set_cacheAsBitmapMatrix",0xe6db87b0,"openfl.display.DisplayObject.set_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",1012,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1022_get_filters,"openfl.display.DisplayObject","get_filters",0x661396db,"openfl.display.DisplayObject.get_filters","openfl/display/DisplayObject.hx",1022,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1035_set_filters,"openfl.display.DisplayObject","set_filters",0x70809de7,"openfl.display.DisplayObject.set_filters","openfl/display/DisplayObject.hx",1035,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1056_get_height,"openfl.display.DisplayObject","get_height",0x7d8c16c7,"openfl.display.DisplayObject.get_height","openfl/display/DisplayObject.hx",1056,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1066_set_height,"openfl.display.DisplayObject","set_height",0x8109b53b,"openfl.display.DisplayObject.set_height","openfl/display/DisplayObject.hx",1066,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1090_get_loaderInfo,"openfl.display.DisplayObject","get_loaderInfo",0x6805b101,"openfl.display.DisplayObject.get_loaderInfo","openfl/display/DisplayObject.hx",1090,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1105_get_mask,"openfl.display.DisplayObject","get_mask",0xd81ad7cc,"openfl.display.DisplayObject.get_mask","openfl/display/DisplayObject.hx",1105,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1110_set_mask,"openfl.display.DisplayObject","set_mask",0x86783140,"openfl.display.DisplayObject.set_mask","openfl/display/DisplayObject.hx",1110,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1138_get_mouseX,"openfl.display.DisplayObject","get_mouseX",0x474e5973,"openfl.display.DisplayObject.get_mouseX","openfl/display/DisplayObject.hx",1138,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1148_get_mouseY,"openfl.display.DisplayObject","get_mouseY",0x474e5974,"openfl.display.DisplayObject.get_mouseY","openfl/display/DisplayObject.hx",1148,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1160_get_name,"openfl.display.DisplayObject","get_name",0xd8c4092b,"openfl.display.DisplayObject.get_name","openfl/display/DisplayObject.hx",1160,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1167_set_name,"openfl.display.DisplayObject","set_name",0x8721629f,"openfl.display.DisplayObject.set_name","openfl/display/DisplayObject.hx",1167,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1172_get_root,"openfl.display.DisplayObject","get_root",0xdb738502,"openfl.display.DisplayObject.get_root","openfl/display/DisplayObject.hx",1172,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1187_get_rotation,"openfl.display.DisplayObject","get_rotation",0xdf0fc41e,"openfl.display.DisplayObject.get_rotation","openfl/display/DisplayObject.hx",1187,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1192_set_rotation,"openfl.display.DisplayObject","set_rotation",0xf408e792,"openfl.display.DisplayObject.set_rotation","openfl/display/DisplayObject.hx",1192,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1217_get_scaleX,"openfl.display.DisplayObject","get_scaleX",0xb765f96e,"openfl.display.DisplayObject.get_scaleX","openfl/display/DisplayObject.hx",1217,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1222_set_scaleX,"openfl.display.DisplayObject","set_scaleX",0xbae397e2,"openfl.display.DisplayObject.set_scaleX","openfl/display/DisplayObject.hx",1222,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1258_get_scaleY,"openfl.display.DisplayObject","get_scaleY",0xb765f96f,"openfl.display.DisplayObject.get_scaleY","openfl/display/DisplayObject.hx",1258,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1263_set_scaleY,"openfl.display.DisplayObject","set_scaleY",0xbae397e3,"openfl.display.DisplayObject.set_scaleY","openfl/display/DisplayObject.hx",1263,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1297_get_scrollRect,"openfl.display.DisplayObject","get_scrollRect",0xba87dab1,"openfl.display.DisplayObject.get_scrollRect","openfl/display/DisplayObject.hx",1297,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1310_set_scrollRect,"openfl.display.DisplayObject","set_scrollRect",0xdaa7c325,"openfl.display.DisplayObject.set_scrollRect","openfl/display/DisplayObject.hx",1310,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1324_get_transform,"openfl.display.DisplayObject","get_transform",0x275faa8c,"openfl.display.DisplayObject.get_transform","openfl/display/DisplayObject.hx",1324,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1337_set_transform,"openfl.display.DisplayObject","set_transform",0x6c658c98,"openfl.display.DisplayObject.set_transform","openfl/display/DisplayObject.hx",1337,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1362_get_visible,"openfl.display.DisplayObject","get_visible",0xfff16d92,"openfl.display.DisplayObject.get_visible","openfl/display/DisplayObject.hx",1362,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1367_set_visible,"openfl.display.DisplayObject","set_visible",0x0a5e749e,"openfl.display.DisplayObject.set_visible","openfl/display/DisplayObject.hx",1367,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1375_get_width,"openfl.display.DisplayObject","get_width",0x06a22326,"openfl.display.DisplayObject.get_width","openfl/display/DisplayObject.hx",1375,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1385_set_width,"openfl.display.DisplayObject","set_width",0xe9f30f32,"openfl.display.DisplayObject.set_width","openfl/display/DisplayObject.hx",1385,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1411_get_x,"openfl.display.DisplayObject","get_x",0xc67a5d98,"openfl.display.DisplayObject.get_x","openfl/display/DisplayObject.hx",1411,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1416_set_x,"openfl.display.DisplayObject","set_x",0xaf4953a4,"openfl.display.DisplayObject.set_x","openfl/display/DisplayObject.hx",1416,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1426_get_y,"openfl.display.DisplayObject","get_y",0xc67a5d99,"openfl.display.DisplayObject.get_y","openfl/display/DisplayObject.hx",1426,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1431_set_y,"openfl.display.DisplayObject","set_y",0xaf4953a5,"openfl.display.DisplayObject.set_y","openfl/display/DisplayObject.hx",1431,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_53_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",53,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_54_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",54,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_55_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",55,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_56_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",56,0xc7539829)
namespace openfl{
namespace display{

void DisplayObject_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_132_new)
HXLINE( 134)		super::__construct(null());
HXLINE( 136)		this->_hx___alpha = (int)1;
HXLINE( 137)		this->_hx___blendMode = (int)10;
HXLINE( 138)		this->_hx___cacheAsBitmap = false;
HXLINE( 139)		this->_hx___transform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 140)		this->_hx___visible = true;
HXLINE( 142)		this->_hx___rotation = (int)0;
HXLINE( 143)		this->_hx___rotationSine = (int)0;
HXLINE( 144)		this->_hx___rotationCosine = (int)1;
HXLINE( 145)		this->_hx___scaleX = (int)1;
HXLINE( 146)		this->_hx___scaleY = (int)1;
HXLINE( 148)		this->_hx___worldAlpha = (int)1;
HXLINE( 149)		this->_hx___worldBlendMode = (int)10;
HXLINE( 150)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 151)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 152)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 158)		this->set_name((HX_("instance",95,1f,e1,59) + ++::openfl::display::DisplayObject_obj::_hx___instanceCount));
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

void *DisplayObject_obj::_hx_vtable = 0;

Dynamic DisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderGL,
	( void (hx::Object::*)(bool))&::openfl::display::DisplayObject_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::DisplayObject_obj::_hx___updateMask,
};

void *DisplayObject_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void DisplayObject_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture,hx::Null< int >  __o_priority,hx::Null< bool >  __o_useWeakReference){
bool useCapture = __o_useCapture.Default(false);
int priority = __o_priority.Default(0);
bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_163_addEventListener)
HXLINE( 165)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 169)			if (!(::haxe::IMap_obj::exists(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type))) {
HXLINE( 171)				::haxe::IMap_obj::set(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type,::Array_obj< ::Dynamic>::__new(0));
            			}
HXLINE( 175)			::Array< ::Dynamic> dispatchers = ( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) );
HXLINE( 177)			if ((dispatchers->indexOf(hx::ObjectPtr<OBJ_>(this),null()) == (int)-1)) {
HXLINE( 179)				dispatchers->push(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 167)			goto _hx_goto_1;
            		}
            		/* default */{
            		}
            		_hx_goto_1:;
HXLINE( 187)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


bool DisplayObject_obj::dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_192_dispatchEvent)
HXLINE( 194)		if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::MouseEvent >())) {
HXLINE( 196)			 ::openfl::events::MouseEvent mouseEvent = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 197)			 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 197)			Float _hx_tmp = (mouseEvent->localX * _this->a);
HXDLIN( 197)			mouseEvent->stageX = ((_hx_tmp + (mouseEvent->localY * _this->c)) + _this->tx);
HXLINE( 198)			 ::openfl::geom::Matrix _this1 = this->_hx___getRenderTransform();
HXDLIN( 198)			Float _hx_tmp1 = (mouseEvent->localX * _this1->b);
HXDLIN( 198)			mouseEvent->stageY = ((_hx_tmp1 + (mouseEvent->localY * _this1->d)) + _this1->ty);
            		}
            		else {
HXLINE( 200)			if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::TouchEvent >())) {
HXLINE( 202)				 ::openfl::events::TouchEvent touchEvent = ( ( ::openfl::events::TouchEvent)(event) );
HXLINE( 203)				 ::openfl::geom::Matrix _this2 = this->_hx___getRenderTransform();
HXDLIN( 203)				Float _hx_tmp2 = (touchEvent->localX * _this2->a);
HXDLIN( 203)				touchEvent->stageX = ((_hx_tmp2 + (touchEvent->localY * _this2->c)) + _this2->tx);
HXLINE( 204)				 ::openfl::geom::Matrix _this3 = this->_hx___getRenderTransform();
HXDLIN( 204)				Float _hx_tmp3 = (touchEvent->localX * _this3->b);
HXDLIN( 204)				touchEvent->stageY = ((_hx_tmp3 + (touchEvent->localY * _this3->d)) + _this3->ty);
            			}
            		}
HXLINE( 208)		return this->super::dispatchEvent(event);
            	}


 ::openfl::geom::Rectangle DisplayObject_obj::getBounds( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_213_getBounds)
HXLINE( 215)		 ::openfl::geom::Matrix matrix;
HXLINE( 217)		if (hx::IsNotNull( targetCoordinateSpace )) {
HXLINE( 219)			matrix = this->_hx___getWorldTransform()->clone();
HXLINE( 220)			matrix->concat(targetCoordinateSpace->_hx___getWorldTransform()->clone()->invert());
            		}
            		else {
HXLINE( 224)			matrix = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE( 225)			matrix->identity();
            		}
HXLINE( 229)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 230)		this->_hx___getBounds(bounds,matrix);
HXLINE( 232)		return bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getBounds,return )

 ::openfl::geom::Rectangle DisplayObject_obj::getRect( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_240_getRect)
HXDLIN( 240)		return this->getBounds(targetCoordinateSpace);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getRect,return )

 ::openfl::geom::Point DisplayObject_obj::globalToLocal( ::openfl::geom::Point pos){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_245_globalToLocal)
HXLINE( 247)		pos = pos->clone();
HXLINE( 248)		{
HXLINE( 248)			 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 248)			Float norm = (_this->a * _this->d);
HXDLIN( 248)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 248)			if ((norm1 == (int)0)) {
HXLINE( 248)				pos->x = -(_this->tx);
HXDLIN( 248)				pos->y = -(_this->ty);
            			}
            			else {
HXLINE( 248)				Float _this1 = _this->c;
HXDLIN( 248)				Float px = (_this1 * (_this->ty - pos->y));
HXDLIN( 248)				Float _this2 = _this->d;
HXDLIN( 248)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (pos->x - _this->tx))));
HXDLIN( 248)				Float _this3 = _this->a;
HXDLIN( 248)				Float _hx_tmp = (_this3 * (pos->y - _this->ty));
HXDLIN( 248)				Float _this4 = _this->b;
HXDLIN( 248)				pos->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - pos->x))));
HXDLIN( 248)				pos->x = px1;
            			}
            		}
HXLINE( 249)		return pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,globalToLocal,return )

bool DisplayObject_obj::hitTestObject( ::openfl::display::DisplayObject obj){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_254_hitTestObject)
HXLINE( 256)		bool _hx_tmp;
HXDLIN( 256)		bool _hx_tmp1;
HXDLIN( 256)		if (hx::IsNotNull( obj )) {
HXLINE( 256)			_hx_tmp1 = hx::IsNotNull( obj->parent );
            		}
            		else {
HXLINE( 256)			_hx_tmp1 = false;
            		}
HXDLIN( 256)		if (_hx_tmp1) {
HXLINE( 256)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 256)			_hx_tmp = false;
            		}
HXDLIN( 256)		if (_hx_tmp) {
HXLINE( 258)			 ::openfl::geom::Rectangle currentBounds = this->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 259)			 ::openfl::geom::Rectangle targetBounds = obj->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 261)			return currentBounds->intersects(targetBounds);
            		}
HXLINE( 265)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestObject,return )

bool DisplayObject_obj::hitTestPoint(Float x,Float y,hx::Null< bool >  __o_shapeFlag){
bool shapeFlag = __o_shapeFlag.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_272_hitTestPoint)
HXDLIN( 272)		if (hx::IsNotNull( this->stage )) {
HXLINE( 274)			return this->_hx___hitTest(x,y,shapeFlag,null(),true,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE( 278)			return false;
            		}
HXLINE( 272)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,hitTestPoint,return )

 ::openfl::geom::Point DisplayObject_obj::localToGlobal( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_287_localToGlobal)
HXDLIN( 287)		return this->_hx___getRenderTransform()->transformPoint(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,localToGlobal,return )

void DisplayObject_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture){
bool useCapture = __o_useCapture.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_292_removeEventListener)
HXLINE( 294)		this->super::removeEventListener(type,listener,useCapture);
HXLINE( 296)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 300)			if (!(this->hasEventListener(type))) {
HXLINE( 302)				if (::haxe::IMap_obj::exists(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) {
HXLINE( 304)					( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) )->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 300)			goto _hx_goto_10;
            		}
            		/* default */{
            		}
            		_hx_goto_10:;
            	}


void DisplayObject_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_317___cleanup)
HXLINE( 319)		this->_hx___cairo = null();
HXLINE( 326)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 328)			this->_hx___graphics->_hx___cleanup();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___cleanup,(void))

bool DisplayObject_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_335___dispatch)
HXLINE( 337)		bool _hx_tmp;
HXDLIN( 337)		if (hx::IsNotNull( this->_hx___eventMap )) {
HXLINE( 337)			_hx_tmp = this->hasEventListener(event->type);
            		}
            		else {
HXLINE( 337)			_hx_tmp = false;
            		}
HXDLIN( 337)		if (_hx_tmp) {
HXLINE( 339)			bool result = this->super::_hx___dispatchEvent(event);
HXLINE( 341)			if (event->_hx___isCanceled) {
HXLINE( 343)				return true;
            			}
HXLINE( 347)			return result;
            		}
HXLINE( 351)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatch,return )

bool DisplayObject_obj::_hx___dispatchChildren( ::openfl::events::Event event, ::openfl::_Vector::ObjectVector stack){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_356___dispatchChildren)
HXLINE( 358)		event->target = hx::ObjectPtr<OBJ_>(this);
HXLINE( 360)		if (hx::IsNotNull( this->parent )) {
HXLINE( 362)			event->eventPhase = (int)1;
HXLINE( 364)			if (hx::IsEq( this->parent,this->stage )) {
HXLINE( 366)				this->parent->_hx___dispatchEvent(event);
            			}
            			else {
HXLINE( 370)				 ::openfl::display::DisplayObjectContainer parent = this->parent;
HXLINE( 371)				int i = (int)0;
HXLINE( 373)				while(hx::IsNotNull( parent )){
HXLINE( 375)					stack->set(i,parent).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 376)					parent = parent->parent;
HXLINE( 377)					i = (i + (int)1);
            				}
HXLINE( 381)				{
HXLINE( 381)					int _g1 = (int)0;
HXDLIN( 381)					int _g = i;
HXDLIN( 381)					while((_g1 < _g)){
HXLINE( 381)						_g1 = (_g1 + (int)1);
HXDLIN( 381)						int j = (_g1 - (int)1);
HXLINE( 383)						stack->get(((i - j) - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatchEvent(event);
            					}
            				}
            			}
            		}
HXLINE( 391)		event->eventPhase = (int)2;
HXLINE( 393)		return this->_hx___dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___dispatchChildren,return )

bool DisplayObject_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_398___dispatchEvent)
HXLINE( 400)		bool result = this->super::_hx___dispatchEvent(event);
HXLINE( 402)		if (event->_hx___isCanceled) {
HXLINE( 404)			return true;
            		}
HXLINE( 408)		bool _hx_tmp;
HXDLIN( 408)		bool _hx_tmp1;
HXDLIN( 408)		if (event->bubbles) {
HXLINE( 408)			_hx_tmp1 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 408)			_hx_tmp1 = false;
            		}
HXDLIN( 408)		if (_hx_tmp1) {
HXLINE( 408)			_hx_tmp = hx::IsNotEq( this->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 408)			_hx_tmp = false;
            		}
HXDLIN( 408)		if (_hx_tmp) {
HXLINE( 410)			event->eventPhase = (int)3;
HXLINE( 412)			if (hx::IsNull( event->target )) {
HXLINE( 414)				event->target = hx::ObjectPtr<OBJ_>(this);
            			}
HXLINE( 418)			this->parent->_hx___dispatchEvent(event);
            		}
HXLINE( 422)		return result;
            	}


void DisplayObject_obj::_hx___dispatchStack( ::openfl::events::Event event,::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_427___dispatchStack)
HXLINE( 429)		 ::openfl::display::DisplayObject target;
HXLINE( 430)		int length = stack->length;
HXLINE( 432)		if ((length == (int)0)) {
HXLINE( 434)			event->eventPhase = (int)2;
HXLINE( 435)			target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE( 436)			target->_hx___dispatch(event);
            		}
            		else {
HXLINE( 440)			event->eventPhase = (int)1;
HXLINE( 441)			event->target = stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 443)			{
HXLINE( 443)				int _g1 = (int)0;
HXDLIN( 443)				int _g = (length - (int)1);
HXDLIN( 443)				while((_g1 < _g)){
HXLINE( 443)					_g1 = (_g1 + (int)1);
HXDLIN( 443)					int i = (_g1 - (int)1);
HXLINE( 445)					stack->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE( 447)					if (event->_hx___isCanceled) {
HXLINE( 449)						return;
            					}
            				}
            			}
HXLINE( 455)			event->eventPhase = (int)2;
HXLINE( 456)			target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE( 457)			target->_hx___dispatch(event);
HXLINE( 459)			if (event->_hx___isCanceled) {
HXLINE( 461)				return;
            			}
HXLINE( 465)			if (event->bubbles) {
HXLINE( 467)				event->eventPhase = (int)3;
HXLINE( 468)				int i1 = (length - (int)2);
HXLINE( 470)				while((i1 >= (int)0)){
HXLINE( 472)					stack->__get(i1).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE( 474)					if (event->_hx___isCanceled) {
HXLINE( 476)						return;
            					}
HXLINE( 480)					i1 = (i1 - (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___dispatchStack,(void))

void DisplayObject_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_491___enterFrame)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___enterFrame,(void))

void DisplayObject_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_500___getBounds)
HXDLIN( 500)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 502)			this->_hx___graphics->_hx___getBounds(rect,matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getBounds,(void))

 ::lime::ui::MouseCursor DisplayObject_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_511___getCursor)
HXDLIN( 511)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getCursor,return )

bool DisplayObject_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_518___getInteractive)
HXDLIN( 518)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getInteractive,return )

void DisplayObject_obj::_hx___getLocalBounds( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_523___getLocalBounds)
HXLINE( 525)		Float cacheX = this->_hx___transform->tx;
HXLINE( 526)		Float cacheY = this->_hx___transform->ty;
HXLINE( 527)		this->_hx___transform->tx = (this->_hx___transform->ty = (int)0);
HXLINE( 529)		this->_hx___getBounds(rect,this->_hx___transform);
HXLINE( 531)		this->_hx___transform->tx = cacheX;
HXLINE( 532)		this->_hx___transform->ty = cacheY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getLocalBounds,(void))

void DisplayObject_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_539___getRenderBounds)
HXDLIN( 539)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE( 541)			this->_hx___getBounds(rect,matrix);
            		}
            		else {
HXLINE( 545)			 ::openfl::geom::Rectangle r = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 546)			r->copyFrom(this->_hx___scrollRect);
HXLINE( 547)			r->_hx___transform(r,matrix);
HXLINE( 548)			rect->_hx___expand(matrix->tx,matrix->ty,r->width,r->height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getRenderBounds,(void))

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getRenderTransform(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_555___getRenderTransform)
HXLINE( 557)		this->_hx___getWorldTransform();
HXLINE( 558)		return this->_hx___renderTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getRenderTransform,return )

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getWorldTransform(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_563___getWorldTransform)
HXLINE( 565)		bool _hx_tmp;
HXDLIN( 565)		if (!(this->_hx___transformDirty)) {
HXLINE( 565)			_hx_tmp = (::openfl::display::DisplayObject_obj::_hx___worldTransformDirty > (int)0);
            		}
            		else {
HXLINE( 565)			_hx_tmp = true;
            		}
HXDLIN( 565)		if (_hx_tmp) {
HXLINE( 567)			::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 568)			 ::openfl::display::DisplayObject current = hx::ObjectPtr<OBJ_>(this);
HXLINE( 569)			bool transformDirty = this->_hx___transformDirty;
HXLINE( 571)			if (hx::IsNull( this->parent )) {
HXLINE( 573)				if (transformDirty) {
HXLINE( 573)					this->_hx___update(true,false,null());
            				}
            			}
            			else {
HXLINE( 577)				while(hx::IsNotEq( current,this->stage )){
HXLINE( 579)					list->push(current);
HXLINE( 580)					current = current->parent;
HXLINE( 582)					if (hx::IsNull( current )) {
HXLINE( 582)						goto _hx_goto_28;
            					}
HXLINE( 584)					bool _hx_tmp1;
HXDLIN( 584)					if (hx::IsNotEq( current,this->stage )) {
HXLINE( 584)						_hx_tmp1 = current->_hx___transformDirty;
            					}
            					else {
HXLINE( 584)						_hx_tmp1 = false;
            					}
HXDLIN( 584)					if (_hx_tmp1) {
HXLINE( 586)						transformDirty = true;
            					}
            				}
            				_hx_goto_28:;
            			}
HXLINE( 594)			if (transformDirty) {
HXLINE( 596)				int i = list->length;
HXLINE( 597)				while(true){
HXLINE( 597)					i = (i - (int)1);
HXDLIN( 597)					if (!((i >= (int)0))) {
HXLINE( 597)						goto _hx_goto_29;
            					}
HXLINE( 599)					list->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___update(true,false,null());
            				}
            				_hx_goto_29:;
            			}
            		}
HXLINE( 607)		return this->_hx___worldTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getWorldTransform,return )

bool DisplayObject_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_612___hitTest)
HXLINE( 614)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 616)			bool _hx_tmp;
HXDLIN( 616)			if (!(!(hitObject->get_visible()))) {
HXLINE( 616)				_hx_tmp = this->_hx___isMask;
            			}
            			else {
HXLINE( 616)				_hx_tmp = true;
            			}
HXDLIN( 616)			if (_hx_tmp) {
HXLINE( 616)				return false;
            			}
HXLINE( 617)			bool _hx_tmp1;
HXDLIN( 617)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 617)				_hx_tmp1 = !(this->get_mask()->_hx___hitTestMask(x,y));
            			}
            			else {
HXLINE( 617)				_hx_tmp1 = false;
            			}
HXDLIN( 617)			if (_hx_tmp1) {
HXLINE( 617)				return false;
            			}
HXLINE( 619)			 ::openfl::display::Graphics _hx_tmp2 = this->_hx___graphics;
HXDLIN( 619)			if (_hx_tmp2->_hx___hitTest(x,y,shapeFlag,this->_hx___getRenderTransform())) {
HXLINE( 621)				bool _hx_tmp3;
HXDLIN( 621)				if (hx::IsNotNull( stack )) {
HXLINE( 621)					_hx_tmp3 = !(interactiveOnly);
            				}
            				else {
HXLINE( 621)					_hx_tmp3 = false;
            				}
HXDLIN( 621)				if (_hx_tmp3) {
HXLINE( 623)					stack->push(hitObject);
            				}
HXLINE( 627)				return true;
            			}
            		}
HXLINE( 633)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC6(DisplayObject_obj,_hx___hitTest,return )

bool DisplayObject_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_638___hitTestMask)
HXLINE( 640)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 642)			 ::openfl::display::Graphics _hx_tmp = this->_hx___graphics;
HXDLIN( 642)			if (_hx_tmp->_hx___hitTest(x,y,true,this->_hx___getRenderTransform())) {
HXLINE( 644)				return true;
            			}
            		}
HXLINE( 650)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___hitTestMask,return )

void DisplayObject_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_657___readGraphicsData)
HXDLIN( 657)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 659)			this->_hx___graphics->_hx___readGraphicsData(graphicsData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___readGraphicsData,(void))

void DisplayObject_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_669___renderCairo)
HXDLIN( 669)		::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairo,(void))

void DisplayObject_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_678___renderCairoMask)
HXDLIN( 678)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 680)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairoMask,(void))

void DisplayObject_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_690___renderCanvas)
HXDLIN( 690)		bool _hx_tmp;
HXDLIN( 690)		if (hx::IsNotNull( this->get_mask() )) {
HXDLIN( 690)			if ((this->get_mask()->get_width() > (int)0)) {
HXDLIN( 690)				_hx_tmp = (this->get_mask()->get_height() > (int)0);
            			}
            			else {
HXDLIN( 690)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 690)			_hx_tmp = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvas,(void))

void DisplayObject_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_701___renderCanvasMask)
HXDLIN( 701)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 703)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvasMask,(void))

void DisplayObject_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_710___renderDOM)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOM,(void))

void DisplayObject_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_721___renderGL)
HXDLIN( 721)		bool _hx_tmp;
HXDLIN( 721)		if (hx::IsNull( this->opaqueBackground )) {
HXDLIN( 721)			_hx_tmp = hx::IsNull( this->_hx___graphics );
            		}
            		else {
HXDLIN( 721)			_hx_tmp = false;
            		}
HXDLIN( 721)		if (!(_hx_tmp)) {
HXDLIN( 721)			bool _hx_tmp1;
HXDLIN( 721)			if (!(!(this->_hx___renderable))) {
HXDLIN( 721)				_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            			}
            			else {
HXDLIN( 721)				_hx_tmp1 = true;
            			}
HXDLIN( 721)			if (!(_hx_tmp1)) {
HXDLIN( 721)				bool _hx_tmp2;
HXDLIN( 721)				bool _hx_tmp3;
HXDLIN( 721)				if (hx::IsNotNull( this->opaqueBackground )) {
HXDLIN( 721)					_hx_tmp3 = (this->get_width() > (int)0);
            				}
            				else {
HXDLIN( 721)					_hx_tmp3 = false;
            				}
HXDLIN( 721)				if (_hx_tmp3) {
HXDLIN( 721)					_hx_tmp2 = (this->get_height() > (int)0);
            				}
            				else {
HXDLIN( 721)					_hx_tmp2 = false;
            				}
HXDLIN( 721)				if (_hx_tmp2) {
HXDLIN( 721)					renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 721)					 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXDLIN( 721)					 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___temp;
HXDLIN( 721)					Float _hx_tmp4 = this->get_width();
HXDLIN( 721)					rect->setTo((int)0,(int)0,_hx_tmp4,this->get_height());
HXDLIN( 721)					renderSession->maskManager->pushRect(rect,this->_hx___renderTransform);
HXDLIN( 721)					int color = this->opaqueBackground;
HXDLIN( 721)					gl->clearColor(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1);
HXDLIN( 721)					gl->clear(gl->COLOR_BUFFER_BIT);
HXDLIN( 721)					renderSession->maskManager->popRect();
HXDLIN( 721)					renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            				}
HXDLIN( 721)				if (hx::IsNotNull( this->_hx___graphics )) {
HXDLIN( 721)					bool _hx_tmp5;
HXDLIN( 721)					if (!(!(this->_hx___renderable))) {
HXDLIN( 721)						_hx_tmp5 = (this->_hx___worldAlpha <= (int)0);
            					}
            					else {
HXDLIN( 721)						_hx_tmp5 = true;
            					}
HXDLIN( 721)					if (!(_hx_tmp5)) {
HXDLIN( 721)						 ::openfl::display::Graphics graphics = this->_hx___graphics;
HXDLIN( 721)						if (hx::IsNotNull( graphics )) {
HXDLIN( 721)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderSession,this->_hx___renderTransform);
HXDLIN( 721)							 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXDLIN( 721)							bool _hx_tmp6;
HXDLIN( 721)							if (hx::IsNotNull( graphics->_hx___bitmap )) {
HXDLIN( 721)								_hx_tmp6 = graphics->_hx___visible;
            							}
            							else {
HXDLIN( 721)								_hx_tmp6 = false;
            							}
HXDLIN( 721)							if (_hx_tmp6) {
HXDLIN( 721)								 ::openfl::_internal::renderer::opengl::GLRenderer renderer = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXDLIN( 721)								 ::lime::_backend::native::NativeGLRenderContext gl1 = renderSession->gl;
HXDLIN( 721)								renderSession->blendModeManager->setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 721)								renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 721)								 ::openfl::display::Shader shader = renderSession->filterManager->pushObject(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 721)								shader->get_data()->uImage0->input = graphics->_hx___bitmap;
HXDLIN( 721)								shader->get_data()->uImage0->smoothing = renderSession->allowSmoothing;
HXDLIN( 721)								shader->get_data()->uMatrix->value = renderer->getMatrix(graphics->_hx___worldTransform);
HXDLIN( 721)								renderSession->shaderManager->setShader(shader);
HXDLIN( 721)								int gl2 = gl1->ARRAY_BUFFER;
HXDLIN( 721)								gl1->bindBuffer(gl2,graphics->_hx___bitmap->getBuffer(gl1,this->_hx___worldAlpha));
HXDLIN( 721)								int _hx_tmp7 = shader->get_data()->aPosition->index;
HXDLIN( 721)								int gl3 = gl1->FLOAT;
HXDLIN( 721)								gl1->vertexAttribPointer(_hx_tmp7,(int)3,gl3,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
HXDLIN( 721)								int _hx_tmp8 = shader->get_data()->aTexCoord->index;
HXDLIN( 721)								int gl4 = gl1->FLOAT;
HXDLIN( 721)								gl1->vertexAttribPointer(_hx_tmp8,(int)2,gl4,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
HXDLIN( 721)								int _hx_tmp9 = shader->get_data()->aAlpha->index;
HXDLIN( 721)								int gl5 = gl1->FLOAT;
HXDLIN( 721)								gl1->vertexAttribPointer(_hx_tmp9,(int)1,gl5,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)20));
HXDLIN( 721)								gl1->drawArrays(gl1->TRIANGLE_STRIP,(int)0,(int)4);
HXDLIN( 721)								renderSession->filterManager->popObject(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 721)								renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGL,(void))

void DisplayObject_obj::_hx___setRenderDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_728___setRenderDirty)
HXDLIN( 728)		if (!(this->_hx___renderDirty)) {
HXLINE( 730)			this->_hx___renderDirty = true;
HXLINE( 731)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setRenderDirty,(void))

void DisplayObject_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_740___setStageReference)
HXDLIN( 740)		this->stage = stage;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setStageReference,(void))

void DisplayObject_obj::_hx___setTransformDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_747___setTransformDirty)
HXDLIN( 747)		if (!(this->_hx___transformDirty)) {
HXLINE( 749)			this->_hx___transformDirty = true;
HXLINE( 750)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setTransformDirty,(void))

void DisplayObject_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_757___stopAllMovieClips)
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___stopAllMovieClips,(void))

void DisplayObject_obj::_hx___update(bool transformOnly,bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_764___update)
HXLINE( 766)		bool _hx_tmp;
HXDLIN( 766)		bool _hx_tmp1;
HXDLIN( 766)		bool _hx_tmp2;
HXDLIN( 766)		bool _hx_tmp3;
HXDLIN( 766)		if (this->get_visible()) {
HXLINE( 766)			_hx_tmp3 = (this->_hx___scaleX != (int)0);
            		}
            		else {
HXLINE( 766)			_hx_tmp3 = false;
            		}
HXDLIN( 766)		if (_hx_tmp3) {
HXLINE( 766)			_hx_tmp2 = (this->_hx___scaleY != (int)0);
            		}
            		else {
HXLINE( 766)			_hx_tmp2 = false;
            		}
HXDLIN( 766)		if (_hx_tmp2) {
HXLINE( 766)			_hx_tmp1 = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 766)			_hx_tmp1 = false;
            		}
HXDLIN( 766)		if (_hx_tmp1) {
HXLINE( 766)			if (hx::IsNotNull( this->parent )) {
HXLINE( 766)				_hx_tmp = !(this->parent->_hx___isMask);
            			}
            			else {
HXLINE( 766)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 766)			_hx_tmp = false;
            		}
HXDLIN( 766)		this->_hx___renderable = _hx_tmp;
HXLINE( 767)		this->_hx___updateTransforms(null());
HXLINE( 769)		bool _hx_tmp4;
HXDLIN( 769)		if (updateChildren) {
HXLINE( 769)			_hx_tmp4 = this->_hx___transformDirty;
            		}
            		else {
HXLINE( 769)			_hx_tmp4 = false;
            		}
HXDLIN( 769)		if (_hx_tmp4) {
HXLINE( 771)			this->_hx___transformDirty = false;
HXLINE( 772)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty--;
            		}
HXLINE( 776)		if (hx::IsNotNull( maskGraphics )) {
HXLINE( 778)			this->_hx___updateMask(maskGraphics);
            		}
HXLINE( 782)		if (!(transformOnly)) {
HXLINE( 798)			 ::openfl::geom::ColorTransform _hx_tmp5 = this->_hx___worldColorTransform;
HXDLIN( 798)			if (!(_hx_tmp5->_hx___equals(this->get_transform()->get_colorTransform(),null()))) {
HXLINE( 800)				this->_hx___worldColorTransform = this->get_transform()->get_colorTransform()->_hx___clone();
            			}
HXLINE( 804)			 ::openfl::display::DisplayObject _hx___parent;
HXDLIN( 804)			if (hx::IsNotNull( this->parent )) {
HXLINE( 804)				_hx___parent = this->parent;
            			}
            			else {
HXLINE( 804)				_hx___parent = this->_hx___renderParent;
            			}
HXLINE( 806)			if (hx::IsNotNull( _hx___parent )) {
HXLINE( 810)				Float _hx_tmp6 = this->get_alpha();
HXDLIN( 810)				this->_hx___worldAlpha = (_hx_tmp6 * _hx___parent->_hx___worldAlpha);
HXLINE( 811)				this->_hx___worldColorTransform->_hx___combine(_hx___parent->_hx___worldColorTransform);
HXLINE( 813)				bool _hx_tmp7;
HXDLIN( 813)				if (hx::IsNotNull( this->_hx___blendMode )) {
HXLINE( 813)					_hx_tmp7 = hx::IsEq( this->_hx___blendMode,(int)10 );
            				}
            				else {
HXLINE( 813)					_hx_tmp7 = true;
            				}
HXDLIN( 813)				if (_hx_tmp7) {
HXLINE( 816)					this->_hx___worldBlendMode = _hx___parent->_hx___blendMode;
            				}
            				else {
HXLINE( 820)					this->_hx___worldBlendMode = this->_hx___blendMode;
            				}
            			}
            			else {
HXLINE( 838)				this->_hx___worldAlpha = this->get_alpha();
            			}
HXLINE( 851)			bool _hx_tmp8;
HXDLIN( 851)			if (updateChildren) {
HXLINE( 851)				_hx_tmp8 = this->_hx___renderDirty;
            			}
            			else {
HXLINE( 851)				_hx_tmp8 = false;
            			}
HXDLIN( 851)			if (_hx_tmp8) {
HXLINE( 853)				this->_hx___renderDirty = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,_hx___update,(void))

void DisplayObject_obj::_hx___updateChildren(bool transformOnly){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_862___updateChildren)
HXLINE( 864)		bool _hx_tmp;
HXDLIN( 864)		bool _hx_tmp1;
HXDLIN( 864)		bool _hx_tmp2;
HXDLIN( 864)		bool _hx_tmp3;
HXDLIN( 864)		if (this->get_visible()) {
HXLINE( 864)			_hx_tmp3 = (this->_hx___scaleX != (int)0);
            		}
            		else {
HXLINE( 864)			_hx_tmp3 = false;
            		}
HXDLIN( 864)		if (_hx_tmp3) {
HXLINE( 864)			_hx_tmp2 = (this->_hx___scaleY != (int)0);
            		}
            		else {
HXLINE( 864)			_hx_tmp2 = false;
            		}
HXDLIN( 864)		if (_hx_tmp2) {
HXLINE( 864)			_hx_tmp1 = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 864)			_hx_tmp1 = false;
            		}
HXDLIN( 864)		if (_hx_tmp1) {
HXLINE( 864)			if (hx::IsNotNull( this->parent )) {
HXLINE( 864)				_hx_tmp = !(this->parent->_hx___isMask);
            			}
            			else {
HXLINE( 864)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 864)			_hx_tmp = false;
            		}
HXDLIN( 864)		this->_hx___renderable = _hx_tmp;
HXLINE( 865)		this->_hx___worldAlpha = this->get_alpha();
HXLINE( 867)		if (this->_hx___transformDirty) {
HXLINE( 869)			this->_hx___transformDirty = false;
HXLINE( 870)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateChildren,(void))

void DisplayObject_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_879___updateMask)
HXDLIN( 879)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 881)			maskGraphics->_hx___commands->overrideMatrix(this->_hx___worldTransform);
HXLINE( 882)			maskGraphics->_hx___commands->append(this->_hx___graphics->_hx___commands);
HXLINE( 883)			maskGraphics->set___dirty(true);
HXLINE( 884)			maskGraphics->_hx___visible = true;
HXLINE( 886)			if (hx::IsNull( maskGraphics->_hx___bounds )) {
HXLINE( 888)				maskGraphics->_hx___bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE( 892)			this->_hx___graphics->_hx___getBounds(maskGraphics->_hx___bounds,::openfl::geom::Matrix_obj::_hx___identity);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateMask,(void))

void DisplayObject_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_899___updateTransforms)
HXLINE( 901)		bool overrided = hx::IsNotNull( overrideTransform );
HXLINE( 902)		 ::openfl::geom::Matrix local;
HXDLIN( 902)		if (overrided) {
HXLINE( 902)			local = overrideTransform;
            		}
            		else {
HXLINE( 902)			local = this->_hx___transform;
            		}
HXLINE( 904)		if (hx::IsNull( this->_hx___worldTransform )) {
HXLINE( 906)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 910)		if (hx::IsNull( this->_hx___renderTransform )) {
HXLINE( 912)			this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 916)		bool _hx_tmp;
HXDLIN( 916)		if (!(overrided)) {
HXLINE( 916)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 916)			_hx_tmp = false;
            		}
HXDLIN( 916)		if (_hx_tmp) {
HXLINE( 918)			 ::openfl::geom::Matrix parentTransform = this->parent->_hx___worldTransform;
HXLINE( 920)			Float _hx_tmp1 = (local->a * parentTransform->a);
HXDLIN( 920)			this->_hx___worldTransform->a = (_hx_tmp1 + (local->b * parentTransform->c));
HXLINE( 921)			Float _hx_tmp2 = (local->a * parentTransform->b);
HXDLIN( 921)			this->_hx___worldTransform->b = (_hx_tmp2 + (local->b * parentTransform->d));
HXLINE( 922)			Float _hx_tmp3 = (local->c * parentTransform->a);
HXDLIN( 922)			this->_hx___worldTransform->c = (_hx_tmp3 + (local->d * parentTransform->c));
HXLINE( 923)			Float _hx_tmp4 = (local->c * parentTransform->b);
HXDLIN( 923)			this->_hx___worldTransform->d = (_hx_tmp4 + (local->d * parentTransform->d));
HXLINE( 924)			Float _hx_tmp5 = (local->tx * parentTransform->a);
HXDLIN( 924)			this->_hx___worldTransform->tx = ((_hx_tmp5 + (local->ty * parentTransform->c)) + parentTransform->tx);
HXLINE( 925)			Float _hx_tmp6 = (local->tx * parentTransform->b);
HXDLIN( 925)			this->_hx___worldTransform->ty = ((_hx_tmp6 + (local->ty * parentTransform->d)) + parentTransform->ty);
HXLINE( 927)			parentTransform = this->parent->_hx___renderTransform;
HXLINE( 929)			Float _hx_tmp7 = (local->a * parentTransform->a);
HXDLIN( 929)			this->_hx___renderTransform->a = (_hx_tmp7 + (local->b * parentTransform->c));
HXLINE( 930)			Float _hx_tmp8 = (local->a * parentTransform->b);
HXDLIN( 930)			this->_hx___renderTransform->b = (_hx_tmp8 + (local->b * parentTransform->d));
HXLINE( 931)			Float _hx_tmp9 = (local->c * parentTransform->a);
HXDLIN( 931)			this->_hx___renderTransform->c = (_hx_tmp9 + (local->d * parentTransform->c));
HXLINE( 932)			Float _hx_tmp10 = (local->c * parentTransform->b);
HXDLIN( 932)			this->_hx___renderTransform->d = (_hx_tmp10 + (local->d * parentTransform->d));
HXLINE( 933)			Float _hx_tmp11 = (local->tx * parentTransform->a);
HXDLIN( 933)			this->_hx___renderTransform->tx = ((_hx_tmp11 + (local->ty * parentTransform->c)) + parentTransform->tx);
HXLINE( 934)			Float _hx_tmp12 = (local->tx * parentTransform->b);
HXDLIN( 934)			this->_hx___renderTransform->ty = ((_hx_tmp12 + (local->ty * parentTransform->d)) + parentTransform->ty);
            		}
            		else {
HXLINE( 938)			this->_hx___worldTransform->copyFrom(local);
HXLINE( 939)			this->_hx___renderTransform->copyFrom(local);
            		}
HXLINE( 943)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 945)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 945)			Float px = -(this->_hx___scrollRect->x);
HXDLIN( 945)			Float py = -(this->_hx___scrollRect->y);
HXDLIN( 945)			Float _hx_tmp13 = (px * _this->a);
HXDLIN( 945)			_this->tx = ((_hx_tmp13 + (py * _this->c)) + _this->tx);
HXDLIN( 945)			Float _hx_tmp14 = (px * _this->b);
HXDLIN( 945)			_this->ty = ((_hx_tmp14 + (py * _this->d)) + _this->ty);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateTransforms,(void))

Float DisplayObject_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_961_get_alpha)
HXDLIN( 961)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_966_set_alpha)
HXLINE( 968)		if ((value > ((Float)1.0))) {
HXLINE( 968)			value = ((Float)1.0);
            		}
HXLINE( 969)		if ((value != this->_hx___alpha)) {
HXLINE( 969)			if (!(this->_hx___renderDirty)) {
HXLINE( 969)				this->_hx___renderDirty = true;
HXDLIN( 969)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE( 970)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

 ::Dynamic DisplayObject_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_977_get_blendMode)
HXDLIN( 977)		return this->_hx___blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_blendMode,return )

 ::Dynamic DisplayObject_obj::set_blendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_982_set_blendMode)
HXLINE( 984)		if (hx::IsNull( value )) {
HXLINE( 984)			value = (int)10;
            		}
HXLINE( 985)		return (this->_hx___blendMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

bool DisplayObject_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_992_get_cacheAsBitmap)
HXDLIN( 992)		if (hx::IsNull( this->_hx___filters )) {
HXDLIN( 992)			return this->_hx___cacheAsBitmap;
            		}
            		else {
HXDLIN( 992)			return true;
            		}
HXDLIN( 992)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmap,return )

bool DisplayObject_obj::set_cacheAsBitmap(bool value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_997_set_cacheAsBitmap)
HXLINE( 999)		if (!(this->_hx___renderDirty)) {
HXLINE( 999)			this->_hx___renderDirty = true;
HXDLIN( 999)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE(1000)		return (this->_hx___cacheAsBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmap,return )

 ::openfl::geom::Matrix DisplayObject_obj::get_cacheAsBitmapMatrix(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1007_get_cacheAsBitmapMatrix)
HXDLIN(1007)		return this->_hx___cacheAsBitmapMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmapMatrix,return )

 ::openfl::geom::Matrix DisplayObject_obj::set_cacheAsBitmapMatrix( ::openfl::geom::Matrix value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1012_set_cacheAsBitmapMatrix)
HXLINE(1014)		if (!(this->_hx___renderDirty)) {
HXLINE(1014)			this->_hx___renderDirty = true;
HXDLIN(1014)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE(1015)		return (this->_hx___cacheAsBitmapMatrix = value->clone());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmapMatrix,return )

::Array< ::Dynamic> DisplayObject_obj::get_filters(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1022_get_filters)
HXDLIN(1022)		if (hx::IsNull( this->_hx___filters )) {
HXLINE(1024)			return ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(1028)			return this->_hx___filters->copy();
            		}
HXLINE(1022)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filters,return )

::Array< ::Dynamic> DisplayObject_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1035_set_filters)
HXLINE(1037)		bool _hx_tmp;
HXDLIN(1037)		if (hx::IsNotNull( value )) {
HXLINE(1037)			_hx_tmp = (value->length > (int)0);
            		}
            		else {
HXLINE(1037)			_hx_tmp = false;
            		}
HXDLIN(1037)		if (_hx_tmp) {
HXLINE(1039)			this->_hx___filters = value;
            		}
            		else {
HXLINE(1044)			this->_hx___filters = null();
            		}
HXLINE(1049)		if (!(this->_hx___renderDirty)) {
HXLINE(1049)			this->_hx___renderDirty = true;
HXDLIN(1049)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE(1051)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filters,return )

Float DisplayObject_obj::get_height(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1056_get_height)
HXLINE(1058)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1059)		this->_hx___getLocalBounds(bounds);
HXLINE(1061)		return bounds->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1066_set_height)
HXLINE(1068)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1070)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE(1071)		matrix->identity();
HXLINE(1073)		this->_hx___getBounds(bounds,matrix);
HXLINE(1075)		if ((value != bounds->height)) {
HXLINE(1077)			this->set_scaleY(((Float)value / (Float)bounds->height));
            		}
            		else {
HXLINE(1081)			this->set_scaleY((int)1);
            		}
HXLINE(1085)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

 ::openfl::display::LoaderInfo DisplayObject_obj::get_loaderInfo(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1090_get_loaderInfo)
HXLINE(1092)		if (hx::IsNotNull( this->stage )) {
HXLINE(1094)			return ::openfl::Lib_obj::current->_hx___loaderInfo;
            		}
HXLINE(1098)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_loaderInfo,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_mask(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1105_get_mask)
HXDLIN(1105)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mask,return )

 ::openfl::display::DisplayObject DisplayObject_obj::set_mask( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1110_set_mask)
HXLINE(1112)		if (hx::IsNotEq( value,this->_hx___mask )) {
HXLINE(1114)			if (!(this->_hx___transformDirty)) {
HXLINE(1114)				this->_hx___transformDirty = true;
HXDLIN(1114)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1115)			if (!(this->_hx___renderDirty)) {
HXLINE(1115)				this->_hx___renderDirty = true;
HXDLIN(1115)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE(1119)		if (hx::IsNotNull( this->_hx___mask )) {
HXLINE(1121)			this->_hx___mask->_hx___isMask = false;
HXLINE(1122)			{
HXLINE(1122)				 ::openfl::display::DisplayObject _this = this->_hx___mask;
HXDLIN(1122)				if (!(_this->_hx___transformDirty)) {
HXLINE(1122)					_this->_hx___transformDirty = true;
HXDLIN(1122)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1123)			{
HXLINE(1123)				 ::openfl::display::DisplayObject _this1 = this->_hx___mask;
HXDLIN(1123)				if (!(_this1->_hx___renderDirty)) {
HXLINE(1123)					_this1->_hx___renderDirty = true;
HXDLIN(1123)					::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            				}
            			}
            		}
HXLINE(1127)		if (hx::IsNotNull( value )) {
HXLINE(1129)			value->_hx___isMask = true;
            		}
HXLINE(1133)		return (this->_hx___mask = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

Float DisplayObject_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1138_get_mouseX)
HXLINE(1140)		Float mouseX;
HXDLIN(1140)		if (hx::IsNotNull( this->stage )) {
HXLINE(1140)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1140)			mouseX = ::openfl::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1141)		Float mouseY;
HXDLIN(1141)		if (hx::IsNotNull( this->stage )) {
HXLINE(1141)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1141)			mouseY = ::openfl::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1143)		 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN(1143)		Float norm = (_this->a * _this->d);
HXDLIN(1143)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1143)		if ((norm1 == (int)0)) {
HXLINE(1143)			return -(_this->tx);
            		}
            		else {
HXLINE(1143)			Float _this1 = _this->c;
HXDLIN(1143)			Float _hx_tmp = (_this1 * (_this->ty - mouseY));
HXDLIN(1143)			Float _this2 = _this->d;
HXDLIN(1143)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this2 * (mouseX - _this->tx))));
            		}
HXDLIN(1143)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseX,return )

Float DisplayObject_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1148_get_mouseY)
HXLINE(1150)		Float mouseX;
HXDLIN(1150)		if (hx::IsNotNull( this->stage )) {
HXLINE(1150)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1150)			mouseX = ::openfl::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1151)		Float mouseY;
HXDLIN(1151)		if (hx::IsNotNull( this->stage )) {
HXLINE(1151)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1151)			mouseY = ::openfl::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1153)		 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN(1153)		Float norm = (_this->a * _this->d);
HXDLIN(1153)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1153)		if ((norm1 == (int)0)) {
HXLINE(1153)			return -(_this->ty);
            		}
            		else {
HXLINE(1153)			Float _this1 = _this->a;
HXDLIN(1153)			Float _hx_tmp = (_this1 * (mouseY - _this->ty));
HXDLIN(1153)			Float _this2 = _this->b;
HXDLIN(1153)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this2 * (_this->tx - mouseX))));
            		}
HXDLIN(1153)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseY,return )

::String DisplayObject_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1160_get_name)
HXDLIN(1160)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1167_set_name)
HXDLIN(1167)		return (this->_hx___name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1172_get_root)
HXLINE(1174)		if (hx::IsNotNull( this->stage )) {
HXLINE(1176)			return ::openfl::Lib_obj::current;
            		}
HXLINE(1180)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_root,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1187_get_rotation)
HXDLIN(1187)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1192_set_rotation)
HXLINE(1194)		if ((value != this->_hx___rotation)) {
HXLINE(1196)			this->_hx___rotation = value;
HXLINE(1197)			Float radians = this->_hx___rotation;
HXDLIN(1197)			Float radians1 = (radians * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(1198)			this->_hx___rotationSine = ::Math_obj::sin(radians1);
HXLINE(1199)			this->_hx___rotationCosine = ::Math_obj::cos(radians1);
HXLINE(1201)			this->_hx___transform->a = (this->_hx___rotationCosine * this->_hx___scaleX);
HXLINE(1202)			this->_hx___transform->b = (this->_hx___rotationSine * this->_hx___scaleX);
HXLINE(1203)			this->_hx___transform->c = (-(this->_hx___rotationSine) * this->_hx___scaleY);
HXLINE(1204)			this->_hx___transform->d = (this->_hx___rotationCosine * this->_hx___scaleY);
HXLINE(1206)			if (!(this->_hx___transformDirty)) {
HXLINE(1206)				this->_hx___transformDirty = true;
HXDLIN(1206)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1210)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1217_get_scaleX)
HXDLIN(1217)		return this->_hx___scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1222_set_scaleX)
HXLINE(1224)		if ((value != this->_hx___scaleX)) {
HXLINE(1226)			this->_hx___scaleX = value;
HXLINE(1228)			if ((this->_hx___transform->b == (int)0)) {
HXLINE(1230)				if ((value != this->_hx___transform->a)) {
HXLINE(1230)					if (!(this->_hx___transformDirty)) {
HXLINE(1230)						this->_hx___transformDirty = true;
HXDLIN(1230)						::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            					}
            				}
HXLINE(1231)				this->_hx___transform->a = value;
            			}
            			else {
HXLINE(1235)				Float a = (this->_hx___rotationCosine * value);
HXLINE(1236)				Float b = (this->_hx___rotationSine * value);
HXLINE(1238)				bool _hx_tmp;
HXDLIN(1238)				if ((this->_hx___transform->a == a)) {
HXLINE(1238)					_hx_tmp = (this->_hx___transform->b != b);
            				}
            				else {
HXLINE(1238)					_hx_tmp = true;
            				}
HXDLIN(1238)				if (_hx_tmp) {
HXLINE(1240)					if (!(this->_hx___transformDirty)) {
HXLINE(1240)						this->_hx___transformDirty = true;
HXDLIN(1240)						::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            					}
            				}
HXLINE(1244)				this->_hx___transform->a = a;
HXLINE(1245)				this->_hx___transform->b = b;
            			}
            		}
HXLINE(1251)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1258_get_scaleY)
HXDLIN(1258)		return this->_hx___scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1263_set_scaleY)
HXLINE(1265)		if ((value != this->_hx___scaleY)) {
HXLINE(1267)			this->_hx___scaleY = value;
HXLINE(1269)			if ((this->_hx___transform->c == (int)0)) {
HXLINE(1271)				if ((value != this->_hx___transform->d)) {
HXLINE(1271)					if (!(this->_hx___transformDirty)) {
HXLINE(1271)						this->_hx___transformDirty = true;
HXDLIN(1271)						::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            					}
            				}
HXLINE(1272)				this->_hx___transform->d = value;
            			}
            			else {
HXLINE(1276)				Float c = (-(this->_hx___rotationSine) * value);
HXLINE(1277)				Float d = (this->_hx___rotationCosine * value);
HXLINE(1279)				bool _hx_tmp;
HXDLIN(1279)				if ((this->_hx___transform->d == d)) {
HXLINE(1279)					_hx_tmp = (this->_hx___transform->c != c);
            				}
            				else {
HXLINE(1279)					_hx_tmp = true;
            				}
HXDLIN(1279)				if (_hx_tmp) {
HXLINE(1281)					if (!(this->_hx___transformDirty)) {
HXLINE(1281)						this->_hx___transformDirty = true;
HXDLIN(1281)						::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            					}
            				}
HXLINE(1285)				this->_hx___transform->c = c;
HXLINE(1286)				this->_hx___transform->d = d;
            			}
            		}
HXLINE(1292)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

 ::openfl::geom::Rectangle DisplayObject_obj::get_scrollRect(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1297_get_scrollRect)
HXLINE(1299)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE(1301)			return null();
            		}
HXLINE(1305)		return this->_hx___scrollRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scrollRect,return )

 ::openfl::geom::Rectangle DisplayObject_obj::set_scrollRect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1310_set_scrollRect)
HXLINE(1312)		if (hx::IsNotEq( value,this->_hx___scrollRect )) {
HXLINE(1314)			if (!(this->_hx___transformDirty)) {
HXLINE(1314)				this->_hx___transformDirty = true;
HXDLIN(1314)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1319)		return (this->_hx___scrollRect = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scrollRect,return )

 ::openfl::geom::Transform DisplayObject_obj::get_transform(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1324_get_transform)
HXLINE(1326)		if (hx::IsNull( this->_hx___objectTransform )) {
HXLINE(1328)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1332)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transform,return )

 ::openfl::geom::Transform DisplayObject_obj::set_transform( ::openfl::geom::Transform value){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1337_set_transform)
HXLINE(1339)		if (hx::IsNull( value )) {
HXLINE(1341)			HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Parameter transform must be non-null.",56,12,fe,6e)));
            		}
HXLINE(1345)		if (hx::IsNull( this->_hx___objectTransform )) {
HXLINE(1347)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1351)		if (!(this->_hx___transformDirty)) {
HXLINE(1351)			this->_hx___transformDirty = true;
HXDLIN(1351)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            		}
HXLINE(1352)		 ::openfl::geom::Transform _hx_tmp = this->_hx___objectTransform;
HXDLIN(1352)		_hx_tmp->set_matrix(value->get_matrix());
HXLINE(1353)		 ::openfl::geom::Transform _hx_tmp1 = this->_hx___objectTransform;
HXDLIN(1353)		_hx_tmp1->set_colorTransform(value->get_colorTransform()->_hx___clone());
HXLINE(1355)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transform,return )

bool DisplayObject_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1362_get_visible)
HXDLIN(1362)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

bool DisplayObject_obj::set_visible(bool value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1367_set_visible)
HXLINE(1369)		if ((value != this->_hx___visible)) {
HXLINE(1369)			if (!(this->_hx___renderDirty)) {
HXLINE(1369)				this->_hx___renderDirty = true;
HXDLIN(1369)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE(1370)		return (this->_hx___visible = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

Float DisplayObject_obj::get_width(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1375_get_width)
HXLINE(1377)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1378)		this->_hx___getLocalBounds(bounds);
HXLINE(1380)		return bounds->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1385_set_width)
HXLINE(1387)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1389)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE(1390)		matrix->identity();
HXLINE(1392)		this->_hx___getBounds(bounds,matrix);
HXLINE(1394)		if ((value != bounds->width)) {
HXLINE(1396)			this->set_scaleX(((Float)value / (Float)bounds->width));
            		}
            		else {
HXLINE(1400)			this->set_scaleX((int)1);
            		}
HXLINE(1404)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1411_get_x)
HXDLIN(1411)		return this->_hx___transform->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1416_set_x)
HXLINE(1418)		if ((value != this->_hx___transform->tx)) {
HXLINE(1418)			if (!(this->_hx___transformDirty)) {
HXLINE(1418)				this->_hx___transformDirty = true;
HXDLIN(1418)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1419)		return (this->_hx___transform->tx = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1426_get_y)
HXDLIN(1426)		return this->_hx___transform->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1431_set_y)
HXLINE(1433)		if ((value != this->_hx___transform->ty)) {
HXLINE(1433)			if (!(this->_hx___transformDirty)) {
HXLINE(1433)				this->_hx___transformDirty = true;
HXDLIN(1433)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1434)		return (this->_hx___transform->ty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

 ::haxe::ds::StringMap DisplayObject_obj::_hx___broadcastEvents;

int DisplayObject_obj::_hx___instanceCount;

int DisplayObject_obj::_hx___worldRenderDirty;

int DisplayObject_obj::_hx___worldTransformDirty;


hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new() {
	hx::ObjectPtr< DisplayObject_obj > __this = new DisplayObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObject_obj *__this = (DisplayObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObject_obj), true, "openfl.display.DisplayObject"));
	*(void **)__this = DisplayObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObject_obj::DisplayObject_obj()
{
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___children,"__children");
	HX_MARK_MEMBER_NAME(_hx___filters,"__filters");
	HX_MARK_MEMBER_NAME(_hx___forceCacheAsBitmap,"__forceCacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_MARK_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___loaderInfo,"__loaderInfo");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_MARK_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___renderTransformCache,"__renderTransformCache");
	HX_MARK_MEMBER_NAME(_hx___renderTransformChanged,"__renderTransformChanged");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_MARK_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_MARK_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_MARK_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_MARK_MEMBER_NAME(_hx___worldBlendMode,"__worldBlendMode");
	HX_MARK_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_MARK_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_MARK_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_MARK_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___children,"__children");
	HX_VISIT_MEMBER_NAME(_hx___filters,"__filters");
	HX_VISIT_MEMBER_NAME(_hx___forceCacheAsBitmap,"__forceCacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_VISIT_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___loaderInfo,"__loaderInfo");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_VISIT_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderTransformCache,"__renderTransformCache");
	HX_VISIT_MEMBER_NAME(_hx___renderTransformChanged,"__renderTransformChanged");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_VISIT_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_VISIT_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_VISIT_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldBlendMode,"__worldBlendMode");
	HX_VISIT_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_VISIT_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_VISIT_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mask() ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"stage") ) { return hx::Val( stage ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseX() ); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseY() ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_filters() ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_visible() ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { return hx::Val( _hx___scaleX ); }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { return hx::Val( _hx___scaleY ); }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { return hx::Val( _hx___worldZ ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mask") ) { return hx::Val( get_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return hx::Val( set_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transform() ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { return hx::Val( _hx___filters ); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loaderInfo() ); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { return hx::Val( scale9Grid ); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollRect() ); }
		if (HX_FIELD_EQ(inName,"__children") ) { return hx::Val( _hx___children ); }
		if (HX_FIELD_EQ(inName,"__graphics") ) { return hx::Val( _hx___graphics ); }
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { return hx::Val( _hx___worldClip ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_filters") ) { return hx::Val( get_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return hx::Val( set_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__loaderInfo") ) { return hx::Val( _hx___loaderInfo ); }
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"hitTestPoint") ) { return hx::Val( hitTestPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheAsBitmap() ); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { return hx::Val( _hx___interactive ); }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { return hx::Val( _hx___renderDirty ); }
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return hx::Val( dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTestObject") ) { return hx::Val( hitTestObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { return hx::Val( _hx___renderParent ); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { return hx::Val( _hx___rotationSine ); }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { return hx::Val( _hx___worldVisible ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_loaderInfo") ) { return hx::Val( get_loaderInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollRect") ) { return hx::Val( get_scrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollRect") ) { return hx::Val( set_scrollRect_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { return hx::Val( _hx___cacheAsBitmap ); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return hx::Val( _hx___dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchStack") ) { return hx::Val( _hx___dispatchStack_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { return hx::Val( opaqueBackground ); }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { return hx::Val( _hx___rotationCosine ); }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty ); }
		if (HX_FIELD_EQ(inName,"__worldBlendMode") ) { return hx::Val( _hx___worldBlendMode ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getLocalBounds") ) { return hx::Val( _hx___getLocalBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setRenderDirty") ) { return hx::Val( _hx___setRenderDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { return hx::Val( _hx___objectTransform ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return hx::Val( set_cacheAsBitmap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { return hx::Val( _hx___worldClipChanged ); }
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheAsBitmapMatrix() ); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { return hx::Val( _hx___worldAlphaChanged ); }
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getWorldTransform") ) { return hx::Val( _hx___getWorldTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__forceCacheAsBitmap") ) { return hx::Val( _hx___forceCacheAsBitmap ); }
		if (HX_FIELD_EQ(inName,"__getRenderTransform") ) { return hx::Val( _hx___getRenderTransform_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { return hx::Val( _hx___cacheAsBitmapMatrix ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { return hx::Val( _hx___worldVisibleChanged ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderTransformCache") ) { return hx::Val( _hx___renderTransformCache ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmapMatrix") ) { return hx::Val( get_cacheAsBitmapMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmapMatrix") ) { return hx::Val( set_cacheAsBitmapMatrix_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__renderTransformChanged") ) { return hx::Val( _hx___renderTransformChanged ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { outValue = ( _hx___instanceCount ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { outValue = ( _hx___broadcastEvents ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldRenderDirty") ) { outValue = ( _hx___worldRenderDirty ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldTransformDirty") ) { outValue = ( _hx___worldTransformDirty ); return true; }
	}
	return false;
}

hx::Val DisplayObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mask(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { _hx___scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { _hx___scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { _hx___worldZ=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue.Cast<  ::openfl::geom::Transform >()) ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { _hx___filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { scale9Grid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollRect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"__children") ) { _hx___children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__graphics") ) { _hx___graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { _hx___worldClip=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__loaderInfo") ) { _hx___loaderInfo=inValue.Cast<  ::openfl::display::LoaderInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { _hx___interactive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { _hx___renderDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { _hx___renderParent=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { _hx___rotationSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { _hx___worldVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { _hx___cacheAsBitmap=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { opaqueBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { _hx___rotationCosine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldBlendMode") ) { _hx___worldBlendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { _hx___objectTransform=inValue.Cast<  ::openfl::geom::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { _hx___worldClipChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmapMatrix(inValue.Cast<  ::openfl::geom::Matrix >()) ); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { _hx___worldAlphaChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__forceCacheAsBitmap") ) { _hx___forceCacheAsBitmap=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { _hx___cacheAsBitmapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { _hx___worldVisibleChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderTransformCache") ) { _hx___renderTransformCache=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__renderTransformChanged") ) { _hx___renderTransformChanged=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { _hx___instanceCount=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { _hx___broadcastEvents=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldRenderDirty") ) { _hx___worldRenderDirty=ioValue.Cast< int >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldTransformDirty") ) { _hx___worldTransformDirty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("cacheAsBitmap","\xe3","\x82","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("cacheAsBitmapMatrix","\x84","\xf9","\x81","\x95"));
	outFields->push(HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"));
	outFields->push(HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"));
	outFields->push(HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"));
	outFields->push(HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb"));
	outFields->push(HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"));
	outFields->push(HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"));
	outFields->push(HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc"));
	outFields->push(HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"));
	outFields->push(HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"));
	outFields->push(HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"));
	outFields->push(HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61"));
	outFields->push(HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"));
	outFields->push(HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"));
	outFields->push(HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"));
	outFields->push(HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,opaqueBackground),HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a")},
	{hx::fsObject /*::openfl::display::DisplayObjectContainer*/ ,(int)offsetof(DisplayObject_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,scale9Grid),HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(DisplayObject_obj,stage),HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmap),HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmapMatrix),HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(DisplayObject_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___children),HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___filters),HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___forceCacheAsBitmap),HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(DisplayObject_obj,_hx___graphics),HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___interactive),HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsObject /*::openfl::display::LoaderInfo*/ ,(int)offsetof(DisplayObject_obj,_hx___loaderInfo),HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsObject /*::openfl::geom::Transform*/ ,(int)offsetof(DisplayObject_obj,_hx___objectTransform),HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderDirty),HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___renderParent),HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransformCache),HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderTransformChanged),HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationCosine),HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationSine),HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleX),HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleY),HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldAlphaChanged),HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___worldBlendMode),HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___worldClip),HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldClipChanged),HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisible),HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisibleChanged),HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___worldZ),HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &DisplayObject_obj::_hx___broadcastEvents,HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___instanceCount,HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___worldRenderDirty,HX_HCSTRING("__worldRenderDirty","\xca","\xee","\xec","\xf2")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___worldTransformDirty,HX_HCSTRING("__worldTransformDirty","\xd8","\x61","\x34","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"),
	HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"),
	HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"),
	HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb"),
	HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"),
	HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"),
	HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc"),
	HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"),
	HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"),
	HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"),
	HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"),
	HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61"),
	HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"),
	HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"),
	HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"),
	HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("hitTestObject","\xe4","\x54","\x64","\xd7"),
	HX_HCSTRING("hitTestPoint","\xcb","\xa9","\x21","\xe4"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__dispatchEvent","\xe0","\xff","\x16","\x4e"),
	HX_HCSTRING("__dispatchStack","\x0e","\x9f","\x5d","\x5c"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__getLocalBounds","\x6a","\x04","\x36","\xdf"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getRenderTransform","\x60","\xc2","\x34","\xc0"),
	HX_HCSTRING("__getWorldTransform","\xd0","\xf4","\xfc","\x8b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__setRenderDirty","\x7a","\x43","\x7f","\x81"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("set_cacheAsBitmap","\x46","\x66","\xed","\x93"),
	HX_HCSTRING("get_cacheAsBitmapMatrix","\x1b","\xa0","\xd7","\x9d"),
	HX_HCSTRING("set_cacheAsBitmapMatrix","\x27","\x09","\x39","\xa0"),
	HX_HCSTRING("get_filters","\xd2","\x01","\x41","\x8f"),
	HX_HCSTRING("set_filters","\xde","\x08","\xae","\x99"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_loaderInfo","\x6a","\x3a","\xda","\x2c"),
	HX_HCSTRING("get_mask","\x75","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mask","\xe9","\x55","\x6e","\x76"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scrollRect","\x1a","\x64","\x5c","\x7f"),
	HX_HCSTRING("set_scrollRect","\x8e","\x4c","\x7c","\x9f"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___worldRenderDirty,"__worldRenderDirty");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___worldTransformDirty,"__worldTransformDirty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___worldRenderDirty,"__worldRenderDirty");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___worldTransformDirty,"__worldTransformDirty");
};

#endif

hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a"),
	HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f"),
	HX_HCSTRING("__worldRenderDirty","\xca","\xee","\xec","\xf2"),
	HX_HCSTRING("__worldTransformDirty","\xd8","\x61","\x34","\x46"),
	::String(null())
};

void DisplayObject_obj::__register()
{
	hx::Object *dummy = new DisplayObject_obj;
	DisplayObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObject","\xf7","\x4b","\x6f","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_53_boot)
HXDLIN(  53)		_hx___broadcastEvents =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_54_boot)
HXDLIN(  54)		_hx___instanceCount = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_55_boot)
HXDLIN(  55)		_hx___worldRenderDirty = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_56_boot)
HXDLIN(  56)		_hx___worldTransformDirty = (int)0;
            	}
}

} // end namespace openfl
} // end namespace display
