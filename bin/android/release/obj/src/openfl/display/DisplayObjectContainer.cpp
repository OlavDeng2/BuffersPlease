// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractFilterManager
#include <openfl/_internal/renderer/AbstractFilterManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_38_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",38,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_53_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",53,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_58_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",58,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_118_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",118,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_123_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",123,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_136_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",136,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_149_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",149,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_163_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",163,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_176_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",176,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_186_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",186,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_223_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",223,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_236_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",236,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_271_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",271,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_292_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",292,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_304_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",304,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_311_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",311,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_324_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",324,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_334___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",334,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_359___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",359,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_368___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",368,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_398___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",398,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_437___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",437,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_530___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",530,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_549___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",549,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_566___renderCairo,"openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",566,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_599___renderCairoMask,"openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",599,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_618___renderCanvas,"openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",618,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_653___renderCanvasMask,"openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",653,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_675___renderDOM,"openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",675,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_708___renderGL,"openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",708,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_741___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",741,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_760___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",760,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_769___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",769,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_786___updateChildren,"openfl.display.DisplayObjectContainer","__updateChildren",0x0e3ace2c,"openfl.display.DisplayObjectContainer.__updateChildren","openfl/display/DisplayObjectContainer.hx",786,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_808_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",808,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_38_new)
HXLINE(  40)		super::__construct();
HXLINE(  42)		this->mouseChildren = true;
HXLINE(  44)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE(  45)		int length = null();
HXDLIN(  45)		bool fixed = null();
HXDLIN(  45)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE(  46)		int length1 = null();
HXDLIN(  46)		bool fixed1 = null();
HXDLIN(  46)		this->_hx___tempStack =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17120186;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_53_addChild)
HXDLIN(  53)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_58_addChildAt)
HXLINE(  60)		bool _hx_tmp;
HXDLIN(  60)		if ((index <= this->_hx___children->length)) {
HXLINE(  60)			_hx_tmp = (index < (int)0);
            		}
            		else {
HXLINE(  60)			_hx_tmp = true;
            		}
HXDLIN(  60)		if (_hx_tmp) {
HXLINE(  62)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE(  66)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  68)			if (hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE(  70)				this->_hx___children->remove(child);
HXLINE(  71)				this->_hx___children->insert(index,child);
            			}
            		}
            		else {
HXLINE(  77)			if (hx::IsNotNull( child->parent )) {
HXLINE(  79)				child->parent->removeChild(child);
            			}
HXLINE(  83)			this->_hx___children->insert(index,child);
HXLINE(  84)			child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE(  86)			bool addedToStage;
HXDLIN(  86)			if (hx::IsNotNull( this->stage )) {
HXLINE(  86)				addedToStage = hx::IsNull( child->stage );
            			}
            			else {
HXLINE(  86)				addedToStage = false;
            			}
HXLINE(  88)			if (addedToStage) {
HXLINE(  90)				this->_hx___setStageReference(this->stage);
            			}
HXLINE(  94)			if (!(child->_hx___transformDirty)) {
HXLINE(  94)				child->_hx___transformDirty = true;
HXDLIN(  94)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(  95)			if (!(child->_hx___renderDirty)) {
HXLINE(  95)				child->_hx___renderDirty = true;
HXDLIN(  95)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE(  96)			if (!(this->_hx___renderDirty)) {
HXLINE(  96)				this->_hx___renderDirty = true;
HXDLIN(  96)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE(  98)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("added",c0,d4,43,1c),true,null());
HXLINE(  99)			event->target = child;
HXLINE( 100)			child->_hx___dispatchEvent(event);
HXLINE( 102)			if (addedToStage) {
HXLINE( 104)				child->_hx___dispatchChildren( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false),this->_hx___tempStack);
HXLINE( 105)				this->_hx___tempStack->set_length((int)0);
            			}
            		}
HXLINE( 111)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_118_areInaccessibleObjectsUnderPoint)
HXDLIN( 118)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_123_contains)
HXLINE( 125)		while(true){
HXLINE( 125)			bool _hx_tmp;
HXDLIN( 125)			if (hx::IsNotEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 125)				_hx_tmp = hx::IsNotNull( child );
            			}
            			else {
HXLINE( 125)				_hx_tmp = false;
            			}
HXDLIN( 125)			if (!(_hx_tmp)) {
HXLINE( 125)				goto _hx_goto_4;
            			}
HXLINE( 127)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 131)		return hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_136_getChildAt)
HXLINE( 138)		bool _hx_tmp;
HXDLIN( 138)		if ((index >= (int)0)) {
HXLINE( 138)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 138)			_hx_tmp = false;
            		}
HXDLIN( 138)		if (_hx_tmp) {
HXLINE( 140)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 144)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_149_getChildByName)
HXLINE( 151)		{
HXLINE( 151)			int _g = (int)0;
HXDLIN( 151)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 151)			while((_g < _g1->length)){
HXLINE( 151)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 151)				_g = (_g + (int)1);
HXLINE( 153)				if ((child->get_name() == name)) {
HXLINE( 153)					return child;
            				}
            			}
            		}
HXLINE( 157)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_163_getChildIndex)
HXLINE( 165)		{
HXLINE( 165)			int _g1 = (int)0;
HXDLIN( 165)			int _g = this->_hx___children->length;
HXDLIN( 165)			while((_g1 < _g)){
HXLINE( 165)				_g1 = (_g1 + (int)1);
HXDLIN( 165)				int i = (_g1 - (int)1);
HXLINE( 167)				if (hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 167)					return i;
            				}
            			}
            		}
HXLINE( 171)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_176_getObjectsUnderPoint)
HXLINE( 178)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 179)		this->_hx___hitTest(point->x,point->y,false,stack,false,hx::ObjectPtr<OBJ_>(this));
HXLINE( 180)		stack->reverse();
HXLINE( 181)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_186_removeChild)
HXLINE( 188)		bool _hx_tmp;
HXDLIN( 188)		if (hx::IsNotNull( child )) {
HXLINE( 188)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 188)			_hx_tmp = false;
            		}
HXDLIN( 188)		if (_hx_tmp) {
HXLINE( 190)			if (!(child->_hx___transformDirty)) {
HXLINE( 190)				child->_hx___transformDirty = true;
HXDLIN( 190)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE( 191)			if (!(child->_hx___renderDirty)) {
HXLINE( 191)				child->_hx___renderDirty = true;
HXDLIN( 191)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE( 192)			if (!(this->_hx___renderDirty)) {
HXLINE( 192)				this->_hx___renderDirty = true;
HXDLIN( 192)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE( 194)			child->_hx___dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null()));
HXLINE( 196)			if (hx::IsNotNull( this->stage )) {
HXLINE( 198)				bool _hx_tmp1;
HXDLIN( 198)				if (hx::IsNotNull( child->stage )) {
HXLINE( 198)					_hx_tmp1 = hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 198)					_hx_tmp1 = false;
            				}
HXDLIN( 198)				if (_hx_tmp1) {
HXLINE( 200)					this->stage->set_focus(null());
            				}
HXLINE( 204)				child->_hx___dispatchChildren( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false),this->_hx___tempStack);
HXLINE( 205)				this->_hx___tempStack->set_length((int)0);
HXLINE( 207)				child->_hx___setStageReference(null());
            			}
HXLINE( 211)			child->parent = null();
HXLINE( 212)			this->_hx___children->remove(child);
HXLINE( 213)			this->_hx___removedChildren->push(child);
HXLINE( 214)			if (!(child->_hx___transformDirty)) {
HXLINE( 214)				child->_hx___transformDirty = true;
HXDLIN( 214)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE( 218)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_223_removeChildAt)
HXLINE( 225)		bool _hx_tmp;
HXDLIN( 225)		if ((index >= (int)0)) {
HXLINE( 225)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 231)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_236_removeChildren)
HXLINE( 238)		if ((endIndex == (int)2147483647)) {
HXLINE( 240)			endIndex = (this->_hx___children->length - (int)1);
HXLINE( 242)			if ((endIndex < (int)0)) {
HXLINE( 244)				return;
            			}
            		}
HXLINE( 250)		if ((beginIndex > (this->_hx___children->length - (int)1))) {
HXLINE( 252)			return;
            		}
            		else {
HXLINE( 254)			bool _hx_tmp;
HXDLIN( 254)			bool _hx_tmp1;
HXDLIN( 254)			if ((endIndex >= beginIndex)) {
HXLINE( 254)				_hx_tmp1 = (beginIndex < (int)0);
            			}
            			else {
HXLINE( 254)				_hx_tmp1 = true;
            			}
HXDLIN( 254)			if (!(_hx_tmp1)) {
HXLINE( 254)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 254)				_hx_tmp = true;
            			}
HXDLIN( 254)			if (_hx_tmp) {
HXLINE( 256)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 260)		int numRemovals = (endIndex - beginIndex);
HXLINE( 261)		while((numRemovals >= (int)0)){
HXLINE( 263)			this->removeChildAt(beginIndex);
HXLINE( 264)			numRemovals = (numRemovals - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_271_resolve)
HXLINE( 273)		if (hx::IsNull( this->_hx___children )) {
HXLINE( 273)			return null();
            		}
HXLINE( 275)		{
HXLINE( 275)			int _g = (int)0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 275)				_g = (_g + (int)1);
HXLINE( 277)				if ((child->get_name() == fieldName)) {
HXLINE( 279)					return child;
            				}
            			}
            		}
HXLINE( 285)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_292_setChildIndex)
HXDLIN( 292)		bool _hx_tmp;
HXDLIN( 292)		bool _hx_tmp1;
HXDLIN( 292)		if ((index >= (int)0)) {
HXDLIN( 292)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXDLIN( 292)			_hx_tmp1 = false;
            		}
HXDLIN( 292)		if (_hx_tmp1) {
HXDLIN( 292)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 294)			this->_hx___children->remove(child);
HXLINE( 295)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_304_stopAllMovieClips)
HXDLIN( 304)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_311_swapChildren)
HXDLIN( 311)		bool _hx_tmp;
HXDLIN( 311)		if (hx::IsEq( child1->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 311)			_hx_tmp = hx::IsEq( child2->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 311)			_hx_tmp = false;
            		}
HXDLIN( 311)		if (_hx_tmp) {
HXLINE( 313)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 314)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 316)			this->_hx___children[index1] = child2;
HXLINE( 317)			this->_hx___children[index2] = child1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_324_swapChildrenAt)
HXLINE( 326)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 327)		::Array< ::Dynamic> _hx_tmp = this->_hx___children;
HXDLIN( 327)		_hx_tmp[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 328)		this->_hx___children[index2] = swap;
HXLINE( 329)		swap = null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

bool DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event, ::openfl::_Vector::ObjectVector stack){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_334___dispatchChildren)
HXLINE( 336)		bool success = this->super::_hx___dispatchChildren(event,stack);
HXLINE( 338)		bool _hx_tmp;
HXDLIN( 338)		if (success) {
HXLINE( 338)			_hx_tmp = hx::IsNotNull( this->_hx___children );
            		}
            		else {
HXLINE( 338)			_hx_tmp = false;
            		}
HXDLIN( 338)		if (_hx_tmp) {
HXLINE( 340)			int _g = (int)0;
HXDLIN( 340)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 340)			while((_g < _g1->length)){
HXLINE( 340)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 340)				_g = (_g + (int)1);
HXLINE( 342)				if (!(child->_hx___dispatchChildren(event,stack))) {
HXLINE( 344)					return false;
            				}
            			}
            		}
HXLINE( 352)		return success;
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_359___enterFrame)
HXDLIN( 359)		int _g = (int)0;
HXDLIN( 359)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 359)		while((_g < _g1->length)){
HXDLIN( 359)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 359)			_g = (_g + (int)1);
HXLINE( 361)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_368___getBounds)
HXLINE( 370)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 372)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 372)			return;
            		}
HXLINE( 374)		if (hx::IsNotNull( matrix )) {
HXLINE( 376)			this->_hx___updateTransforms(matrix);
HXLINE( 377)			this->_hx___updateChildren(true);
            		}
HXLINE( 381)		{
HXLINE( 381)			int _g = (int)0;
HXDLIN( 381)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 381)			while((_g < _g1->length)){
HXLINE( 381)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 381)				_g = (_g + (int)1);
HXLINE( 383)				bool _hx_tmp;
HXDLIN( 383)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 383)					_hx_tmp = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 383)					_hx_tmp = true;
            				}
HXDLIN( 383)				if (_hx_tmp) {
HXLINE( 383)					continue;
            				}
HXLINE( 384)				child->_hx___getBounds(rect,child->_hx___worldTransform);
            			}
            		}
HXLINE( 388)		if (hx::IsNotNull( matrix )) {
HXLINE( 390)			this->_hx___updateTransforms(null());
HXLINE( 391)			this->_hx___updateChildren(true);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_398___getRenderBounds)
HXLINE( 400)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 402)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 403)			return;
            		}
            		else {
HXLINE( 407)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 411)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 411)			return;
            		}
HXLINE( 413)		if (hx::IsNotNull( matrix )) {
HXLINE( 415)			this->_hx___updateTransforms(matrix);
HXLINE( 416)			this->_hx___updateChildren(true);
            		}
HXLINE( 420)		{
HXLINE( 420)			int _g = (int)0;
HXDLIN( 420)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 420)			while((_g < _g1->length)){
HXLINE( 420)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 420)				_g = (_g + (int)1);
HXLINE( 422)				bool _hx_tmp;
HXDLIN( 422)				bool _hx_tmp1;
HXDLIN( 422)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 422)					_hx_tmp1 = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 422)					_hx_tmp1 = true;
            				}
HXDLIN( 422)				if (!(_hx_tmp1)) {
HXLINE( 422)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 422)					_hx_tmp = true;
            				}
HXDLIN( 422)				if (_hx_tmp) {
HXLINE( 422)					continue;
            				}
HXLINE( 423)				child->_hx___getRenderBounds(rect,child->_hx___worldTransform);
            			}
            		}
HXLINE( 427)		if (hx::IsNotNull( matrix )) {
HXLINE( 429)			this->_hx___updateTransforms(null());
HXLINE( 430)			this->_hx___updateChildren(true);
            		}
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_437___hitTest)
HXLINE( 439)		bool _hx_tmp;
HXDLIN( 439)		bool _hx_tmp1;
HXDLIN( 439)		if (!(!(hitObject->get_visible()))) {
HXLINE( 439)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 439)			_hx_tmp1 = true;
            		}
HXDLIN( 439)		if (!(_hx_tmp1)) {
HXLINE( 439)			bool _hx_tmp2;
HXDLIN( 439)			if (interactiveOnly) {
HXLINE( 439)				_hx_tmp2 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 439)				_hx_tmp2 = false;
            			}
HXDLIN( 439)			if (_hx_tmp2) {
HXLINE( 439)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 439)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 439)			_hx_tmp = true;
            		}
HXDLIN( 439)		if (_hx_tmp) {
HXLINE( 439)			return false;
            		}
HXLINE( 440)		bool _hx_tmp3;
HXDLIN( 440)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 440)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 440)			_hx_tmp3 = false;
            		}
HXDLIN( 440)		if (_hx_tmp3) {
HXLINE( 440)			return false;
            		}
HXLINE( 442)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 444)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___temp;
HXLINE( 445)			point->setTo(x,y);
HXLINE( 446)			{
HXLINE( 446)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 446)				Float norm = (_this->a * _this->d);
HXDLIN( 446)				Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 446)				if ((norm1 == (int)0)) {
HXLINE( 446)					point->x = -(_this->tx);
HXDLIN( 446)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 446)					Float _this1 = _this->c;
HXDLIN( 446)					Float px = (_this1 * (_this->ty - point->y));
HXDLIN( 446)					Float _this2 = _this->d;
HXDLIN( 446)					Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (point->x - _this->tx))));
HXDLIN( 446)					Float _this3 = _this->a;
HXDLIN( 446)					Float _hx_tmp4 = (_this3 * (point->y - _this->ty));
HXDLIN( 446)					Float _this4 = _this->b;
HXDLIN( 446)					point->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp4 + (_this4 * (_this->tx - point->x))));
HXDLIN( 446)					point->x = px1;
            				}
            			}
HXLINE( 448)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 450)				return false;
            			}
            		}
HXLINE( 456)		int i = this->_hx___children->length;
HXLINE( 457)		if (interactiveOnly) {
HXLINE( 459)			bool _hx_tmp5;
HXDLIN( 459)			if (hx::IsNotNull( stack )) {
HXLINE( 459)				_hx_tmp5 = !(this->mouseChildren);
            			}
            			else {
HXLINE( 459)				_hx_tmp5 = true;
            			}
HXDLIN( 459)			if (_hx_tmp5) {
HXLINE( 461)				while(true){
HXLINE( 461)					i = (i - (int)1);
HXDLIN( 461)					if (!((i >= (int)0))) {
HXLINE( 461)						goto _hx_goto_30;
            					}
HXLINE( 463)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 465)						if (hx::IsNotNull( stack )) {
HXLINE( 467)							stack->push(hitObject);
            						}
HXLINE( 471)						return true;
            					}
            				}
            				_hx_goto_30:;
            			}
            			else {
HXLINE( 477)				if (hx::IsNotNull( stack )) {
HXLINE( 479)					int length = stack->length;
HXLINE( 481)					bool interactive = false;
HXLINE( 482)					bool hitTest = false;
HXLINE( 484)					while(true){
HXLINE( 484)						i = (i - (int)1);
HXDLIN( 484)						if (!((i >= (int)0))) {
HXLINE( 484)							goto _hx_goto_31;
            						}
HXLINE( 486)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 488)						bool _hx_tmp6;
HXDLIN( 488)						if (!(interactive)) {
HXLINE( 488)							if (this->mouseEnabled) {
HXLINE( 488)								_hx_tmp6 = !(hitTest);
            							}
            							else {
HXLINE( 488)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 488)							_hx_tmp6 = true;
            						}
HXDLIN( 488)						if (_hx_tmp6) {
HXLINE( 490)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 492)								hitTest = true;
HXLINE( 494)								if (interactive) {
HXLINE( 496)									goto _hx_goto_31;
            								}
            							}
            						}
            					}
            					_hx_goto_31:;
HXLINE( 506)					if (hitTest) {
HXLINE( 508)						stack->insert(length,hitObject);
HXLINE( 509)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 517)			while(true){
HXLINE( 517)				i = (i - (int)1);
HXDLIN( 517)				if (!((i >= (int)0))) {
HXLINE( 517)					goto _hx_goto_32;
            				}
HXLINE( 519)				this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >());
            			}
            			_hx_goto_32:;
            		}
HXLINE( 525)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_530___hitTestMask)
HXLINE( 532)		int i = this->_hx___children->length;
HXLINE( 534)		while(true){
HXLINE( 534)			i = (i - (int)1);
HXDLIN( 534)			if (!((i >= (int)0))) {
HXLINE( 534)				goto _hx_goto_34;
            			}
HXLINE( 536)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 538)				return true;
            			}
            		}
            		_hx_goto_34:;
HXLINE( 544)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_549___readGraphicsData)
HXLINE( 551)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 553)		if (recurse) {
HXLINE( 555)			int _g = (int)0;
HXDLIN( 555)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 555)			while((_g < _g1->length)){
HXLINE( 555)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 555)				_g = (_g + (int)1);
HXLINE( 557)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_566___renderCairo)
HXLINE( 569)		bool _hx_tmp;
HXDLIN( 569)		if (!(!(this->_hx___renderable))) {
HXLINE( 569)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 569)			_hx_tmp = true;
            		}
HXDLIN( 569)		if (_hx_tmp) {
HXLINE( 569)			return;
            		}
HXLINE( 571)		this->super::_hx___renderCairo(renderSession);
HXLINE( 573)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 575)		{
HXLINE( 575)			int _g = (int)0;
HXDLIN( 575)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 575)			while((_g < _g1->length)){
HXLINE( 575)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 575)				_g = (_g + (int)1);
HXLINE( 577)				child->_hx___renderCairo(renderSession);
            			}
            		}
HXLINE( 581)		{
HXLINE( 581)			int _g2 = (int)0;
HXDLIN( 581)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN( 581)			while((_g2 < _g11->get_length())){
HXLINE( 581)				 ::openfl::display::DisplayObject orphan = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 581)				_g2 = (_g2 + (int)1);
HXLINE( 583)				if (hx::IsNull( orphan->stage )) {
HXLINE( 585)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 591)		this->_hx___removedChildren->set_length((int)0);
HXLINE( 593)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_599___renderCairoMask)
HXLINE( 602)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 604)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
HXLINE( 608)		{
HXLINE( 608)			int _g = (int)0;
HXDLIN( 608)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 608)			while((_g < _g1->length)){
HXLINE( 608)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 608)				_g = (_g + (int)1);
HXLINE( 610)				child->_hx___renderCairoMask(renderSession);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_618___renderCanvas)
HXLINE( 620)		bool _hx_tmp;
HXDLIN( 620)		bool _hx_tmp1;
HXDLIN( 620)		if (!(!(this->_hx___renderable))) {
HXLINE( 620)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 620)			_hx_tmp1 = true;
            		}
HXDLIN( 620)		if (!(_hx_tmp1)) {
HXLINE( 620)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 620)				if (!((this->get_mask()->get_width() <= (int)0))) {
HXLINE( 620)					_hx_tmp = (this->get_mask()->get_height() <= (int)0);
            				}
            				else {
HXLINE( 620)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 620)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 620)			_hx_tmp = true;
            		}
HXDLIN( 620)		if (_hx_tmp) {
HXLINE( 620)			return;
            		}
HXLINE( 624)		this->super::_hx___renderCanvas(renderSession);
HXLINE( 626)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 628)		{
HXLINE( 628)			int _g = (int)0;
HXDLIN( 628)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 628)			while((_g < _g1->length)){
HXLINE( 628)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 628)				_g = (_g + (int)1);
HXLINE( 630)				child->_hx___renderCanvas(renderSession);
            			}
            		}
HXLINE( 634)		{
HXLINE( 634)			int _g2 = (int)0;
HXDLIN( 634)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN( 634)			while((_g2 < _g11->get_length())){
HXLINE( 634)				 ::openfl::display::DisplayObject orphan = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 634)				_g2 = (_g2 + (int)1);
HXLINE( 636)				if (hx::IsNull( orphan->stage )) {
HXLINE( 638)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 644)		this->_hx___removedChildren->set_length((int)0);
HXLINE( 646)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_653___renderCanvasMask)
HXLINE( 655)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 657)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
HXLINE( 661)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 662)		this->_hx___getLocalBounds(bounds);
HXLINE( 664)		renderSession->context->rect((int)0,(int)0,bounds->width,bounds->height);
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_675___renderDOM)
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_708___renderGL)
HXLINE( 710)		bool _hx_tmp;
HXDLIN( 710)		if (!(!(this->_hx___renderable))) {
HXLINE( 710)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 710)			_hx_tmp = true;
            		}
HXDLIN( 710)		if (_hx_tmp) {
HXLINE( 710)			return;
            		}
HXLINE( 712)		this->super::_hx___renderGL(renderSession);
HXLINE( 714)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 715)		renderSession->filterManager->pushObject(hx::ObjectPtr<OBJ_>(this));
HXLINE( 717)		{
HXLINE( 717)			int _g = (int)0;
HXDLIN( 717)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 717)			while((_g < _g1->length)){
HXLINE( 717)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 717)				_g = (_g + (int)1);
HXLINE( 719)				child->_hx___renderGL(renderSession);
            			}
            		}
HXLINE( 723)		{
HXLINE( 723)			int _g2 = (int)0;
HXDLIN( 723)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN( 723)			while((_g2 < _g11->get_length())){
HXLINE( 723)				 ::openfl::display::DisplayObject orphan = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 723)				_g2 = (_g2 + (int)1);
HXLINE( 725)				if (hx::IsNull( orphan->stage )) {
HXLINE( 727)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 733)		this->_hx___removedChildren->set_length((int)0);
HXLINE( 735)		renderSession->filterManager->popObject(hx::ObjectPtr<OBJ_>(this));
HXLINE( 736)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_741___setStageReference)
HXLINE( 743)		this->super::_hx___setStageReference(stage);
HXLINE( 745)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 747)			int _g = (int)0;
HXDLIN( 747)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 747)			while((_g < _g1->length)){
HXLINE( 747)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 747)				_g = (_g + (int)1);
HXLINE( 749)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_760___stopAllMovieClips)
HXDLIN( 760)		int _g = (int)0;
HXDLIN( 760)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 760)		while((_g < _g1->length)){
HXDLIN( 760)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 760)			_g = (_g + (int)1);
HXLINE( 762)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_769___update)
HXLINE( 771)		this->super::_hx___update(transformOnly,updateChildren,maskGraphics);
HXLINE( 773)		if (updateChildren) {
HXLINE( 775)			int _g = (int)0;
HXDLIN( 775)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 775)			while((_g < _g1->length)){
HXLINE( 775)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 775)				_g = (_g + (int)1);
HXLINE( 777)				child->_hx___update(transformOnly,true,maskGraphics);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___updateChildren(bool transformOnly){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_786___updateChildren)
HXLINE( 788)		this->super::_hx___updateChildren(transformOnly);
HXLINE( 790)		{
HXLINE( 790)			int _g = (int)0;
HXDLIN( 790)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 790)			while((_g < _g1->length)){
HXLINE( 790)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 790)				_g = (_g + (int)1);
HXLINE( 792)				child->_hx___update(transformOnly,true,null());
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_808_get_numChildren)
HXDLIN( 808)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )


hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(tabChildren,"tabChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_MARK_MEMBER_NAME(_hx___tempStack,"__tempStack");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(tabChildren,"tabChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_VISIT_MEMBER_NAME(_hx___tempStack,"__tempStack");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numChildren() ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { return hx::Val( tabChildren ); }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { return hx::Val( _hx___tempStack ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return hx::Val( mouseChildren ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return hx::Val( _hx___removedChildren ); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return hx::Val( stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { tabChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { _hx___tempStack=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"));
	outFields->push(HX_HCSTRING("numChildren","\xa5","\x69","\x80","\x5c"));
	outFields->push(HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"));
	outFields->push(HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"));
	outFields->push(HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff")},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,tabChildren),HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___tempStack),HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"),
	HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"),
	HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"),
	HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("areInaccessibleObjectsUnderPoint","\x3d","\x22","\x9b","\x1e"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getChildAt","\xb9","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChildByName","\x88","\xb9","\x73","\xa3"),
	HX_HCSTRING("getChildIndex","\x0c","\x68","\x02","\xb9"),
	HX_HCSTRING("getObjectsUnderPoint","\x96","\x10","\xd5","\x80"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("removeChildren","\xa3","\x55","\xc0","\x3a"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("setChildIndex","\x18","\x4a","\x08","\xfe"),
	HX_HCSTRING("stopAllMovieClips","\xf2","\x60","\xf8","\xa0"),
	HX_HCSTRING("swapChildren","\xf2","\x4a","\x53","\xe0"),
	HX_HCSTRING("swapChildrenAt","\x85","\xa4","\xf1","\x13"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("get_numChildren","\x3c","\x21","\x62","\x1d"),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	hx::Object *dummy = new DisplayObjectContainer_obj;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObjectContainer","\x4a","\x52","\xef","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
