// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLContextType
#include <lime/graphics/opengl/GLContextType.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoBlendModeManager
#include <openfl/_internal/renderer/cairo/CairoBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoMaskManager
#include <openfl/_internal/renderer/cairo/CairoMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7567b6ca69cedca_112_new,"openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",112,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_175_applyFilter,"openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",175,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_186_clone,"openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",186,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_215_colorTransform,"openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",215,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_224_compare,"openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",224,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_350_copyChannel,"openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",350,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_379_copyPixels,"openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",379,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_388_dispose,"openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",388,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_432_disposeImage,"openfl.display.BitmapData","disposeImage",0x60a6bee7,"openfl.display.BitmapData.disposeImage","openfl/display/BitmapData.hx",432,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_437_draw,"openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",437,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_613_drawWithQuality,"openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",613,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_618_encode,"openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",618,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_654_fillRect,"openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",654,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_699_floodFill,"openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",699,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_776_generateFilterRect,"openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",776,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_781_getBuffer,"openfl.display.BitmapData","getBuffer",0xe0f6acab,"openfl.display.BitmapData.getBuffer","openfl/display/BitmapData.hx",781,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_847_getColorBoundsRect,"openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",847,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_864_getPixel,"openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",864,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_872_getPixel32,"openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",872,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_880_getPixels,"openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",880,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_889_getSurface,"openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",889,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_905_getTexture,"openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",905,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1059_getVector,"openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",1059,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1076_histogram,"openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",1076,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1093_hitTest,"openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",1093,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1244_lock,"openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",1244,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1251_merge,"openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",1251,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1266_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",1266,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1259_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",1259,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1317_paletteMap,"openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",1317,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1348_perlinNoise,"openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",1348,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1357_scroll,"openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",1357,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1365_setPixel,"openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",1365,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1373_setPixel32,"openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",1373,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1381_setPixels,"openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",1381,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1389_setVector,"openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",1389,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1406_threshold,"openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",1406,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1415_unlock,"openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",1415,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1422___applyAlpha,"openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",1422,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1446___fromBase64,"openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1446,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1442___fromBase64,"openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1442,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1455___fromBytes,"openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1455,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1453___fromBytes,"openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1453,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1474___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1474,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1470___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1470,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1483___fromImage,"openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",1483,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1504___getFramebuffer,"openfl.display.BitmapData","__getFramebuffer",0x47017542,"openfl.display.BitmapData.__getFramebuffer","openfl/display/BitmapData.hx",1504,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1523___renderCairo,"openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",1523,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1572___renderCairoMask,"openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",1572,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1579___renderCanvas,"openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",1579,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1613___renderCanvasMask,"openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",1613,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1620___renderGL,"openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",1620,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1645___resize,"openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",1645,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1655___sync,"openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",1655,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1664___updateChildren,"openfl.display.BitmapData","__updateChildren",0xeaaf19b3,"openfl.display.BitmapData.__updateChildren","openfl/display/BitmapData.hx",1664,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1671___updateMask,"openfl.display.BitmapData","__updateMask",0x378cf760,"openfl.display.BitmapData.__updateMask","openfl/display/BitmapData.hx",1671,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1680___updateTransforms,"openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",1680,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_707_fromBase64,"openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",707,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_710_fromBase64,"openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",710,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_716_fromBytes,"openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",716,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_719_fromBytes,"openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",719,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_739_fromFile,"openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",739,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_748_fromImage,"openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",748,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_760_fromTexture,"openfl.display.BitmapData","fromTexture",0x71aada46,"openfl.display.BitmapData.fromTexture","openfl/display/BitmapData.hx",760,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1207_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1207,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1205_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1205,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1216_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",1216,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1237_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1237,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1235_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1235,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_84_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",84,0xdd12d5b9)
namespace openfl{
namespace display{

void BitmapData_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor){
bool transparent = __o_transparent.Default(true);
int fillColor = __o_fillColor.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_112_new)
HXLINE( 114)		this->transparent = transparent;
HXLINE( 121)		if ((width < (int)0)) {
HXLINE( 121)			width = (int)0;
            		}
            		else {
HXLINE( 121)			width = width;
            		}
HXLINE( 122)		if ((height < (int)0)) {
HXLINE( 122)			height = (int)0;
            		}
            		else {
HXLINE( 122)			height = height;
            		}
HXLINE( 124)		this->width = width;
HXLINE( 125)		this->height = height;
HXLINE( 126)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height);
HXLINE( 128)		bool _hx_tmp;
HXDLIN( 128)		if ((width > (int)0)) {
HXLINE( 128)			_hx_tmp = (height > (int)0);
            		}
            		else {
HXLINE( 128)			_hx_tmp = false;
            		}
HXDLIN( 128)		if (_hx_tmp) {
HXLINE( 130)			if (transparent) {
HXLINE( 132)				if ((((int)fillColor & (int)(int)-16777216) == (int)0)) {
HXLINE( 134)					fillColor = (int)0;
            				}
            			}
            			else {
HXLINE( 140)				fillColor = ((int)(int)-16777216 | (int)((int)fillColor & (int)(int)16777215));
            			}
HXLINE( 144)			fillColor = ((int)((int)fillColor << (int)(int)8) | (int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255));
HXLINE( 147)			 ::Dynamic elements = ((width * height) * (int)4);
HXDLIN( 147)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 147)			if (hx::IsNotNull( elements )) {
HXLINE( 147)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            			}
            			else {
HXLINE( 147)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 147)			 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 148)			buffer->format = (int)2;
HXLINE( 149)			buffer->premultiplied = true;
HXLINE( 151)			this->image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 153)			if ((fillColor != (int)0)) {
HXLINE( 155)				 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 155)				_hx_tmp1->fillRect(this->image->get_rect(),fillColor,null());
            			}
HXLINE( 162)			this->image->set_transparent(transparent);
HXLINE( 164)			this->_hx___isValid = true;
HXLINE( 165)			this->readable = true;
            		}
HXLINE( 169)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 170)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28c743a7;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)(bool))&::openfl::display::BitmapData_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::BitmapData_obj::_hx___updateMask,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_175_applyFilter)
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		bool _hx_tmp1;
HXDLIN( 177)		if (!(!(this->readable))) {
HXLINE( 177)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 177)			_hx_tmp1 = true;
            		}
HXDLIN( 177)		if (!(_hx_tmp1)) {
HXLINE( 177)			_hx_tmp = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE( 177)			_hx_tmp = true;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 177)			return;
            		}
HXLINE( 179)		filter->_hx___applyFilter(sourceBitmapData,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_186_clone)
HXDLIN( 186)		if (!(this->_hx___isValid)) {
HXLINE( 188)			return  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,this->transparent,(int)0);
            		}
            		else {
HXLINE( 190)			bool _hx_tmp;
HXDLIN( 190)			if (!(this->readable)) {
HXLINE( 190)				_hx_tmp = hx::IsNull( this->image );
            			}
            			else {
HXLINE( 190)				_hx_tmp = false;
            			}
HXDLIN( 190)			if (_hx_tmp) {
HXLINE( 192)				 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,this->transparent,(int)0);
HXLINE( 194)				bitmapData->width = this->width;
HXLINE( 195)				bitmapData->height = this->height;
HXLINE( 196)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 198)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 199)				bitmapData->_hx___framebufferContext = this->_hx___framebufferContext;
HXLINE( 200)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 201)				bitmapData->_hx___textureContext = this->_hx___textureContext;
HXLINE( 202)				bitmapData->_hx___isValid = true;
HXLINE( 204)				return bitmapData;
            			}
            			else {
HXLINE( 208)				 ::lime::graphics::Image _hx_tmp1 = this->image->clone();
HXDLIN( 208)				return ::openfl::display::BitmapData_obj::fromImage(_hx_tmp1,this->transparent);
            			}
            		}
HXLINE( 186)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_215_colorTransform)
HXLINE( 217)		if (!(this->readable)) {
HXLINE( 217)			return;
            		}
HXLINE( 219)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 219)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 219)		_hx_tmp->colorTransform(_hx_tmp1,colorTransform->_hx___toLimeColorMatrix());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_224_compare)
HXLINE( 226)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 228)			return (int)0;
            		}
            		else {
HXLINE( 230)			if (hx::IsNull( otherBitmapData )) {
HXLINE( 232)				return (int)-1;
            			}
            			else {
HXLINE( 234)				bool _hx_tmp;
HXDLIN( 234)				if ((this->readable != false)) {
HXLINE( 234)					_hx_tmp = (otherBitmapData->readable == false);
            				}
            				else {
HXLINE( 234)					_hx_tmp = true;
            				}
HXDLIN( 234)				if (_hx_tmp) {
HXLINE( 236)					return (int)-2;
            				}
            				else {
HXLINE( 238)					if ((this->width != otherBitmapData->width)) {
HXLINE( 240)						return (int)-3;
            					}
            					else {
HXLINE( 242)						if ((this->height != otherBitmapData->height)) {
HXLINE( 244)							return (int)-4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 248)		bool _hx_tmp1;
HXDLIN( 248)		bool _hx_tmp2;
HXDLIN( 248)		if (hx::IsNotNull( this->image )) {
HXLINE( 248)			_hx_tmp2 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 248)			_hx_tmp2 = false;
            		}
HXDLIN( 248)		if (_hx_tmp2) {
HXLINE( 248)			int _hx_tmp3 = this->image->get_format();
HXDLIN( 248)			_hx_tmp1 = (_hx_tmp3 == otherBitmapData->image->get_format());
            		}
            		else {
HXLINE( 248)			_hx_tmp1 = false;
            		}
HXDLIN( 248)		if (_hx_tmp1) {
HXLINE( 250)			 ::lime::utils::ArrayBufferView bytes = this->image->get_data();
HXLINE( 251)			 ::lime::utils::ArrayBufferView otherBytes = otherBitmapData->image->get_data();
HXLINE( 252)			bool equal = true;
HXLINE( 254)			{
HXLINE( 254)				int _g1 = (int)0;
HXDLIN( 254)				int _g = bytes->length;
HXDLIN( 254)				while((_g1 < _g)){
HXLINE( 254)					_g1 = (_g1 + (int)1);
HXDLIN( 254)					int i = (_g1 - (int)1);
HXLINE( 256)					int a = ((int)::__hxcpp_memory_get_byte(bytes->buffer->b,(bytes->byteOffset + i)) & (int)(int)255);
HXDLIN( 256)					if (hx::IsNotEq( a,((int)::__hxcpp_memory_get_byte(otherBytes->buffer->b,(otherBytes->byteOffset + i)) & (int)(int)255) )) {
HXLINE( 258)						equal = false;
HXLINE( 259)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 264)			if (equal) {
HXLINE( 266)				return (int)0;
            			}
            		}
HXLINE( 272)		 ::openfl::display::BitmapData bitmapData = null();
HXLINE( 273)		bool foundDifference;
HXDLIN( 273)		int pixel;
HXDLIN( 273)		int otherPixel;
HXDLIN( 273)		int comparePixel;
HXDLIN( 273)		int r;
HXDLIN( 273)		int g;
HXDLIN( 273)		int b;
HXDLIN( 273)		int a1;
HXLINE( 275)		{
HXLINE( 275)			int _g11 = (int)0;
HXDLIN( 275)			int _g2 = this->height;
HXDLIN( 275)			while((_g11 < _g2)){
HXLINE( 275)				_g11 = (_g11 + (int)1);
HXDLIN( 275)				int y = (_g11 - (int)1);
HXLINE( 277)				{
HXLINE( 277)					int _g3 = (int)0;
HXDLIN( 277)					int _g21 = this->width;
HXDLIN( 277)					while((_g3 < _g21)){
HXLINE( 277)						_g3 = (_g3 + (int)1);
HXDLIN( 277)						int x = (_g3 - (int)1);
HXLINE( 279)						foundDifference = false;
HXLINE( 281)						pixel = this->getPixel32(x,y);
HXLINE( 282)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 283)						comparePixel = (int)0;
HXLINE( 285)						if ((pixel != otherPixel)) {
HXLINE( 287)							r = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)16) & (int)(int)255));
HXLINE( 288)							g = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)8) & (int)(int)255));
HXLINE( 289)							b = (((int)pixel & (int)(int)255) - ((int)otherPixel & (int)(int)255));
HXLINE( 291)							if ((r < (int)0)) {
HXLINE( 291)								r = (r * (int)-1);
            							}
HXLINE( 292)							if ((g < (int)0)) {
HXLINE( 292)								g = (g * (int)-1);
            							}
HXLINE( 293)							if ((b < (int)0)) {
HXLINE( 293)								b = (b * (int)-1);
            							}
HXLINE( 295)							bool _hx_tmp4;
HXDLIN( 295)							bool _hx_tmp5;
HXDLIN( 295)							if ((r == (int)0)) {
HXLINE( 295)								_hx_tmp5 = (g == (int)0);
            							}
            							else {
HXLINE( 295)								_hx_tmp5 = false;
            							}
HXDLIN( 295)							if (_hx_tmp5) {
HXLINE( 295)								_hx_tmp4 = (b == (int)0);
            							}
            							else {
HXLINE( 295)								_hx_tmp4 = false;
            							}
HXDLIN( 295)							if (_hx_tmp4) {
HXLINE( 297)								a1 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)24) & (int)(int)255));
HXLINE( 299)								if ((a1 != (int)0)) {
HXLINE( 301)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)(int)16711680) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 302)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)(int)65280) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 303)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 304)									comparePixel = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 306)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 312)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 313)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 314)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
HXLINE( 315)								comparePixel = ((int)((int)((int)(int)-16777216 | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 317)								foundDifference = true;
            							}
            						}
HXLINE( 323)						if (foundDifference) {
HXLINE( 325)							if (hx::IsNull( bitmapData )) {
HXLINE( 327)								bool bitmapData1;
HXDLIN( 327)								if (!(this->transparent)) {
HXLINE( 327)									bitmapData1 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 327)									bitmapData1 = true;
            								}
HXDLIN( 327)								bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,bitmapData1,(int)0);
            							}
HXLINE( 331)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 339)		if (hx::IsNull( bitmapData )) {
HXLINE( 341)			return (int)0;
            		}
HXLINE( 345)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_350_copyChannel)
HXLINE( 352)		if (!(this->readable)) {
HXLINE( 352)			return;
            		}
HXLINE( 354)		 ::lime::graphics::ImageChannel sourceChannel1;
HXDLIN( 354)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 354)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 354)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 354)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 354)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 360)				return;
            			}
            		}
HXLINE( 364)		 ::lime::graphics::ImageChannel destChannel1;
HXDLIN( 364)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 364)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 364)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 364)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 364)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 370)				return;
            			}
            		}
HXLINE( 374)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 374)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 374)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 374)		_hx_tmp->copyChannel(sourceBitmapData1,_hx_tmp1,destPoint->_hx___toLimeVector2(),sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_379_copyPixels)
HXLINE( 381)		bool _hx_tmp;
HXDLIN( 381)		if (!(!(this->readable))) {
HXLINE( 381)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 381)			_hx_tmp = true;
            		}
HXDLIN( 381)		if (_hx_tmp) {
HXLINE( 381)			return;
            		}
HXLINE( 383)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 383)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 383)		 ::lime::math::Rectangle _hx_tmp2 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 383)		 ::lime::math::Vector2 _hx_tmp3 = destPoint->_hx___toLimeVector2();
HXDLIN( 383)		 ::lime::graphics::Image _hx_tmp4;
HXDLIN( 383)		if (hx::IsNotNull( alphaBitmapData )) {
HXLINE( 383)			_hx_tmp4 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 383)			_hx_tmp4 = null();
            		}
HXDLIN( 383)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 383)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 383)			_hx_tmp5 = alphaPoint->_hx___toLimeVector2();
            		}
            		else {
HXLINE( 383)			_hx_tmp5 = null();
            		}
HXDLIN( 383)		_hx_tmp1->copyPixels(sourceBitmapData1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_388_dispose)
HXLINE( 390)		this->image = null();
HXLINE( 392)		this->width = (int)0;
HXLINE( 393)		this->height = (int)0;
HXLINE( 394)		this->rect = null();
HXLINE( 396)		this->_hx___isValid = false;
HXLINE( 397)		this->readable = false;
HXLINE( 399)		this->_hx___surface = null();
HXLINE( 401)		this->_hx___buffer = null();
HXLINE( 402)		this->_hx___framebuffer = null();
HXLINE( 403)		this->_hx___framebufferContext = null();
HXLINE( 404)		this->_hx___texture = null();
HXLINE( 405)		this->_hx___textureContext = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::disposeImage(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_432_disposeImage)
HXDLIN( 432)		this->readable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,disposeImage,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_437_draw)
HXLINE( 439)		if (hx::IsNull( matrix )) {
HXLINE( 441)			matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 443)			if (hx::IsNotNull( ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__transform",4c,76,bf,73),hx::paccDynamic)) ) )) {
HXLINE( 445)				matrix->copyFrom(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__transform",4c,76,bf,73),hx::paccDynamic)) ));
HXLINE( 446)				matrix->tx = (int)0;
HXLINE( 447)				matrix->ty = (int)0;
            			}
            		}
HXLINE( 453)		if (!(this->readable)) {
HXLINE( 455)			if (hx::IsNotNull( ::lime::graphics::opengl::GL_obj::context )) {
HXLINE( 457)				 ::lime::_backend::native::NativeGLRenderContext gl = ::lime::graphics::opengl::GL_obj::context;
HXLINE( 459)				int gl1 = gl->FRAMEBUFFER;
HXDLIN( 459)				gl->bindFramebuffer(gl1,this->_hx___getFramebuffer(gl));
HXLINE( 460)				gl->viewport((int)0,(int)0,this->width,this->height);
HXLINE( 462)				 ::openfl::_internal::renderer::opengl::GLRenderer renderer =  ::openfl::_internal::renderer::opengl::GLRenderer_obj::__alloc( HX_CTX ,::openfl::Lib_obj::current->stage,gl,false);
HXLINE( 463)				renderer->resize(this->width,this->height);
HXLINE( 465)				 ::openfl::_internal::renderer::RenderSession renderSession = renderer->renderSession;
HXLINE( 466)				renderSession->shaderManager = ::openfl::Lib_obj::current->stage->_hx___renderer->renderSession->shaderManager;
HXLINE( 468)				 ::openfl::geom::Matrix matrixCache = ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__worldTransform",da,a7,d8,9a),hx::paccDynamic)) );
HXLINE( 469)				::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrix);
HXLINE( 470)				::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,false);
HXLINE( 471)				::openfl::display::IBitmapDrawable_obj::_hx___renderGL(source,renderer->renderSession);
HXLINE( 472)				::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrixCache);
HXLINE( 473)				::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,true);
HXLINE( 475)				gl->bindFramebuffer(gl->FRAMEBUFFER,null());
            			}
            		}
            		else {
HXLINE( 549)			if (hx::IsEq( source,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 551)				source = this->clone();
            			}
HXLINE( 555)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 557)				 ::Dynamic copy = ::Reflect_obj::getProperty(source,HX_("width",06,b6,62,ca));
HXDLIN( 557)				 ::openfl::display::BitmapData copy1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,copy,::Reflect_obj::getProperty(source,HX_("height",e7,07,4c,02)),true,(int)0);
HXLINE( 558)				copy1->draw(source,null(),null(),null(),null(),null());
HXLINE( 559)				copy1->colorTransform(copy1->rect,colorTransform);
HXLINE( 560)				source = copy1;
            			}
HXLINE( 564)			 ::Dynamic surface = this->getSurface();
HXLINE( 565)			 ::lime::graphics::cairo::Cairo cairo =  ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,surface);
HXLINE( 567)			if (!(smoothing)) {
HXLINE( 569)				cairo->set_antialias((int)1);
            			}
HXLINE( 573)			 ::openfl::_internal::renderer::RenderSession renderSession1 =  ::openfl::_internal::renderer::RenderSession_obj::__alloc( HX_CTX );
HXLINE( 574)			renderSession1->cairo = cairo;
HXLINE( 575)			renderSession1->allowSmoothing = smoothing;
HXLINE( 577)			renderSession1->maskManager =  ::openfl::_internal::renderer::cairo::CairoMaskManager_obj::__alloc( HX_CTX ,renderSession1);
HXLINE( 578)			renderSession1->blendModeManager =  ::openfl::_internal::renderer::cairo::CairoBlendModeManager_obj::__alloc( HX_CTX ,renderSession1);
HXLINE( 580)			if (hx::IsNotNull( clipRect )) {
HXLINE( 582)				 ::openfl::_internal::renderer::AbstractMaskManager renderSession2 = renderSession1->maskManager;
HXDLIN( 582)				renderSession2->pushRect(clipRect, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
            			}
HXLINE( 586)			 ::openfl::geom::Matrix matrixCache1 = ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__worldTransform",da,a7,d8,9a),hx::paccDynamic)) );
HXLINE( 587)			::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrix);
HXLINE( 588)			::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,false);
HXLINE( 589)			::openfl::display::IBitmapDrawable_obj::_hx___renderCairo(source,renderSession1);
HXLINE( 590)			::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrixCache1);
HXLINE( 591)			::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,true);
HXLINE( 593)			if (hx::IsNotNull( clipRect )) {
HXLINE( 595)				renderSession1->maskManager->popRect();
            			}
HXLINE( 599)			::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(surface);
HXLINE( 601)			this->image->dirty = true;
HXLINE( 602)			this->image->version++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing, ::Dynamic quality){
bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_613_drawWithQuality)
HXDLIN( 613)		bool _hx_tmp;
HXDLIN( 613)		if (hx::IsNotEq( quality,(int)2 )) {
HXDLIN( 613)			_hx_tmp = smoothing;
            		}
            		else {
HXDLIN( 613)			_hx_tmp = false;
            		}
HXDLIN( 613)		this->draw(source,matrix,colorTransform,blendMode,clipRect,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_618_encode)
HXLINE( 620)		bool _hx_tmp;
HXDLIN( 620)		if (!(!(this->readable))) {
HXLINE( 620)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 620)			_hx_tmp = true;
            		}
HXDLIN( 620)		if (_hx_tmp) {
HXLINE( 620)			byteArray = null();
HXDLIN( 620)			return byteArray;
            		}
HXLINE( 621)		if (hx::IsNull( byteArray )) {
HXLINE( 621)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 621)			byteArray = this1;
            		}
HXLINE( 623)		 ::lime::graphics::Image image = this->image;
HXLINE( 625)		if (!(rect->equals(this->rect))) {
HXLINE( 627)			 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE( 628)			int _hx_tmp1 = ::Math_obj::round(-(rect->x));
HXDLIN( 628)			matrix->setTo((int)1,(int)0,(int)0,(int)1,_hx_tmp1,::Math_obj::round(-(rect->y)));
HXLINE( 630)			int bitmapData = ::Math_obj::ceil(rect->width);
HXDLIN( 630)			 ::openfl::display::BitmapData bitmapData1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapData,::Math_obj::ceil(rect->height),true,(int)0);
HXLINE( 631)			bitmapData1->draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),null());
HXLINE( 633)			image = bitmapData1->image;
            		}
HXLINE( 637)		if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >())) {
HXLINE( 639)			byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(HX_("png",a9,5c,55,00),null())),null(),null());
HXLINE( 640)			return byteArray;
            		}
            		else {
HXLINE( 642)			if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >())) {
HXLINE( 644)				byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(HX_("jpg",e1,d0,50,00),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality)),null(),null());
HXLINE( 645)				return byteArray;
            			}
            		}
HXLINE( 649)		byteArray = null();
HXDLIN( 649)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_654_fillRect)
HXLINE( 656)		if (hx::IsNull( rect )) {
HXLINE( 656)			return;
            		}
HXLINE( 658)		bool _hx_tmp;
HXDLIN( 658)		if (this->transparent) {
HXLINE( 658)			_hx_tmp = (((int)color & (int)(int)-16777216) == (int)0);
            		}
            		else {
HXLINE( 658)			_hx_tmp = false;
            		}
HXDLIN( 658)		if (_hx_tmp) {
HXLINE( 660)			color = (int)0;
            		}
HXLINE( 664)		if (this->readable) {
HXLINE( 666)			 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 666)			_hx_tmp1->fillRect(rect->_hx___toLimeRectangle(),color,(int)1);
            		}
            		else {
HXLINE( 668)			if (hx::IsNotNull( this->_hx___framebuffer )) {
HXLINE( 670)				 ::lime::_backend::native::NativeGLRenderContext gl = ::lime::graphics::opengl::GL_obj::context;
HXLINE( 671)				int color1 = color;
HXLINE( 672)				bool useScissor = !(this->rect->equals(rect));
HXLINE( 674)				gl->bindFramebuffer(gl->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE( 676)				if (useScissor) {
HXLINE( 678)					gl->enable(gl->SCISSOR_TEST);
HXLINE( 679)					int _hx_tmp2 = ::Math_obj::round(rect->x);
HXDLIN( 679)					int _hx_tmp3 = ::Math_obj::round(rect->y);
HXDLIN( 679)					int _hx_tmp4 = ::Math_obj::round(rect->width);
HXDLIN( 679)					gl->scissor(_hx_tmp2,_hx_tmp3,_hx_tmp4,::Math_obj::round(rect->height));
            				}
HXLINE( 683)				gl->clearColor(((Float)((int)hx::UShr(color1,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color1 & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 684)				gl->clear(gl->COLOR_BUFFER_BIT);
HXLINE( 686)				if (useScissor) {
HXLINE( 688)					gl->disable(gl->SCISSOR_TEST);
            				}
HXLINE( 692)				gl->bindFramebuffer(gl->FRAMEBUFFER,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_699_floodFill)
HXLINE( 701)		if (!(this->readable)) {
HXLINE( 701)			return;
            		}
HXLINE( 702)		this->image->floodFill(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_776_generateFilterRect)
HXDLIN( 776)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::lime::graphics::opengl::GLObject BitmapData_obj::getBuffer( ::lime::_backend::native::NativeGLRenderContext gl,Float alpha){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_781_getBuffer)
HXLINE( 783)		bool _hx_tmp;
HXDLIN( 783)		if (hx::IsNotNull( this->_hx___buffer )) {
HXLINE( 783)			_hx_tmp = hx::IsNotEq( this->_hx___bufferContext,gl );
            		}
            		else {
HXLINE( 783)			_hx_tmp = true;
            		}
HXDLIN( 783)		if (_hx_tmp) {
HXLINE( 807)			int uvWidth = (int)1;
HXLINE( 808)			int uvHeight = (int)1;
HXLINE( 812)			::cpp::VirtualArray array = ::Array_obj< Float >::__new(24)->init(0,this->width)->init(1,this->height)->init(2,(int)0)->init(3,uvWidth)->init(4,uvHeight)->init(5,alpha)->init(6,(int)0)->init(7,this->height)->init(8,(int)0)->init(9,(int)0)->init(10,uvHeight)->init(11,alpha)->init(12,this->width)->init(13,(int)0)->init(14,(int)0)->init(15,uvWidth)->init(16,(int)0)->init(17,alpha)->init(18,(int)0)->init(19,(int)0)->init(20,(int)0)->init(21,(int)0)->init(22,(int)0)->init(23,alpha);
HXDLIN( 812)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 812)			if (hx::IsNotNull( array )) {
HXLINE( 812)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 812)				_this->byteOffset = (int)0;
HXDLIN( 812)				_this->length = array->get_length();
HXDLIN( 812)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 812)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 812)				_this->buffer = this2;
HXDLIN( 812)				_this->copyFromArray(array,null());
HXDLIN( 812)				this1 = _this;
            			}
            			else {
HXLINE( 812)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 812)			this->_hx___bufferData = this1;
HXLINE( 821)			this->_hx___bufferAlpha = alpha;
HXLINE( 822)			this->_hx___bufferContext = gl;
HXLINE( 823)			this->_hx___buffer = gl->createBuffer();
HXLINE( 825)			gl->bindBuffer(gl->ARRAY_BUFFER,this->_hx___buffer);
HXLINE( 826)			int gl1 = gl->ARRAY_BUFFER;
HXDLIN( 826)			int _hx_tmp1 = this->_hx___bufferData->byteLength;
HXDLIN( 826)			gl->bufferData(gl1,_hx_tmp1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___bufferData),gl->STATIC_DRAW);
            		}
            		else {
HXLINE( 829)			if ((this->_hx___bufferAlpha != alpha)) {
HXLINE( 831)				{
HXLINE( 831)					 ::lime::utils::ArrayBufferView this3 = this->_hx___bufferData;
HXDLIN( 831)					::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + (int)20),alpha);
            				}
HXLINE( 832)				{
HXLINE( 832)					 ::lime::utils::ArrayBufferView this4 = this->_hx___bufferData;
HXDLIN( 832)					::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + (int)44),alpha);
            				}
HXLINE( 833)				{
HXLINE( 833)					 ::lime::utils::ArrayBufferView this5 = this->_hx___bufferData;
HXDLIN( 833)					::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + (int)68),alpha);
            				}
HXLINE( 834)				{
HXLINE( 834)					 ::lime::utils::ArrayBufferView this6 = this->_hx___bufferData;
HXDLIN( 834)					::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + (int)92),alpha);
            				}
HXLINE( 835)				this->_hx___bufferAlpha = alpha;
HXLINE( 837)				gl->bindBuffer(gl->ARRAY_BUFFER,this->_hx___buffer);
HXLINE( 838)				int gl2 = gl->ARRAY_BUFFER;
HXDLIN( 838)				int _hx_tmp2 = this->_hx___bufferData->byteLength;
HXDLIN( 838)				gl->bufferData(gl2,_hx_tmp2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___bufferData),gl->STATIC_DRAW);
            			}
            		}
HXLINE( 842)		return this->_hx___buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_847_getColorBoundsRect)
HXLINE( 849)		if (!(this->readable)) {
HXLINE( 849)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            		}
HXLINE( 851)		bool _hx_tmp;
HXDLIN( 851)		if (!(!(this->transparent))) {
HXLINE( 851)			_hx_tmp = (((int)((int)mask >> (int)(int)24) & (int)(int)255) > (int)0);
            		}
            		else {
HXLINE( 851)			_hx_tmp = true;
            		}
HXDLIN( 851)		if (_hx_tmp) {
HXLINE( 853)			int color1 = color;
HXLINE( 854)			if ((((int)hx::UShr(color1,(int)24) & (int)(int)255) == (int)0)) {
HXLINE( 854)				color1 = (int)0;
            			}
            		}
HXLINE( 858)		 ::lime::math::Rectangle rect = this->image->getColorBoundsRect(mask,color,findColor,(int)1);
HXLINE( 859)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_864_getPixel)
HXLINE( 866)		if (!(this->readable)) {
HXLINE( 866)			return (int)0;
            		}
HXLINE( 867)		return this->image->getPixel(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_872_getPixel32)
HXLINE( 874)		if (!(this->readable)) {
HXLINE( 874)			return (int)0;
            		}
HXLINE( 875)		return this->image->getPixel32(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_880_getPixels)
HXLINE( 882)		if (!(this->readable)) {
HXLINE( 882)			return null();
            		}
HXLINE( 883)		if (hx::IsNull( rect )) {
HXLINE( 883)			rect = this->rect;
            		}
HXLINE( 884)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 884)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp->getPixels(rect->_hx___toLimeRectangle(),(int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_889_getSurface)
HXLINE( 891)		if (!(this->readable)) {
HXLINE( 891)			return null();
            		}
HXLINE( 893)		if (hx::IsNull( this->_hx___surface )) {
HXLINE( 896)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE( 900)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::lime::graphics::opengl::GLObject BitmapData_obj::getTexture( ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_905_getTexture)
HXLINE( 907)		if (!(this->_hx___isValid)) {
HXLINE( 907)			return null();
            		}
HXLINE( 909)		bool _hx_tmp;
HXDLIN( 909)		if (hx::IsNotNull( this->_hx___texture )) {
HXLINE( 909)			_hx_tmp = hx::IsNotEq( this->_hx___textureContext,gl );
            		}
            		else {
HXLINE( 909)			_hx_tmp = true;
            		}
HXDLIN( 909)		if (_hx_tmp) {
HXLINE( 911)			this->_hx___textureContext = gl;
HXLINE( 912)			this->_hx___texture = gl->createTexture();
HXLINE( 914)			gl->bindTexture(gl->TEXTURE_2D,this->_hx___texture);
HXLINE( 915)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->CLAMP_TO_EDGE);
HXLINE( 916)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->CLAMP_TO_EDGE);
HXLINE( 917)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->NEAREST);
HXLINE( 918)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST);
HXLINE( 919)			this->_hx___textureVersion = (int)-1;
            		}
HXLINE( 927)		bool _hx_tmp1;
HXDLIN( 927)		if (hx::IsNotNull( this->image )) {
HXLINE( 927)			_hx_tmp1 = (this->image->version != this->_hx___textureVersion);
            		}
            		else {
HXLINE( 927)			_hx_tmp1 = false;
            		}
HXDLIN( 927)		if (_hx_tmp1) {
HXLINE( 929)			int internalFormat;
HXDLIN( 929)			int format;
HXLINE( 931)			if (hx::IsNotNull( this->_hx___surface )) {
HXLINE( 933)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE( 937)			if ((this->image->buffer->bitsPerPixel == (int)1)) {
HXLINE( 939)				internalFormat = gl->ALPHA;
HXLINE( 940)				format = gl->ALPHA;
            			}
            			else {
HXLINE( 944)				if (hx::IsNull( ::openfl::display::BitmapData_obj::_hx___supportsBGRA )) {
HXLINE( 946)					::openfl::display::BitmapData_obj::_hx___textureInternalFormat = gl->RGBA;
HXLINE( 948)					 ::Dynamic bgraExtension = null();
HXLINE( 950)					bgraExtension = gl->getExtension(HX_("EXT_bgra",72,74,1a,40));
HXLINE( 951)					if (hx::IsNull( bgraExtension )) {
HXLINE( 952)						bgraExtension = gl->getExtension(HX_("EXT_texture_format_BGRA8888",5a,d2,bd,b2));
            					}
HXLINE( 953)					if (hx::IsNull( bgraExtension )) {
HXLINE( 954)						bgraExtension = gl->getExtension(HX_("APPLE_texture_format_BGRA8888",13,8a,88,e2));
            					}
HXLINE( 957)					if (hx::IsNotNull( bgraExtension )) {
HXLINE( 959)						::openfl::display::BitmapData_obj::_hx___supportsBGRA = true;
HXLINE( 960)						::openfl::display::BitmapData_obj::_hx___textureFormat = ( (int)(bgraExtension->__Field(HX_("BGRA_EXT",36,94,c4,bc),hx::paccDynamic)) );
HXLINE( 963)						if (hx::IsEq( gl->type,::lime::graphics::opengl::GLContextType_obj::GLES_dyn() )) {
HXLINE( 965)							::openfl::display::BitmapData_obj::_hx___textureInternalFormat = ( (int)(bgraExtension->__Field(HX_("BGRA_EXT",36,94,c4,bc),hx::paccDynamic)) );
            						}
            					}
            					else {
HXLINE( 972)						::openfl::display::BitmapData_obj::_hx___supportsBGRA = false;
HXLINE( 973)						::openfl::display::BitmapData_obj::_hx___textureFormat = gl->RGBA;
            					}
            				}
HXLINE( 979)				internalFormat = ::openfl::display::BitmapData_obj::_hx___textureInternalFormat;
HXLINE( 980)				format = ::openfl::display::BitmapData_obj::_hx___textureFormat;
            			}
HXLINE( 984)			gl->bindTexture(gl->TEXTURE_2D,this->_hx___texture);
HXLINE( 986)			 ::lime::graphics::Image textureImage = this->image;
HXLINE(1028)			bool _hx_tmp2;
HXDLIN(1028)			if (!(textureImage->get_premultiplied())) {
HXLINE(1028)				_hx_tmp2 = textureImage->get_transparent();
            			}
            			else {
HXLINE(1028)				_hx_tmp2 = false;
            			}
HXDLIN(1028)			if (_hx_tmp2) {
HXLINE(1030)				textureImage = textureImage->clone();
HXLINE(1031)				textureImage->set_premultiplied(true);
            			}
HXLINE(1038)			int gl1 = gl->TEXTURE_2D;
HXDLIN(1038)			int textureImage1 = textureImage->buffer->width;
HXDLIN(1038)			int textureImage2 = textureImage->buffer->height;
HXDLIN(1038)			int gl2 = gl->UNSIGNED_BYTE;
HXDLIN(1038)			gl->texImage2D(gl1,(int)0,internalFormat,textureImage1,textureImage2,(int)0,format,gl2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(textureImage->get_data()));
HXLINE(1042)			gl->bindTexture(gl->TEXTURE_2D,null());
HXLINE(1043)			this->_hx___textureVersion = this->image->version;
            		}
HXLINE(1047)		bool _hx_tmp3;
HXDLIN(1047)		if (!(this->readable)) {
HXLINE(1047)			_hx_tmp3 = hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(1047)			_hx_tmp3 = false;
            		}
HXDLIN(1047)		if (_hx_tmp3) {
HXLINE(1049)			this->_hx___surface = null();
HXLINE(1050)			this->image = null();
            		}
HXLINE(1054)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1059_getVector)
HXLINE(1061)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(1062)		int length = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels) / (Float)(int)4));
HXLINE(1063)		 ::openfl::_Vector::IntVector result =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,true,null());
HXLINE(1065)		{
HXLINE(1065)			int _g1 = (int)0;
HXDLIN(1065)			int _g = length;
HXDLIN(1065)			while((_g1 < _g)){
HXLINE(1065)				_g1 = (_g1 + (int)1);
HXDLIN(1065)				int i = (_g1 - (int)1);
HXLINE(1067)				result->set(i,pixels->readUnsignedInt());
            			}
            		}
HXLINE(1071)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1076_histogram)
HXLINE(1078)		 ::openfl::geom::Rectangle rect;
HXDLIN(1078)		if (hx::IsNotNull( hRect )) {
HXLINE(1078)			rect = hRect;
            		}
            		else {
HXLINE(1078)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            		}
HXLINE(1079)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(1080)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1080)		{
HXLINE(1080)			int _g1 = (int)0;
HXDLIN(1080)			while((_g1 < (int)4)){
HXLINE(1080)				_g1 = (_g1 + (int)1);
HXDLIN(1080)				int i = (_g1 - (int)1);
HXDLIN(1080)				::Array< int > _g2 = ::Array_obj< int >::__new(0);
HXDLIN(1080)				{
HXLINE(1080)					int _g3 = (int)0;
HXDLIN(1080)					while((_g3 < (int)256)){
HXLINE(1080)						_g3 = (_g3 + (int)1);
HXDLIN(1080)						int j = (_g3 - (int)1);
HXDLIN(1080)						_g2->push((int)0);
            					}
            				}
HXDLIN(1080)				_g->push(_g2);
            			}
            		}
HXDLIN(1080)		::Array< ::Dynamic> result = _g;
HXLINE(1082)		{
HXLINE(1082)			int _g21 = (int)0;
HXDLIN(1082)			int _g11 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(1082)			while((_g21 < _g11)){
HXLINE(1082)				_g21 = (_g21 + (int)1);
HXDLIN(1082)				int i1 = (_g21 - (int)1);
HXLINE(1084)				++result->__get(hx::Mod(i1,(int)4)).StaticCast< ::Array< int > >()[pixels->readUnsignedByte()];
            			}
            		}
HXLINE(1088)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< int >  __o_secondAlphaThreshold){
int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1093_hitTest)
HXLINE(1095)		if (!(this->readable)) {
HXLINE(1095)			return false;
            		}
HXLINE(1097)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >())) {
HXLINE(1099)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->bitmapData;
            		}
HXLINE(1103)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >())) {
HXLINE(1105)			 ::openfl::geom::Point secondPoint = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE(1107)			int x = ::Std_obj::_hx_int((secondPoint->x - firstPoint->x));
HXLINE(1108)			int y = ::Std_obj::_hx_int((secondPoint->y - firstPoint->y));
HXLINE(1110)			if (this->rect->contains(x,y)) {
HXLINE(1112)				int pixel = this->getPixel32(x,y);
HXLINE(1114)				if ((((int)((int)pixel >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1116)					return true;
            				}
            			}
            		}
            		else {
HXLINE(1122)			if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE(1124)				 ::openfl::display::BitmapData secondBitmapData = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE(1125)				int x1;
HXDLIN(1125)				int y1;
HXLINE(1127)				if (hx::IsNull( secondBitmapDataPoint )) {
HXLINE(1129)					x1 = (int)0;
HXLINE(1130)					y1 = (int)0;
            				}
            				else {
HXLINE(1134)					x1 = ::Std_obj::_hx_int((secondBitmapDataPoint->x - firstPoint->x));
HXLINE(1135)					y1 = ::Std_obj::_hx_int((secondBitmapDataPoint->y - firstPoint->y));
            				}
HXLINE(1139)				if (this->rect->contains(x1,y1)) {
HXLINE(1141)					 ::openfl::geom::Rectangle hitRect = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE(1142)					int secondBitmapData1 = secondBitmapData->width;
HXDLIN(1142)					Float _hx_tmp = ::Math_obj::min(secondBitmapData1,(this->width - x1));
HXDLIN(1142)					int secondBitmapData2 = secondBitmapData->height;
HXDLIN(1142)					hitRect->setTo(x1,y1,_hx_tmp,::Math_obj::min(secondBitmapData2,(this->height - y1)));
HXLINE(1144)					 ::openfl::utils::ByteArrayData pixels = this->getPixels(hitRect);
HXLINE(1146)					hitRect->offset(-(x1),-(y1));
HXLINE(1147)					 ::openfl::utils::ByteArrayData testPixels = secondBitmapData->getPixels(hitRect);
HXLINE(1149)					int length = ::Std_obj::_hx_int((hitRect->width * hitRect->height));
HXLINE(1150)					int pixel1;
HXDLIN(1150)					int testPixel;
HXLINE(1152)					{
HXLINE(1152)						int _g1 = (int)0;
HXDLIN(1152)						int _g = length;
HXDLIN(1152)						while((_g1 < _g)){
HXLINE(1152)							_g1 = (_g1 + (int)1);
HXDLIN(1152)							int i = (_g1 - (int)1);
HXLINE(1154)							pixel1 = pixels->readUnsignedInt();
HXLINE(1155)							testPixel = testPixels->readUnsignedInt();
HXLINE(1157)							bool _hx_tmp1;
HXDLIN(1157)							if ((((int)((int)pixel1 >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1157)								_hx_tmp1 = (((int)((int)testPixel >> (int)(int)24) & (int)(int)255) > secondAlphaThreshold);
            							}
            							else {
HXLINE(1157)								_hx_tmp1 = false;
            							}
HXDLIN(1157)							if (_hx_tmp1) {
HXLINE(1159)								return true;
            							}
            						}
            					}
HXLINE(1165)					return false;
            				}
            			}
            			else {
HXLINE(1169)				if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >())) {
HXLINE(1171)					 ::openfl::geom::Rectangle secondRectangle = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE(1172)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE(1173)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE(1174)					secondRectangle->_hx___contract((int)0,(int)0,this->width,this->height);
HXLINE(1176)					bool _hx_tmp2;
HXDLIN(1176)					if ((secondRectangle->width > (int)0)) {
HXLINE(1176)						_hx_tmp2 = (secondRectangle->height > (int)0);
            					}
            					else {
HXLINE(1176)						_hx_tmp2 = false;
            					}
HXDLIN(1176)					if (_hx_tmp2) {
HXLINE(1178)						 ::openfl::utils::ByteArrayData pixels1 = this->getPixels(secondRectangle);
HXLINE(1179)						int length1 = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1) / (Float)(int)4));
HXLINE(1180)						int pixel2;
HXLINE(1182)						{
HXLINE(1182)							int _g11 = (int)0;
HXDLIN(1182)							int _g2 = length1;
HXDLIN(1182)							while((_g11 < _g2)){
HXLINE(1182)								_g11 = (_g11 + (int)1);
HXDLIN(1182)								int i1 = (_g11 - (int)1);
HXLINE(1184)								pixel2 = pixels1->readUnsignedInt();
HXLINE(1186)								if ((((int)((int)pixel2 >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1188)									return true;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1198)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1244_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1251_merge)
HXLINE(1253)		bool _hx_tmp;
HXDLIN(1253)		bool _hx_tmp1;
HXDLIN(1253)		bool _hx_tmp2;
HXDLIN(1253)		bool _hx_tmp3;
HXDLIN(1253)		if (!(!(this->readable))) {
HXLINE(1253)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE(1253)			_hx_tmp3 = true;
            		}
HXDLIN(1253)		if (!(_hx_tmp3)) {
HXLINE(1253)			_hx_tmp2 = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE(1253)			_hx_tmp2 = true;
            		}
HXDLIN(1253)		if (!(_hx_tmp2)) {
HXLINE(1253)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1253)			_hx_tmp1 = true;
            		}
HXDLIN(1253)		if (!(_hx_tmp1)) {
HXLINE(1253)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1253)			_hx_tmp = true;
            		}
HXDLIN(1253)		if (_hx_tmp) {
HXLINE(1253)			return;
            		}
HXLINE(1254)		 ::lime::graphics::Image _hx_tmp4 = this->image;
HXDLIN(1254)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(1254)		 ::lime::math::Rectangle _hx_tmp5 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1254)		_hx_tmp4->merge(sourceBitmapData1,_hx_tmp5,destPoint->_hx___toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(int randomSeed,hx::Null< int >  __o_low,hx::Null< int >  __o_high,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,randomSeed1) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1266_noise)
HXLINE(1267)			randomSeed1[(int)0] = ((randomSeed1->__get((int)0) * (int)1103515245) + (int)12345);
HXLINE(1268)			return hx::Mod(::Std_obj::_hx_int(::Math_obj::abs(((Float)randomSeed1->__get((int)0) / (Float)(int)65536))),(int)32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

int low = __o_low.Default(0);
int high = __o_high.Default(255);
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1259_noise)
HXDLIN(1259)		::Array< int > randomSeed1 = ::Array_obj< int >::__new(1)->init(0,randomSeed);
HXLINE(1261)		if (!(this->readable)) {
HXLINE(1261)			return;
            		}
HXLINE(1265)		 ::Dynamic func =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(1264)		 ::Dynamic rand = func;
HXLINE(1271)		rand();
HXLINE(1274)		int range = (high - low);
HXLINE(1275)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(1275)		 ::openfl::utils::ByteArrayData data = this1;
HXLINE(1277)		bool redChannel = (((int)channelOptions & (int)(int)1) == (int)1);
HXLINE(1278)		bool greenChannel = (((int)((int)channelOptions & (int)(int)2) >> (int)(int)1) == (int)1);
HXLINE(1279)		bool blueChannel = (((int)((int)channelOptions & (int)(int)4) >> (int)(int)2) == (int)1);
HXLINE(1280)		bool alphaChannel = (((int)((int)channelOptions & (int)(int)8) >> (int)(int)3) == (int)1);
HXLINE(1282)		{
HXLINE(1282)			int _g1 = (int)0;
HXDLIN(1282)			int _g = this->height;
HXDLIN(1282)			while((_g1 < _g)){
HXLINE(1282)				_g1 = (_g1 + (int)1);
HXDLIN(1282)				int y = (_g1 - (int)1);
HXLINE(1284)				{
HXLINE(1284)					int _g3 = (int)0;
HXDLIN(1284)					int _g2 = this->width;
HXDLIN(1284)					while((_g3 < _g2)){
HXLINE(1284)						_g3 = (_g3 + (int)1);
HXDLIN(1284)						int x = (_g3 - (int)1);
HXLINE(1287)						int red = (int)0;
HXLINE(1288)						int blue = (int)0;
HXLINE(1289)						int green = (int)0;
HXLINE(1290)						int alpha = (int)255;
HXLINE(1292)						if (grayScale) {
HXLINE(1294)							blue = (low + hx::Mod(( (int)(rand()) ),range));
HXDLIN(1294)							green = blue;
HXDLIN(1294)							red = green;
HXLINE(1295)							alpha = (int)255;
            						}
            						else {
HXLINE(1299)							if (redChannel) {
HXLINE(1299)								red = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(1300)							if (greenChannel) {
HXLINE(1300)								green = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(1301)							if (blueChannel) {
HXLINE(1301)								blue = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(1302)							if (alphaChannel) {
HXLINE(1302)								alpha = (low + hx::Mod(( (int)(rand()) ),range));
            							}
            						}
HXLINE(1305)						int rgb = alpha;
HXLINE(1306)						rgb = (((int)rgb << (int)(int)8) + red);
HXLINE(1307)						rgb = (((int)rgb << (int)(int)8) + green);
HXLINE(1308)						rgb = (((int)rgb << (int)(int)8) + blue);
HXLINE(1310)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< int > redArray,::Array< int > greenArray,::Array< int > blueArray,::Array< int > alphaArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1317_paletteMap)
HXLINE(1319)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(1320)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(1322)		 ::openfl::utils::ByteArrayData pixels = sourceBitmapData->getPixels(sourceRect);
HXLINE(1324)		int pixelValue;
HXDLIN(1324)		int r;
HXDLIN(1324)		int g;
HXDLIN(1324)		int b;
HXDLIN(1324)		int a;
HXDLIN(1324)		int color;
HXLINE(1326)		{
HXLINE(1326)			int _g1 = (int)0;
HXDLIN(1326)			int _g = (sh * sw);
HXDLIN(1326)			while((_g1 < _g)){
HXLINE(1326)				_g1 = (_g1 + (int)1);
HXDLIN(1326)				int i = (_g1 - (int)1);
HXLINE(1328)				pixelValue = pixels->readUnsignedInt();
HXLINE(1330)				if (hx::IsNull( alphaArray )) {
HXLINE(1330)					a = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE(1330)					a = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE(1331)				if (hx::IsNull( redArray )) {
HXLINE(1331)					r = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE(1331)					r = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE(1332)				if (hx::IsNull( greenArray )) {
HXLINE(1332)					g = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE(1332)					g = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE(1333)				if (hx::IsNull( blueArray )) {
HXLINE(1333)					b = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE(1333)					b = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE(1335)				color = (((a + r) + g) + b);
HXLINE(1337)				pixels->position = (i * (int)4);
HXLINE(1338)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(1342)		pixels->position = (int)0;
HXLINE(1343)		 ::openfl::geom::Rectangle destRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sw,sh);
HXLINE(1344)		this->setPixels(destRect,pixels);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,int numOctaves,int randomSeed,bool stitch,bool fractalNoise,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale,::Array< ::Dynamic> offsets){
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1348_perlinNoise)
HXLINE(1350)		if (!(this->readable)) {
HXLINE(1350)			return;
            		}
HXLINE(1351)		 ::openfl::_internal::utils::PerlinNoise noise =  ::openfl::_internal::utils::PerlinNoise_obj::__alloc( HX_CTX ,randomSeed,numOctaves,((Float)0.01));
HXLINE(1352)		noise->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1357_scroll)
HXLINE(1359)		if (!(this->readable)) {
HXLINE(1359)			return;
            		}
HXLINE(1360)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1365_setPixel)
HXLINE(1367)		if (!(this->readable)) {
HXLINE(1367)			return;
            		}
HXLINE(1368)		this->image->setPixel(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1373_setPixel32)
HXLINE(1375)		if (!(this->readable)) {
HXLINE(1375)			return;
            		}
HXLINE(1376)		this->image->setPixel32(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1381_setPixels)
HXLINE(1383)		bool _hx_tmp;
HXDLIN(1383)		if (!(!(this->readable))) {
HXLINE(1383)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1383)			_hx_tmp = true;
            		}
HXDLIN(1383)		if (_hx_tmp) {
HXLINE(1383)			return;
            		}
HXLINE(1384)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN(1384)		 ::lime::math::Rectangle _hx_tmp2 = rect->_hx___toLimeRectangle();
HXDLIN(1384)		_hx_tmp1->setPixels(_hx_tmp2,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1389_setVector)
HXLINE(1391)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(1391)		 ::openfl::utils::ByteArrayData byteArray = this1;
HXLINE(1392)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(inputVector->get_length() * (int)4));
HXLINE(1394)		{
HXLINE(1394)			int _g = (int)0;
HXDLIN(1394)			while((_g < inputVector->get_length())){
HXLINE(1394)				int color = inputVector->get(_g);
HXDLIN(1394)				_g = (_g + (int)1);
HXLINE(1396)				byteArray->writeUnsignedInt(color);
            			}
            		}
HXLINE(1400)		byteArray->position = (int)0;
HXLINE(1401)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1406_threshold)
HXLINE(1408)		bool _hx_tmp;
HXDLIN(1408)		bool _hx_tmp1;
HXDLIN(1408)		bool _hx_tmp2;
HXDLIN(1408)		bool _hx_tmp3;
HXDLIN(1408)		bool _hx_tmp4;
HXDLIN(1408)		bool _hx_tmp5;
HXDLIN(1408)		if (hx::IsNotNull( sourceBitmapData )) {
HXLINE(1408)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1408)			_hx_tmp5 = true;
            		}
HXDLIN(1408)		if (!(_hx_tmp5)) {
HXLINE(1408)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1408)			_hx_tmp4 = true;
            		}
HXDLIN(1408)		if (!(_hx_tmp4)) {
HXLINE(1408)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(1408)			_hx_tmp3 = true;
            		}
HXDLIN(1408)		if (!(_hx_tmp3)) {
HXLINE(1408)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(1408)			_hx_tmp2 = true;
            		}
HXDLIN(1408)		if (!(_hx_tmp2)) {
HXLINE(1408)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(1408)			_hx_tmp1 = true;
            		}
HXDLIN(1408)		if (!(_hx_tmp1)) {
HXLINE(1408)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(1408)			_hx_tmp = true;
            		}
HXDLIN(1408)		if (_hx_tmp) {
HXLINE(1408)			return (int)0;
            		}
HXLINE(1410)		 ::lime::graphics::Image _hx_tmp6 = this->image;
HXDLIN(1410)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(1410)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1410)		return _hx_tmp6->threshold(sourceBitmapData1,_hx_tmp7,destPoint->_hx___toLimeVector2(),operation,threshold,color,mask,copySource,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1415_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1422___applyAlpha)
HXLINE(1429)		 ::lime::utils::ArrayBufferView data = this->image->buffer->data;
HXLINE(1431)		{
HXLINE(1431)			int _g1 = (int)0;
HXDLIN(1431)			int _g = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(1431)			while((_g1 < _g)){
HXLINE(1431)				_g1 = (_g1 + (int)1);
HXDLIN(1431)				int i = (_g1 - (int)1);
HXLINE(1433)				{
HXLINE(1433)					int val = alpha->readUnsignedByte();
HXDLIN(1433)					{
HXLINE(1433)						int data1 = data->byteOffset;
HXDLIN(1433)						::__hxcpp_memory_set_byte(data->buffer->b,(data1 + ((i * (int)4) + (int)3)),val);
            					}
            				}
            			}
            		}
HXLINE(1437)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1446___fromBase64)
HXLINE(1446)			_gthis->_hx___fromImage(image);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1442___fromBase64)
HXDLIN(1442)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(1444)		::lime::graphics::Image_obj::loadFromBase64(base64,type)->onComplete( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1455___fromBytes)
HXLINE(1457)			_gthis->_hx___fromImage(image);
HXLINE(1459)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1461)				_gthis->_hx___applyAlpha(rawAlpha);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1453___fromBytes)
HXDLIN(1453)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(1455)		::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->onComplete( ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1474___fromFile)
HXLINE(1474)			_gthis->_hx___fromImage(image);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1470___fromFile)
HXDLIN(1470)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(1472)		::lime::graphics::Image_obj::loadFromFile(path)->onComplete( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1483___fromImage)
HXDLIN(1483)		bool _hx_tmp;
HXDLIN(1483)		if (hx::IsNotNull( image )) {
HXDLIN(1483)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN(1483)			_hx_tmp = false;
            		}
HXDLIN(1483)		if (_hx_tmp) {
HXLINE(1485)			this->image = image;
HXLINE(1487)			this->width = image->width;
HXLINE(1488)			this->height = image->height;
HXLINE(1489)			this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,image->width,image->height);
HXLINE(1492)			image->set_format((int)2);
HXLINE(1493)			image->set_premultiplied(true);
HXLINE(1496)			this->readable = true;
HXLINE(1497)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

 ::lime::graphics::opengl::GLObject BitmapData_obj::_hx___getFramebuffer( ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1504___getFramebuffer)
HXLINE(1506)		bool _hx_tmp;
HXDLIN(1506)		if (hx::IsNotNull( this->_hx___framebuffer )) {
HXLINE(1506)			_hx_tmp = hx::IsNotEq( this->_hx___framebufferContext,gl );
            		}
            		else {
HXLINE(1506)			_hx_tmp = true;
            		}
HXDLIN(1506)		if (_hx_tmp) {
HXLINE(1508)			this->getTexture(gl);
HXLINE(1510)			this->_hx___framebufferContext = gl;
HXLINE(1511)			this->_hx___framebuffer = gl->createFramebuffer();
HXLINE(1513)			gl->bindFramebuffer(gl->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE(1514)			gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,this->_hx___texture,(int)0);
            		}
HXLINE(1518)		return this->_hx___framebuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___getFramebuffer,return )

void BitmapData_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1523___renderCairo)
HXLINE(1526)		if (!(this->readable)) {
HXLINE(1526)			return;
            		}
HXLINE(1528)		 ::lime::graphics::cairo::Cairo cairo = renderSession->cairo;
HXLINE(1530)		if (hx::IsNull( this->_hx___worldTransform )) {
HXLINE(1530)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(1532)		 ::openfl::geom::Matrix transform = this->_hx___worldTransform;
HXLINE(1534)		if (renderSession->roundPixels) {
HXLINE(1536)			 ::lime::math::Matrix3 matrix = transform->_hx___toMatrix3();
HXLINE(1537)			matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE(1538)			matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE(1539)			cairo->set_matrix(matrix);
            		}
            		else {
HXLINE(1543)			cairo->set_matrix(transform->_hx___toMatrix3());
            		}
HXLINE(1547)		 ::Dynamic surface = this->getSurface();
HXLINE(1549)		if (hx::IsNotNull( surface )) {
HXLINE(1551)			 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(1553)			bool _hx_tmp;
HXDLIN(1553)			if (!(!(renderSession->allowSmoothing))) {
HXLINE(1553)				_hx_tmp = (cairo->get_antialias() == (int)1);
            			}
            			else {
HXLINE(1553)				_hx_tmp = true;
            			}
HXDLIN(1553)			if (_hx_tmp) {
HXLINE(1555)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)3);
            			}
            			else {
HXLINE(1559)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)1);
            			}
HXLINE(1563)			cairo->set_source(pattern);
HXLINE(1564)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1572___renderCairoMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1579___renderCanvas)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1613___renderCanvasMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1620___renderGL)
HXLINE(1622)		 ::openfl::_internal::renderer::opengl::GLRenderer renderer = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXLINE(1623)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(1625)		renderSession->blendModeManager->setBlendMode((int)10);
HXLINE(1627)		 ::openfl::display::Shader shader = renderSession->shaderManager->defaultShader;
HXLINE(1629)		shader->get_data()->uImage0->input = hx::ObjectPtr<OBJ_>(this);
HXLINE(1630)		bool _hx_tmp;
HXDLIN(1630)		if (renderSession->allowSmoothing) {
HXLINE(1630)			_hx_tmp = renderSession->upscaled;
            		}
            		else {
HXLINE(1630)			_hx_tmp = false;
            		}
HXDLIN(1630)		shader->get_data()->uImage0->smoothing = _hx_tmp;
HXLINE(1631)		shader->get_data()->uMatrix->value = renderer->getMatrix(this->_hx___worldTransform);
HXLINE(1633)		renderSession->shaderManager->setShader(shader);
HXLINE(1635)		int gl1 = gl->ARRAY_BUFFER;
HXDLIN(1635)		gl->bindBuffer(gl1,this->getBuffer(gl,(int)1));
HXLINE(1636)		int _hx_tmp1 = shader->get_data()->aPosition->index;
HXDLIN(1636)		int gl2 = gl->FLOAT;
HXDLIN(1636)		gl->vertexAttribPointer(_hx_tmp1,(int)3,gl2,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
HXLINE(1637)		int _hx_tmp2 = shader->get_data()->aTexCoord->index;
HXDLIN(1637)		int gl3 = gl->FLOAT;
HXDLIN(1637)		gl->vertexAttribPointer(_hx_tmp2,(int)2,gl3,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
HXLINE(1638)		int _hx_tmp3 = shader->get_data()->aAlpha->index;
HXDLIN(1638)		int gl4 = gl->FLOAT;
HXDLIN(1638)		gl->vertexAttribPointer(_hx_tmp3,(int)1,gl4,false,(int)24,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)20));
HXLINE(1640)		gl->drawArrays(gl->TRIANGLE_STRIP,(int)0,(int)4);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1645___resize)
HXLINE(1647)		this->width = width;
HXLINE(1648)		this->height = height;
HXLINE(1649)		this->rect->width = width;
HXLINE(1650)		this->rect->height = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1655___sync)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___updateChildren(bool transformOnly){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1664___updateChildren)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateChildren,(void))

void BitmapData_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1671___updateMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateMask,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1680___updateTransforms)
HXDLIN(1680)		if (hx::IsNull( overrideTransform )) {
HXLINE(1682)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(1686)			this->_hx___worldTransform = overrideTransform;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

 ::Dynamic BitmapData_obj::_hx___supportsBGRA;

int BitmapData_obj::_hx___textureFormat;

int BitmapData_obj::_hx___textureInternalFormat;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_707_fromBase64)
HXLINE( 709)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE( 710)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_710_fromBase64)
HXLINE( 710)				_gthis->_hx___fromImage(image);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 710)			 ::openfl::display::BitmapData _gthis = bitmapData;
HXDLIN( 710)			::lime::graphics::Image_obj::loadFromBase64(base64,type)->onComplete( ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE( 711)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_716_fromBytes)
HXLINE( 718)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE( 719)		{
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::openfl::utils::ByteArrayData,rawAlpha1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_719_fromBytes)
HXLINE( 719)				_gthis->_hx___fromImage(image);
HXDLIN( 719)				if (hx::IsNotNull( rawAlpha1 )) {
HXLINE( 719)					_gthis->_hx___applyAlpha(rawAlpha1);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 719)			 ::openfl::utils::ByteArrayData rawAlpha1 = rawAlpha;
HXDLIN( 719)			 ::openfl::display::BitmapData _gthis = bitmapData;
HXDLIN( 719)			::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->onComplete( ::Dynamic(new _hx_Closure_0(_gthis,rawAlpha1)));
            		}
HXLINE( 720)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_739_fromFile)
HXLINE( 741)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE( 742)		bitmapData->_hx___fromFile(path);
HXLINE( 743)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< bool >  __o_transparent){
bool transparent = __o_transparent.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_748_fromImage)
HXLINE( 750)		bool _hx_tmp;
HXDLIN( 750)		if (hx::IsNotNull( image )) {
HXLINE( 750)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE( 750)			_hx_tmp = true;
            		}
HXDLIN( 750)		if (_hx_tmp) {
HXLINE( 750)			return null();
            		}
HXLINE( 752)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,transparent,(int)0);
HXLINE( 753)		bitmapData->_hx___fromImage(image);
HXLINE( 754)		bitmapData->image->set_transparent(transparent);
HXLINE( 755)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::fromTexture( ::openfl::display3D::textures::TextureBase texture){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_760_fromTexture)
HXLINE( 762)		if (hx::IsNull( texture )) {
HXLINE( 762)			return null();
            		}
HXLINE( 764)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,texture->_hx___width,texture->_hx___height,true,(int)0);
HXLINE( 765)		bitmapData->readable = false;
HXLINE( 766)		bitmapData->_hx___texture = texture->_hx___textureID;
HXLINE( 767)		bitmapData->_hx___textureContext = texture->_hx___textureContext;
HXLINE( 768)		bitmapData->image = null();
HXLINE( 769)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromTexture,return )

 ::lime::app::Future BitmapData_obj::loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1207_loadFromBase64)
HXLINE(1207)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1205_loadFromBase64)
HXDLIN(1205)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1216_loadFromBytes)
HXLINE(1218)			 ::openfl::display::BitmapData bitmapData = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(1220)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1222)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(1226)			return ::lime::app::Future_obj::withValue(bitmapData);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1216_loadFromBytes)
HXDLIN(1216)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1237_loadFromFile)
HXLINE(1237)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1235_loadFromFile)
HXDLIN(1235)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,loadFromFile,return )


hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	BitmapData_obj *__this = (BitmapData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_MARK_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_VISIT_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid ); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBuffer") ) { return hx::Val( getBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent ); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData ); }
		if (HX_FIELD_EQ(inName,"disposeImage") ) { return hx::Val( disposeImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return hx::Val( _hx___applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { return hx::Val( _hx___bufferAlpha ); }
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { return hx::Val( _hx___bufferContext ); }
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return hx::Val( _hx___textureContext ); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"__getFramebuffer") ) { return hx::Val( _hx___getFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { return hx::Val( _hx___framebufferContext ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { outValue = ( _hx___supportsBGRA ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { outValue = ( _hx___textureFormat ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { outValue = ( _hx___textureInternalFormat ); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { _hx___bufferAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { _hx___bufferContext=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { _hx___framebufferContext=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { _hx___supportsBGRA=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { _hx___textureFormat=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { _hx___textureInternalFormat=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"));
	outFields->push(HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"));
	outFields->push(HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___bufferContext),HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6")},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___bufferAlpha),HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(BitmapData_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___framebufferContext),HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___textureContext),HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::_hx___supportsBGRA,HX_HCSTRING("__supportsBGRA","\x58","\x53","\x57","\x0f")},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureFormat,HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18")},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureInternalFormat,HX_HCSTRING("__textureInternalFormat","\x6f","\x15","\xaa","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"),
	HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"),
	HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("disposeImage","\x3c","\x6e","\xb8","\x62"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawWithQuality","\xb5","\xc5","\x05","\x6f"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getBuffer","\x36","\x46","\xeb","\x4c"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("histogram","\xa4","\xde","\x33","\x65"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("__applyAlpha","\x30","\x9e","\x7b","\x05"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImage","\x71","\x52","\x1e","\xa0"),
	HX_HCSTRING("__getFramebuffer","\x17","\xf3","\x25","\x36"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("__supportsBGRA","\x58","\x53","\x57","\x0f"),
	HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18"),
	HX_HCSTRING("__textureInternalFormat","\x6f","\x15","\xaa","\xa7"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImage","\x91","\x09","\xf2","\x71"),
	HX_HCSTRING("fromTexture","\x91","\x2c","\x21","\x37"),
	HX_HCSTRING("loadFromBase64","\x5f","\x0c","\x1d","\x2f"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Object *dummy = new BitmapData_obj;
	BitmapData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.BitmapData","\xa3","\x12","\x41","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_84_boot)
HXDLIN(  84)		_hx___supportsBGRA = null();
            	}
}

} // end namespace openfl
} // end namespace display
