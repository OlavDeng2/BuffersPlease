// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif
#ifndef INCLUDED_openfl_text__TextFormatAlign_TextFormatAlign_Impl_
#include <openfl/text/_TextFormatAlign/TextFormatAlign_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_126_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",126,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_159_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",159,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_173_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",173,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_202_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",202,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_249_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",249,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_277_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",277,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_304_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",304,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_325_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",325,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_355_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",355,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_380_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",380,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_401_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",401,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_432_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",432,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_445_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",445,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_489_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",489,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_504_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",504,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_559_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",559,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_567_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",567,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_722_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",722,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_748___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",748,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_761___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",761,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_790___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",790,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_799___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",799,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_828___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",828,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_837___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",837,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_864___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",864,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_898___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",898,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1019___getAttributeMatch,"openfl.text.TextField","__getAttributeMatch",0x101a59fb,"openfl.text.TextField.__getAttributeMatch","openfl/text/TextField.hx",1019,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1024___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1024,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1039___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1039,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1077___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1077,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1096___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1096,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1152___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1152,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1188___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1188,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1216___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1216,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1235___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",1235,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1245___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",1245,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1282___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",1282,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1291___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",1291,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1304___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",1304,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1313___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",1313,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1351___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",1351,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1374___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",1374,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1392___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",1392,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1432___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",1432,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1464___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",1464,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1481_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",1481,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1486_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",1486,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1501_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",1501,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1506_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",1506,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1522_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",1522,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1527_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",1527,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1542_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",1542,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1547_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",1547,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1562_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",1562,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1567_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1567,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1582_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1582,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1587_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1587,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1600_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1600,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1611_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",1611,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1618_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",1618,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1623_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",1623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1637_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",1637,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1642_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",1642,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1661_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",1661,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1675_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",1675,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1682_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",1682,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1696_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",1696,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1701_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",1701,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1709_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",1709,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1728_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",1728,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1733_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",1733,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2000_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2000,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2015_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2015,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2020_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2020,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2034_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2034,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2043_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2043,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2054_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2054,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2061_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2061,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2068_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2068,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2073_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2073,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2087_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2087,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2098_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2098,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2105_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2105,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2112_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2112,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2117_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2117,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2137_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2137,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2142_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2142,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2162_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2162,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2167_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2167,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2190_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2190,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2197_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2197,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2204_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2204,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2209_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2209,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2224_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2224,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2229_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2229,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2264_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",2264,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2269_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",2269,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2283_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",2283,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2291_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",2291,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2301_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",2301,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2306_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",2306,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2339_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",2339,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2347_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",2347,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2366_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",2366,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2371_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",2371,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2392_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",2392,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2416_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",2416,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2457_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",2457,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2464_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",2464,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2475_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",2475,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2480_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",2480,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2500_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",2500,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2744_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",2744,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_52_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",52,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_53_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",53,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_54_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",54,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_55_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",55,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_56_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",56,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_57_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",57,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_58_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",58,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_59_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",59,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_60_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",60,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_61_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",61,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_62_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",62,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_63_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",63,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_64_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",64,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_65_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",65,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_66_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",66,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_126_new)
HXLINE( 128)		super::__construct();
HXLINE( 130)		this->_hx___caretIndex = (int)-1;
HXLINE( 131)		this->_hx___displayAsPassword = false;
HXLINE( 132)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 133)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 134)		this->_hx___layoutDirty = true;
HXLINE( 135)		this->_hx___offsetX = (int)0;
HXLINE( 136)		this->_hx___offsetY = (int)0;
HXLINE( 137)		this->_hx___tabEnabled = true;
HXLINE( 138)		this->_hx___mouseWheelEnabled = true;
HXLINE( 139)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 141)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 143)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 144)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 145)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 146)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 147)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 151)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 152)		{
HXLINE( 152)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 152)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,(int)0,(int)0));
            		}
HXLINE( 154)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_159_appendText)
HXLINE( 161)		bool _hx_tmp;
HXDLIN( 161)		if (hx::IsNotNull( text )) {
HXLINE( 161)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 161)			_hx_tmp = true;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXLINE( 161)			return;
            		}
HXLINE( 163)		this->_hx___dirty = true;
HXLINE( 164)		this->_hx___layoutDirty = true;
HXLINE( 166)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 168)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 168)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_173_getCharBoundaries)
HXLINE( 175)		bool _hx_tmp;
HXDLIN( 175)		if ((charIndex >= (int)0)) {
HXLINE( 175)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 175)			_hx_tmp = true;
            		}
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 175)			return null();
            		}
HXLINE( 177)		this->_hx___updateLayout();
HXLINE( 179)		{
HXLINE( 179)			int _g = (int)0;
HXDLIN( 179)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 179)			while((_g < _g1->get_length())){
HXLINE( 179)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 179)				_g = (_g + (int)1);
HXLINE( 181)				bool _hx_tmp1;
HXDLIN( 181)				if ((charIndex >= group->startIndex)) {
HXLINE( 181)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 181)					_hx_tmp1 = false;
            				}
HXDLIN( 181)				if (_hx_tmp1) {
HXLINE( 183)					Float x = group->offsetX;
HXLINE( 185)					{
HXLINE( 185)						int _g3 = (int)0;
HXDLIN( 185)						int _g2 = (charIndex - group->startIndex);
HXDLIN( 185)						while((_g3 < _g2)){
HXLINE( 185)							_g3 = (_g3 + (int)1);
HXDLIN( 185)							int i = (_g3 - (int)1);
HXLINE( 187)							x = (x + group->advances->__get(i));
            						}
            					}
HXLINE( 191)					Float group1 = group->offsetY;
HXDLIN( 191)					::Array< Float > group2 = group->advances;
HXDLIN( 191)					Float group3 = group2->__get((charIndex - group->startIndex));
HXDLIN( 191)					return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,group1,group3,(group->ascent + group->descent));
            				}
            			}
            		}
HXLINE( 197)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_202_getCharIndexAtPoint)
HXLINE( 204)		bool _hx_tmp;
HXDLIN( 204)		bool _hx_tmp1;
HXDLIN( 204)		bool _hx_tmp2;
HXDLIN( 204)		if (!((x <= (int)2))) {
HXLINE( 204)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 204)			_hx_tmp2 = true;
            		}
HXDLIN( 204)		if (!(_hx_tmp2)) {
HXLINE( 204)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 204)			_hx_tmp1 = true;
            		}
HXDLIN( 204)		if (!(_hx_tmp1)) {
HXLINE( 204)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 204)			_hx_tmp = true;
            		}
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 204)			return (int)-1;
            		}
HXLINE( 206)		this->_hx___updateLayout();
HXLINE( 208)		x = (x + this->get_scrollH());
HXLINE( 210)		{
HXLINE( 210)			int _g1 = (int)0;
HXDLIN( 210)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 210)			while((_g1 < _g)){
HXLINE( 210)				_g1 = (_g1 + (int)1);
HXDLIN( 210)				int i = (_g1 - (int)1);
HXLINE( 212)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 216)		{
HXLINE( 216)			int _g2 = (int)0;
HXDLIN( 216)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 216)			while((_g2 < _g11->get_length())){
HXLINE( 216)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 216)				_g2 = (_g2 + (int)1);
HXLINE( 218)				bool _hx_tmp3;
HXDLIN( 218)				if ((y >= group->offsetY)) {
HXLINE( 218)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 218)					_hx_tmp3 = false;
            				}
HXDLIN( 218)				if (_hx_tmp3) {
HXLINE( 220)					bool _hx_tmp4;
HXDLIN( 220)					if ((x >= group->offsetX)) {
HXLINE( 220)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 220)						_hx_tmp4 = false;
            					}
HXDLIN( 220)					if (_hx_tmp4) {
HXLINE( 222)						Float advance = ((Float)0.0);
HXLINE( 224)						{
HXLINE( 224)							int _g3 = (int)0;
HXDLIN( 224)							int _g21 = group->advances->length;
HXDLIN( 224)							while((_g3 < _g21)){
HXLINE( 224)								_g3 = (_g3 + (int)1);
HXDLIN( 224)								int i1 = (_g3 - (int)1);
HXLINE( 226)								advance = (advance + group->advances->__get(i1));
HXLINE( 228)								if ((x <= (group->offsetX + advance))) {
HXLINE( 230)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 236)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 244)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_249_getFirstCharInParagraph)
HXLINE( 251)		bool _hx_tmp;
HXDLIN( 251)		if ((charIndex >= (int)0)) {
HXLINE( 251)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 251)			_hx_tmp = true;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 251)			return (int)0;
            		}
HXLINE( 253)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 254)		int startIndex = (int)0;
HXLINE( 256)		while((index > (int)-1)){
HXLINE( 258)			if ((index <= charIndex)) {
HXLINE( 260)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 262)				if ((index > charIndex)) {
HXLINE( 264)					goto _hx_goto_9;
            				}
            			}
HXLINE( 268)			 ::openfl::_internal::text::TextEngine index1 = this->_hx___textEngine;
HXDLIN( 268)			index = index1->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_9:;
HXLINE( 272)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_277_getLineIndexAtPoint)
HXLINE( 279)		this->_hx___updateLayout();
HXLINE( 281)		bool _hx_tmp;
HXDLIN( 281)		bool _hx_tmp1;
HXDLIN( 281)		bool _hx_tmp2;
HXDLIN( 281)		if (!((x <= (int)2))) {
HXLINE( 281)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 281)			_hx_tmp2 = true;
            		}
HXDLIN( 281)		if (!(_hx_tmp2)) {
HXLINE( 281)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 281)			_hx_tmp1 = true;
            		}
HXDLIN( 281)		if (!(_hx_tmp1)) {
HXLINE( 281)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 281)			_hx_tmp = true;
            		}
HXDLIN( 281)		if (_hx_tmp) {
HXLINE( 281)			return (int)-1;
            		}
HXLINE( 283)		{
HXLINE( 283)			int _g1 = (int)0;
HXDLIN( 283)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 283)			while((_g1 < _g)){
HXLINE( 283)				_g1 = (_g1 + (int)1);
HXDLIN( 283)				int i = (_g1 - (int)1);
HXLINE( 285)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 289)		{
HXLINE( 289)			int _g2 = (int)0;
HXDLIN( 289)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 289)			while((_g2 < _g11->get_length())){
HXLINE( 289)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 289)				_g2 = (_g2 + (int)1);
HXLINE( 291)				bool _hx_tmp3;
HXDLIN( 291)				if ((y >= group->offsetY)) {
HXLINE( 291)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 291)					_hx_tmp3 = false;
            				}
HXDLIN( 291)				if (_hx_tmp3) {
HXLINE( 293)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 299)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_304_getLineIndexOfChar)
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		if ((charIndex >= (int)0)) {
HXLINE( 306)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE( 306)			_hx_tmp = true;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 306)			return (int)-1;
            		}
HXLINE( 308)		this->_hx___updateLayout();
HXLINE( 310)		{
HXLINE( 310)			int _g = (int)0;
HXDLIN( 310)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 310)			while((_g < _g1->get_length())){
HXLINE( 310)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 310)				_g = (_g + (int)1);
HXLINE( 312)				bool _hx_tmp1;
HXDLIN( 312)				if ((group->startIndex <= charIndex)) {
HXLINE( 312)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 312)					_hx_tmp1 = false;
            				}
HXDLIN( 312)				if (_hx_tmp1) {
HXLINE( 314)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 320)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_325_getLineLength)
HXLINE( 327)		this->_hx___updateLayout();
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		if ((lineIndex >= (int)0)) {
HXLINE( 329)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 329)			return (int)0;
            		}
HXLINE( 331)		int startIndex = (int)-1;
HXLINE( 332)		int endIndex = (int)-1;
HXLINE( 334)		{
HXLINE( 334)			int _g = (int)0;
HXDLIN( 334)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 334)			while((_g < _g1->get_length())){
HXLINE( 334)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 334)				_g = (_g + (int)1);
HXLINE( 336)				if ((group->lineIndex == lineIndex)) {
HXLINE( 338)					if ((startIndex == (int)-1)) {
HXLINE( 338)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 340)					int group1 = group->lineIndex;
HXDLIN( 340)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 342)						endIndex = group->startIndex;
HXLINE( 343)						goto _hx_goto_16;
            					}
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 349)		if ((endIndex == (int)-1)) {
HXLINE( 349)			endIndex = this->_hx___text.length;
            		}
HXLINE( 350)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_355_getLineMetrics)
HXLINE( 357)		this->_hx___updateLayout();
HXLINE( 359)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE( 360)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE( 361)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE( 362)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE( 363)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE( 367)		Float margin;
HXDLIN( 367)		 ::Dynamic _g = this->_hx___textFormat->align;
HXDLIN( 367)		 ::Dynamic _hx_switch_0 = _g;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 367)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 367)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 367)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 367)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 367)			margin = (int)2;
HXDLIN( 367)			goto _hx_goto_18;
            		}
            		_hx_goto_18:;
HXLINE( 375)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_380_getLineOffset)
HXLINE( 382)		this->_hx___updateLayout();
HXLINE( 384)		bool _hx_tmp;
HXDLIN( 384)		if ((lineIndex >= (int)0)) {
HXLINE( 384)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 384)			_hx_tmp = true;
            		}
HXDLIN( 384)		if (_hx_tmp) {
HXLINE( 384)			return (int)-1;
            		}
HXLINE( 386)		{
HXLINE( 386)			int _g = (int)0;
HXDLIN( 386)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 386)			while((_g < _g1->get_length())){
HXLINE( 386)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 386)				_g = (_g + (int)1);
HXLINE( 388)				if ((group->lineIndex == lineIndex)) {
HXLINE( 390)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 396)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_401_getLineText)
HXLINE( 403)		this->_hx___updateLayout();
HXLINE( 405)		bool _hx_tmp;
HXDLIN( 405)		if ((lineIndex >= (int)0)) {
HXLINE( 405)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 405)			_hx_tmp = true;
            		}
HXDLIN( 405)		if (_hx_tmp) {
HXLINE( 405)			return null();
            		}
HXLINE( 407)		int startIndex = (int)-1;
HXLINE( 408)		int endIndex = (int)-1;
HXLINE( 410)		{
HXLINE( 410)			int _g = (int)0;
HXDLIN( 410)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 410)			while((_g < _g1->get_length())){
HXLINE( 410)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 410)				_g = (_g + (int)1);
HXLINE( 412)				if ((group->lineIndex == lineIndex)) {
HXLINE( 414)					if ((startIndex == (int)-1)) {
HXLINE( 414)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 416)					int group1 = group->lineIndex;
HXDLIN( 416)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 418)						endIndex = group->startIndex;
HXLINE( 419)						goto _hx_goto_22;
            					}
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE( 425)		if ((endIndex == (int)-1)) {
HXLINE( 425)			endIndex = this->_hx___text.length;
            		}
HXLINE( 427)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_432_getParagraphLength)
HXLINE( 434)		bool _hx_tmp;
HXDLIN( 434)		if ((charIndex >= (int)0)) {
HXLINE( 434)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 434)			_hx_tmp = true;
            		}
HXDLIN( 434)		if (_hx_tmp) {
HXLINE( 434)			return (int)0;
            		}
HXLINE( 436)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE( 437)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + (int)1);
HXLINE( 439)		if ((endIndex == (int)0)) {
HXLINE( 439)			endIndex = this->_hx___text.length;
            		}
HXLINE( 440)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_445_getTextFormat)
HXLINE( 447)		 ::openfl::text::TextFormat format = null();
HXLINE( 449)		{
HXLINE( 449)			int _g = (int)0;
HXDLIN( 449)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 449)			while((_g < _g1->get_length())){
HXLINE( 449)				 ::openfl::_internal::text::TextFormatRange group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 449)				_g = (_g + (int)1);
HXLINE( 451)				bool _hx_tmp;
HXDLIN( 451)				bool _hx_tmp1;
HXDLIN( 451)				if ((group->start <= beginIndex)) {
HXLINE( 451)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 451)					_hx_tmp1 = false;
            				}
HXDLIN( 451)				if (!(_hx_tmp1)) {
HXLINE( 451)					if ((group->start <= endIndex)) {
HXLINE( 451)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 451)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 451)					_hx_tmp = true;
            				}
HXDLIN( 451)				if (_hx_tmp) {
HXLINE( 453)					if (hx::IsNull( format )) {
HXLINE( 455)						format = group->format->clone();
            					}
            					else {
HXLINE( 459)						if ((group->format->font != format->font)) {
HXLINE( 459)							format->font = null();
            						}
HXLINE( 460)						if (hx::IsNotEq( group->format->size,format->size )) {
HXLINE( 460)							format->size = null();
            						}
HXLINE( 461)						if (hx::IsNotEq( group->format->color,format->color )) {
HXLINE( 461)							format->color = null();
            						}
HXLINE( 462)						if (hx::IsNotEq( group->format->bold,format->bold )) {
HXLINE( 462)							format->bold = null();
            						}
HXLINE( 463)						if (hx::IsNotEq( group->format->italic,format->italic )) {
HXLINE( 463)							format->italic = null();
            						}
HXLINE( 464)						if (hx::IsNotEq( group->format->underline,format->underline )) {
HXLINE( 464)							format->underline = null();
            						}
HXLINE( 465)						if ((group->format->url != format->url)) {
HXLINE( 465)							format->url = null();
            						}
HXLINE( 466)						if ((group->format->target != format->target)) {
HXLINE( 466)							format->target = null();
            						}
HXLINE( 467)						if (hx::IsNotEq( group->format->align,format->align )) {
HXLINE( 467)							format->align = null();
            						}
HXLINE( 468)						if (hx::IsNotEq( group->format->leftMargin,format->leftMargin )) {
HXLINE( 468)							format->leftMargin = null();
            						}
HXLINE( 469)						if (hx::IsNotEq( group->format->rightMargin,format->rightMargin )) {
HXLINE( 469)							format->rightMargin = null();
            						}
HXLINE( 470)						if (hx::IsNotEq( group->format->indent,format->indent )) {
HXLINE( 470)							format->indent = null();
            						}
HXLINE( 471)						if (hx::IsNotEq( group->format->leading,format->leading )) {
HXLINE( 471)							format->leading = null();
            						}
HXLINE( 472)						if (hx::IsNotEq( group->format->blockIndent,format->blockIndent )) {
HXLINE( 472)							format->blockIndent = null();
            						}
HXLINE( 473)						if (hx::IsNotEq( group->format->bullet,format->bullet )) {
HXLINE( 473)							format->bullet = null();
            						}
HXLINE( 474)						if (hx::IsNotEq( group->format->kerning,format->kerning )) {
HXLINE( 474)							format->kerning = null();
            						}
HXLINE( 475)						if (hx::IsNotEq( group->format->letterSpacing,format->letterSpacing )) {
HXLINE( 475)							format->letterSpacing = null();
            						}
HXLINE( 476)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 476)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 484)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_489_replaceSelectedText)
HXLINE( 491)		bool _hx_tmp;
HXDLIN( 491)		if ((value == HX_("",00,00,00,00))) {
HXLINE( 491)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE( 491)			_hx_tmp = false;
            		}
HXDLIN( 491)		if (_hx_tmp) {
HXLINE( 491)			return;
            		}
HXLINE( 493)		int startIndex;
HXDLIN( 493)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE( 493)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 493)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE( 494)		int endIndex;
HXDLIN( 494)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE( 494)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 494)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE( 496)		this->replaceText(startIndex,endIndex,value);
HXLINE( 498)		int i = (startIndex + value.length);
HXLINE( 499)		this->setSelection(i,i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_504_replaceText)
HXLINE( 506)		bool _hx_tmp;
HXDLIN( 506)		bool _hx_tmp1;
HXDLIN( 506)		bool _hx_tmp2;
HXDLIN( 506)		if ((endIndex >= beginIndex)) {
HXLINE( 506)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE( 506)			_hx_tmp2 = true;
            		}
HXDLIN( 506)		if (!(_hx_tmp2)) {
HXLINE( 506)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE( 506)			_hx_tmp1 = true;
            		}
HXDLIN( 506)		if (!(_hx_tmp1)) {
HXLINE( 506)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE( 506)			_hx_tmp = true;
            		}
HXDLIN( 506)		if (_hx_tmp) {
HXLINE( 506)			return;
            		}
HXLINE( 508)		::String _hx_tmp3 = (this->_hx___text.substring((int)0,beginIndex) + newText);
HXDLIN( 508)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE( 510)		int newText1 = newText.length;
HXDLIN( 510)		int offset = (newText1 - (endIndex - beginIndex));
HXLINE( 512)		int i = (int)0;
HXLINE( 513)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 515)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE( 517)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 519)			bool _hx_tmp4;
HXDLIN( 519)			if ((range->start <= beginIndex)) {
HXLINE( 519)				_hx_tmp4 = (range->end >= endIndex);
            			}
            			else {
HXLINE( 519)				_hx_tmp4 = false;
            			}
HXDLIN( 519)			if (_hx_tmp4) {
HXLINE( 521)				 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN( 521)				range1->end = (range1->end + offset);
HXLINE( 522)				i = (i + (int)1);
            			}
            			else {
HXLINE( 524)				bool _hx_tmp5;
HXDLIN( 524)				if ((range->start >= beginIndex)) {
HXLINE( 524)					_hx_tmp5 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 524)					_hx_tmp5 = false;
            				}
HXDLIN( 524)				if (_hx_tmp5) {
HXLINE( 526)					if ((i > (int)0)) {
HXLINE( 528)						this->_hx___textEngine->textFormatRanges->splice(i,(int)1);
            					}
            					else {
HXLINE( 532)						range->start = (int)0;
HXLINE( 533)						range->end = (beginIndex + newText.length);
HXLINE( 534)						i = (i + (int)1);
            					}
HXLINE( 538)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE( 540)					bool _hx_tmp6;
HXDLIN( 540)					if ((range->start > beginIndex)) {
HXLINE( 540)						_hx_tmp6 = (range->start <= endIndex);
            					}
            					else {
HXLINE( 540)						_hx_tmp6 = false;
            					}
HXDLIN( 540)					if (_hx_tmp6) {
HXLINE( 542)						 ::openfl::_internal::text::TextFormatRange range2 = range;
HXDLIN( 542)						range2->start = (range2->start + offset);
HXLINE( 543)						i = (i + (int)1);
            					}
            					else {
HXLINE( 547)						i = (i + (int)1);
            					}
            				}
            			}
            		}
HXLINE( 553)		this->_hx___dirty = true;
HXLINE( 554)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_559_setSelection)
HXLINE( 561)		this->_hx___selectionIndex = beginIndex;
HXLINE( 562)		this->_hx___caretIndex = endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_567_setTextFormat)
HXLINE( 569)		int max = this->get_text().length;
HXLINE( 570)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 572)		if ((beginIndex < (int)0)) {
HXLINE( 572)			beginIndex = (int)0;
            		}
HXLINE( 573)		if ((endIndex < (int)0)) {
HXLINE( 573)			endIndex = (int)0;
            		}
HXLINE( 575)		if ((endIndex == (int)0)) {
HXLINE( 577)			if ((beginIndex == (int)0)) {
HXLINE( 579)				endIndex = max;
            			}
            			else {
HXLINE( 583)				endIndex = (beginIndex + (int)1);
            			}
            		}
HXLINE( 589)		if ((endIndex < beginIndex)) {
HXLINE( 589)			return;
            		}
HXLINE( 591)		bool _hx_tmp;
HXDLIN( 591)		if ((beginIndex == (int)0)) {
HXLINE( 591)			_hx_tmp = (endIndex == max);
            		}
            		else {
HXLINE( 591)			_hx_tmp = false;
            		}
HXDLIN( 591)		if (_hx_tmp) {
HXLINE( 593)			this->_hx___textFormat->_hx___merge(format);
HXLINE( 595)			if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE( 597)				{
HXLINE( 597)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 597)					( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            				}
HXLINE( 599)				range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 600)				range->format = this->_hx___textFormat;
HXLINE( 601)				range->start = (int)0;
HXLINE( 602)				range->end = max;
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_722_setTextFormat)
HXLINE( 724)				bool _hx_tmp4;
HXDLIN( 724)				if ((a->start >= b->start)) {
HXLINE( 724)					_hx_tmp4 = (a->end < b->end);
            				}
            				else {
HXLINE( 724)					_hx_tmp4 = true;
            				}
HXDLIN( 724)				if (_hx_tmp4) {
HXLINE( 726)					return (int)-1;
            				}
            				else {
HXLINE( 728)					bool _hx_tmp5;
HXDLIN( 728)					if ((a->start <= b->start)) {
HXLINE( 728)						_hx_tmp5 = (a->end > b->end);
            					}
            					else {
HXLINE( 728)						_hx_tmp5 = true;
            					}
HXDLIN( 728)					if (_hx_tmp5) {
HXLINE( 730)						return (int)1;
            					}
            				}
HXLINE( 734)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 608)			int index = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE( 609)			int searchIndex;
HXLINE( 611)			while((index > (int)0)){
HXLINE( 613)				index = (index - (int)1);
HXLINE( 614)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 616)				bool _hx_tmp1;
HXDLIN( 616)				if ((range->start == beginIndex)) {
HXLINE( 616)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE( 616)					_hx_tmp1 = false;
            				}
HXDLIN( 616)				if (_hx_tmp1) {
HXLINE( 618)					range->format = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 619)					range->format->_hx___merge(format);
HXLINE( 620)					return;
            				}
HXLINE( 624)				bool _hx_tmp2;
HXDLIN( 624)				if ((range->start > beginIndex)) {
HXLINE( 624)					_hx_tmp2 = (range->end < endIndex);
            				}
            				else {
HXLINE( 624)					_hx_tmp2 = false;
            				}
HXDLIN( 624)				if (_hx_tmp2) {
HXLINE( 626)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(range,(int)0);
HXLINE( 628)					if ((searchIndex > (int)-1)) {
HXLINE( 630)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE( 638)			 ::openfl::_internal::text::TextFormatRange prevRange = null();
HXDLIN( 638)			 ::openfl::_internal::text::TextFormatRange nextRange = null();
HXLINE( 640)			{
HXLINE( 640)				int _g1 = (int)0;
HXDLIN( 640)				int _g = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN( 640)				while((_g1 < _g)){
HXLINE( 640)					_g1 = (_g1 + (int)1);
HXDLIN( 640)					int i = (_g1 - (int)1);
HXLINE( 642)					range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 644)					if ((beginIndex > (int)0)) {
HXLINE( 646)						bool _hx_tmp3;
HXDLIN( 646)						if (hx::IsNull( prevRange )) {
HXLINE( 646)							_hx_tmp3 = (range->end >= beginIndex);
            						}
            						else {
HXLINE( 646)							_hx_tmp3 = false;
            						}
HXDLIN( 646)						if (_hx_tmp3) {
HXLINE( 648)							prevRange = range;
            						}
            					}
HXLINE( 656)					if ((endIndex < max)) {
HXLINE( 658)						if ((range->start <= endIndex)) {
HXLINE( 660)							nextRange = range;
            						}
            					}
            				}
            			}
HXLINE( 670)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE( 672)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN( 672)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE( 673)				this->_hx___textEngine->textFormatRanges->push(nextRange);
            			}
HXLINE( 677)			if (hx::IsNotNull( prevRange )) {
HXLINE( 679)				prevRange->end = beginIndex;
HXLINE( 681)				if ((prevRange->end <= prevRange->start)) {
HXLINE( 683)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(prevRange,(int)0);
HXLINE( 685)					if ((searchIndex > (int)-1)) {
HXLINE( 687)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
HXLINE( 691)					prevRange = null();
            				}
            			}
HXLINE( 697)			if (hx::IsNotNull( nextRange )) {
HXLINE( 699)				nextRange->start = endIndex;
HXLINE( 701)				if ((nextRange->start >= nextRange->end)) {
HXLINE( 703)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(nextRange,(int)0);
HXLINE( 705)					if ((searchIndex > (int)-1)) {
HXLINE( 707)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
HXLINE( 711)					nextRange = null();
            				}
            			}
HXLINE( 717)			 ::openfl::text::TextFormat textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 718)			textFormat->_hx___merge(format);
HXLINE( 720)			{
HXLINE( 720)				::Dynamic this2 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 720)				( ( ::openfl::_Vector::ObjectVector)(this2) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,textFormat,beginIndex,endIndex));
            			}
HXLINE( 722)			this->_hx___textEngine->textFormatRanges->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 740)		this->_hx___dirty = true;
HXLINE( 741)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_748___caretBeginningOfLine)
HXDLIN( 748)		bool _hx_tmp;
HXDLIN( 748)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXDLIN( 748)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXDLIN( 748)			_hx_tmp = true;
            		}
HXDLIN( 748)		if (_hx_tmp) {
HXLINE( 750)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE( 754)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_761___caretEndOfLine)
HXLINE( 763)		int lineIndex;
HXLINE( 765)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE( 767)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE( 771)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
            		}
HXLINE( 775)		if ((lineIndex < (this->_hx___textEngine->numLines - (int)1))) {
HXLINE( 777)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + (int)1)) - (int)1);
            		}
            		else {
HXLINE( 781)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_790___caretNextCharacter)
HXDLIN( 790)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE( 792)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_799___caretNextLine)
HXLINE( 801)		if (hx::IsNull( lineIndex )) {
HXLINE( 803)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 807)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - (int)1) )) {
HXLINE( 809)			if (hx::IsNull( caretIndex )) {
HXLINE( 811)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 815)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex + (int)1));
            		}
            		else {
HXLINE( 819)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_828___caretPreviousCharacter)
HXDLIN( 828)		if ((this->_hx___caretIndex > (int)0)) {
HXLINE( 830)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_837___caretPreviousLine)
HXLINE( 839)		if (hx::IsNull( lineIndex )) {
HXLINE( 841)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 845)		if (hx::IsGreater( lineIndex,(int)0 )) {
HXLINE( 847)			if (hx::IsNull( caretIndex )) {
HXLINE( 849)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 853)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex - (int)1));
            		}
            		else {
HXLINE( 857)			this->_hx___caretIndex = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_864___dispatch)
HXLINE( 866)		bool _hx_tmp;
HXDLIN( 866)		if ((event->eventPhase == (int)2)) {
HXLINE( 866)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE( 866)			_hx_tmp = false;
            		}
HXDLIN( 866)		if (_hx_tmp) {
HXLINE( 868)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 869)			Float group = this->get_mouseX();
HXDLIN( 869)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE( 871)			if (hx::IsNotNull( group1 )) {
HXLINE( 873)				::String url = group1->format->url;
HXLINE( 875)				if ((url != HX_("",00,00,00,00))) {
HXLINE( 877)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE( 879)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr((int)6,null())));
            					}
            					else {
HXLINE( 883)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE( 893)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_898___fromSymbol)
HXLINE( 900)		this->_hx___symbol = symbol;
HXLINE( 902)		this->set_width(symbol->width);
HXLINE( 903)		this->set_height(symbol->height);
HXLINE( 905)		this->_hx___offsetX = symbol->x;
HXLINE( 906)		this->_hx___offsetY = symbol->y;
HXLINE( 908)		this->set_multiline(symbol->multiline);
HXLINE( 909)		this->set_wordWrap(symbol->wordWrap);
HXLINE( 910)		this->set_displayAsPassword(symbol->password);
HXLINE( 912)		if (symbol->border) {
HXLINE( 914)			this->set_border(true);
HXLINE( 915)			this->set_background(true);
            		}
HXLINE( 919)		this->set_selectable(symbol->selectable);
HXLINE( 921)		if (symbol->input) {
HXLINE( 923)			this->set_type((int)1);
            		}
HXLINE( 927)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 928)		if (hx::IsNotNull( symbol->color )) {
HXLINE( 928)			format->color = ((int)symbol->color & (int)(int)16777215);
            		}
HXLINE( 929)		format->size = ::Math_obj::round(((Float)symbol->fontHeight / (Float)(int)20));
HXLINE( 931)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >()) );
HXLINE( 933)		bool _hx_tmp = hx::IsNotNull( font );
HXLINE( 945)		format->font = symbol->fontName;
HXLINE( 947)		bool found = false;
HXLINE( 949)		{
HXLINE( 949)			::String _g = format->font;
HXDLIN( 949)			if (hx::IsNull( _g )) {
HXLINE( 953)				found = true;
            			}
            			else {
HXLINE( 949)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 953)					found = true;
HXDLIN( 953)					goto _hx_goto_43;
            				}
            				/* default */{
HXLINE( 957)					int _g1 = (int)0;
HXDLIN( 957)					::Array< ::Dynamic> _g11 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN( 957)					while((_g1 < _g11->length)){
HXLINE( 957)						 ::openfl::text::Font font1 = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN( 957)						_g1 = (_g1 + (int)1);
HXLINE( 959)						if ((font1->name == format->font)) {
HXLINE( 961)							found = true;
HXLINE( 962)							goto _hx_goto_42;
            						}
            					}
            					_hx_goto_42:;
            				}
            				_hx_goto_43:;
            			}
            		}
HXLINE( 970)		if (found) {
HXLINE( 972)			this->set_embedFonts(true);
            		}
            		else {
HXLINE( 974)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE( 976)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE( 977)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("TextField.hx",31,a8,83,a8),977,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE( 981)		if (hx::IsNotNull( symbol->align )) {
HXLINE( 983)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE( 983)				format->align = (int)0;
            			}
            			else {
HXLINE( 984)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE( 984)					format->align = (int)4;
            				}
            				else {
HXLINE( 985)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE( 985)						format->align = (int)2;
            					}
            				}
            			}
HXLINE( 987)			format->leftMargin = ::Std_obj::_hx_int(((Float)symbol->leftMargin / (Float)(int)20));
HXLINE( 988)			format->rightMargin = ::Std_obj::_hx_int(((Float)symbol->rightMargin / (Float)(int)20));
HXLINE( 989)			format->indent = ::Std_obj::_hx_int(((Float)symbol->indent / (Float)(int)20));
HXLINE( 990)			format->leading = ::Std_obj::_hx_int(((Float)symbol->leading / (Float)(int)20));
HXLINE( 992)			if (this->get_embedFonts()) {
HXLINE( 992)				 ::openfl::text::TextFormat format1 = format;
HXDLIN( 992)				format1->leading = (format1->leading + (int)4);
            			}
            		}
HXLINE( 996)		this->set_defaultTextFormat(format);
HXLINE( 998)		if (hx::IsNotNull( symbol->text )) {
HXLINE(1000)			if (symbol->html) {
HXLINE(1002)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1006)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

::String TextField_obj::_hx___getAttributeMatch( ::EReg regex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1019___getAttributeMatch)
HXDLIN(1019)		if (hx::IsNotNull( regex->matched((int)2) )) {
HXDLIN(1019)			return regex->matched((int)2);
            		}
            		else {
HXDLIN(1019)			return regex->matched((int)3);
            		}
HXDLIN(1019)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAttributeMatch,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1024___getBounds)
HXLINE(1026)		this->_hx___updateLayout();
HXLINE(1028)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE(1029)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1030)		 ::openfl::geom::Rectangle bounds1 = bounds;
HXDLIN(1030)		bounds1->x = (bounds1->x + this->_hx___offsetX);
HXLINE(1031)		 ::openfl::geom::Rectangle bounds2 = bounds;
HXDLIN(1031)		bounds2->y = (bounds2->y + this->_hx___offsetY);
HXLINE(1032)		bounds->_hx___transform(bounds,matrix);
HXLINE(1034)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
            	}


int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1039___getCharIndexOnDifferentLine)
HXLINE(1041)		bool _hx_tmp;
HXDLIN(1041)		if ((charIndex >= (int)0)) {
HXLINE(1041)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1041)			_hx_tmp = true;
            		}
HXDLIN(1041)		if (_hx_tmp) {
HXLINE(1041)			return (int)-1;
            		}
HXLINE(1042)		bool _hx_tmp1;
HXDLIN(1042)		if ((lineIndex >= (int)0)) {
HXLINE(1042)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE(1042)			_hx_tmp1 = true;
            		}
HXDLIN(1042)		if (_hx_tmp1) {
HXLINE(1042)			return (int)-1;
            		}
HXLINE(1044)		 ::Dynamic x = null();
HXDLIN(1044)		 ::Dynamic y = null();
HXLINE(1046)		{
HXLINE(1046)			int _g = (int)0;
HXDLIN(1046)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1046)			while((_g < _g1->get_length())){
HXLINE(1046)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1046)				_g = (_g + (int)1);
HXLINE(1048)				bool _hx_tmp2;
HXDLIN(1048)				if ((charIndex >= group->startIndex)) {
HXLINE(1048)					_hx_tmp2 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1048)					_hx_tmp2 = false;
            				}
HXDLIN(1048)				if (_hx_tmp2) {
HXLINE(1050)					x = group->offsetX;
HXLINE(1052)					{
HXLINE(1052)						int _g3 = (int)0;
HXDLIN(1052)						int _g2 = (charIndex - group->startIndex);
HXDLIN(1052)						while((_g3 < _g2)){
HXLINE(1052)							_g3 = (_g3 + (int)1);
HXDLIN(1052)							int i = (_g3 - (int)1);
HXLINE(1054)							x = (x + group->advances->__get(i));
            						}
            					}
HXLINE(1058)					if (hx::IsNotNull( y )) {
HXLINE(1058)						return this->_hx___getPosition(x,y);
            					}
            				}
HXLINE(1062)				if ((group->lineIndex == lineIndex)) {
HXLINE(1064)					Float group1 = group->offsetY;
HXDLIN(1064)					y = (group1 + ((Float)group->height / (Float)(int)2));
HXLINE(1066)					if (hx::IsNotNull( x )) {
HXLINE(1066)						return this->_hx___getPosition(x,y);
            					}
            				}
            			}
            		}
HXLINE(1072)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

 ::lime::ui::MouseCursor TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1077___getCursor)
HXLINE(1079)		Float group = this->get_mouseX();
HXDLIN(1079)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1081)		bool _hx_tmp;
HXDLIN(1081)		if (hx::IsNotNull( group1 )) {
HXLINE(1081)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1081)			_hx_tmp = false;
            		}
HXDLIN(1081)		if (_hx_tmp) {
HXLINE(1083)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE(1085)			if (this->_hx___textEngine->selectable) {
HXLINE(1087)				return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            			}
            		}
HXLINE(1091)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,hx::Null< bool >  __o_precise){
bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1096___getGroup)
HXLINE(1098)		this->_hx___updateLayout();
HXLINE(1100)		x = (x + this->get_scrollH());
HXLINE(1102)		{
HXLINE(1102)			int _g1 = (int)0;
HXDLIN(1102)			int _g = (this->get_scrollV() - (int)1);
HXDLIN(1102)			while((_g1 < _g)){
HXLINE(1102)				_g1 = (_g1 + (int)1);
HXDLIN(1102)				int i = (_g1 - (int)1);
HXLINE(1104)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1108)		bool _hx_tmp;
HXDLIN(1108)		if (!(precise)) {
HXLINE(1108)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1108)			_hx_tmp = false;
            		}
HXDLIN(1108)		if (_hx_tmp) {
HXLINE(1108)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1110)		bool firstGroup = true;
HXLINE(1111)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1111)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1113)		{
HXLINE(1113)			int _g11 = (int)0;
HXDLIN(1113)			int _g2 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1113)			while((_g11 < _g2)){
HXLINE(1113)				_g11 = (_g11 + (int)1);
HXDLIN(1113)				int i1 = (_g11 - (int)1);
HXLINE(1115)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1117)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - (int)1))) {
HXLINE(1119)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1123)					nextGroup = null();
            				}
HXLINE(1127)				if (firstGroup) {
HXLINE(1129)					if ((y < group->offsetY)) {
HXLINE(1129)						y = group->offsetY;
            					}
HXLINE(1130)					if ((x < group->offsetX)) {
HXLINE(1130)						x = group->offsetX;
            					}
HXLINE(1131)					firstGroup = false;
            				}
HXLINE(1135)				bool _hx_tmp1;
HXDLIN(1135)				bool _hx_tmp2;
HXDLIN(1135)				if ((y >= group->offsetY)) {
HXLINE(1135)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1135)					_hx_tmp2 = false;
            				}
HXDLIN(1135)				if (!(_hx_tmp2)) {
HXLINE(1135)					if (!(precise)) {
HXLINE(1135)						_hx_tmp1 = hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1135)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1135)					_hx_tmp1 = true;
            				}
HXDLIN(1135)				if (_hx_tmp1) {
HXLINE(1137)					bool _hx_tmp3;
HXDLIN(1137)					bool _hx_tmp4;
HXDLIN(1137)					if ((x >= group->offsetX)) {
HXLINE(1137)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1137)						_hx_tmp4 = false;
            					}
HXDLIN(1137)					if (!(_hx_tmp4)) {
HXLINE(1137)						if (!(precise)) {
HXLINE(1137)							if (hx::IsNotNull( nextGroup )) {
HXLINE(1137)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1137)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1137)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1137)						_hx_tmp3 = true;
            					}
HXDLIN(1137)					if (_hx_tmp3) {
HXLINE(1139)						return group;
            					}
            				}
            			}
            		}
HXLINE(1147)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1152___getPosition)
HXLINE(1154)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1156)		if (hx::IsNull( group )) {
HXLINE(1158)			return this->_hx___text.length;
            		}
HXLINE(1162)		Float advance = ((Float)0.0);
HXLINE(1164)		{
HXLINE(1164)			int _g1 = (int)0;
HXDLIN(1164)			int _g = group->advances->length;
HXDLIN(1164)			while((_g1 < _g)){
HXLINE(1164)				_g1 = (_g1 + (int)1);
HXDLIN(1164)				int i = (_g1 - (int)1);
HXLINE(1166)				advance = (advance + group->advances->__get(i));
HXLINE(1168)				if ((x <= (group->offsetX + advance))) {
HXLINE(1170)					Float group1 = group->offsetX;
HXDLIN(1170)					Float _hx_tmp = (group1 + (advance - group->advances->__get(i)));
HXDLIN(1170)					if ((x <= (_hx_tmp + ((Float)group->advances->__get(i) / (Float)(int)2)))) {
HXLINE(1172)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1176)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1176)							return ((group->startIndex + i) + (int)1);
            						}
            						else {
HXLINE(1176)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1184)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1188___hitTest)
HXLINE(1190)		bool _hx_tmp;
HXDLIN(1190)		bool _hx_tmp1;
HXDLIN(1190)		if (!(!(hitObject->get_visible()))) {
HXLINE(1190)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1190)			_hx_tmp1 = true;
            		}
HXDLIN(1190)		if (!(_hx_tmp1)) {
HXLINE(1190)			if (interactiveOnly) {
HXLINE(1190)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1190)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1190)			_hx_tmp = true;
            		}
HXDLIN(1190)		if (_hx_tmp) {
HXLINE(1190)			return false;
            		}
HXLINE(1191)		bool _hx_tmp2;
HXDLIN(1191)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1191)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1191)			_hx_tmp2 = false;
            		}
HXDLIN(1191)		if (_hx_tmp2) {
HXLINE(1191)			return false;
            		}
HXLINE(1193)		this->_hx___getRenderTransform();
HXLINE(1194)		this->_hx___updateLayout();
HXLINE(1196)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1196)		Float norm = (_this->a * _this->d);
HXDLIN(1196)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1196)		Float px;
HXDLIN(1196)		if ((norm1 == (int)0)) {
HXLINE(1196)			px = -(_this->tx);
            		}
            		else {
HXLINE(1196)			Float _this1 = _this->c;
HXDLIN(1196)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1196)			Float _this2 = _this->d;
HXDLIN(1196)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1197)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1197)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1197)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1197)		Float py;
HXDLIN(1197)		if ((norm3 == (int)0)) {
HXLINE(1197)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1197)			Float _this4 = _this3->a;
HXDLIN(1197)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1197)			Float _this5 = _this3->b;
HXDLIN(1197)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1199)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1201)			if (hx::IsNotNull( stack )) {
HXLINE(1203)				stack->push(hitObject);
            			}
HXLINE(1207)			return true;
            		}
HXLINE(1211)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1216___hitTestMask)
HXLINE(1218)		this->_hx___getRenderTransform();
HXLINE(1219)		this->_hx___updateLayout();
HXLINE(1221)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1221)		Float norm = (_this->a * _this->d);
HXDLIN(1221)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1221)		Float px;
HXDLIN(1221)		if ((norm1 == (int)0)) {
HXLINE(1221)			px = -(_this->tx);
            		}
            		else {
HXLINE(1221)			Float _this1 = _this->c;
HXDLIN(1221)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1221)			Float _this2 = _this->d;
HXDLIN(1221)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1222)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1222)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1222)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1222)		Float py;
HXDLIN(1222)		if ((norm3 == (int)0)) {
HXLINE(1222)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1222)			Float _this4 = _this3->a;
HXDLIN(1222)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1222)			Float _this5 = _this3->b;
HXDLIN(1222)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1224)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1226)			return true;
            		}
HXLINE(1230)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1235___renderCairo)
HXLINE(1238)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1239)		this->super::_hx___renderCairo(renderSession);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1245___renderCanvas)
HXLINE(1247)		 ::openfl::geom::Matrix transform = this->_hx___worldTransform;
HXLINE(1249)		bool _hx_tmp;
HXDLIN(1249)		if (hx::IsEq( this->_hx___textEngine->antiAliasType,(int)0 )) {
HXLINE(1249)			_hx_tmp = hx::IsEq( this->_hx___textEngine->gridFitType,(int)1 );
            		}
            		else {
HXLINE(1249)			_hx_tmp = false;
            		}
HXDLIN(1249)		if (_hx_tmp) {
HXLINE(1251)			bool smoothingEnabled = renderSession->context->imageSmoothingEnabled;
HXLINE(1253)			if (smoothingEnabled) {
HXLINE(1255)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),false,hx::paccDynamic);
HXLINE(1257)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),false,hx::paccDynamic);
HXLINE(1258)				renderSession->context->imageSmoothingEnabled = false;
            			}
HXLINE(1262)			this->super::_hx___renderCanvas(renderSession);
HXLINE(1264)			if (smoothingEnabled) {
HXLINE(1266)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),true,hx::paccDynamic);
HXLINE(1268)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),true,hx::paccDynamic);
HXLINE(1269)				renderSession->context->imageSmoothingEnabled = true;
            			}
            		}
            		else {
HXLINE(1275)			this->super::_hx___renderCanvas(renderSession);
            		}
            	}


void TextField_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1282___renderDOM)
            	}


void TextField_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1291___renderGL)
HXLINE(1296)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1299)		this->super::_hx___renderGL(renderSession);
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1304___startCursorTimer)
HXLINE(1306)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE(1307)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(1308)		this->_hx___dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1313___startTextInput)
HXLINE(1315)		if ((this->_hx___caretIndex < (int)0)) {
HXLINE(1317)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(1318)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(1322)		if (hx::IsNotNull( this->stage )) {
HXLINE(1326)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE(1328)			if (!(this->_hx___inputEnabled)) {
HXLINE(1330)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE(1332)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1334)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1335)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1339)				this->_hx___inputEnabled = true;
HXLINE(1340)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1351___stopCursorTimer)
HXLINE(1353)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(1355)			this->_hx___cursorTimer->stop();
HXLINE(1356)			this->_hx___cursorTimer = null();
            		}
HXLINE(1360)		if (this->_hx___showCursor) {
HXLINE(1362)			this->_hx___showCursor = false;
HXLINE(1363)			this->_hx___dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1374___stopTextInput)
HXDLIN(1374)		bool _hx_tmp;
HXDLIN(1374)		if (this->_hx___inputEnabled) {
HXDLIN(1374)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1374)			_hx_tmp = false;
            		}
HXDLIN(1374)		if (_hx_tmp) {
HXLINE(1376)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE(1377)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1378)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1380)			this->_hx___inputEnabled = false;
HXLINE(1381)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1392___updateLayout)
HXDLIN(1392)		if (this->_hx___layoutDirty) {
HXLINE(1394)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(1395)			Float cacheHeight = this->_hx___textEngine->height;
HXLINE(1397)			this->_hx___textEngine->update();
HXLINE(1399)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 )) {
HXLINE(1401)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(1403)					 ::Dynamic _g = this->_hx___textEngine->autoSize;
HXDLIN(1403)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1411)						 ::openfl::text::TextField _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1411)						Float _hx_tmp = _g1->get_x();
HXDLIN(1411)						_g1->set_x((_hx_tmp + ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2)));
HXDLIN(1411)						goto _hx_goto_66;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(1407)						 ::openfl::text::TextField _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1407)						Float _hx_tmp1 = _g2->get_x();
HXDLIN(1407)						_g2->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(1407)						goto _hx_goto_66;
            					}
            					/* default */{
            					}
            					_hx_goto_66:;
            				}
HXLINE(1421)				this->_hx___textEngine->getBounds();
            			}
HXLINE(1425)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1432___updateText)
HXLINE(1434)		this->_hx___text = value;
HXLINE(1436)		if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(1438)			this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            		}
HXLINE(1442)		if (!(this->_hx___displayAsPassword)) {
HXLINE(1444)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(1448)			int length = this->get_text().length;
HXLINE(1449)			::String mask = HX_("",00,00,00,00);
HXLINE(1451)			{
HXLINE(1451)				int _g1 = (int)0;
HXDLIN(1451)				int _g = length;
HXDLIN(1451)				while((_g1 < _g)){
HXLINE(1451)					_g1 = (_g1 + (int)1);
HXDLIN(1451)					int i = (_g1 - (int)1);
HXLINE(1453)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(1457)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1464___updateTransforms)
HXLINE(1466)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(1467)		{
HXLINE(1467)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1467)			Float px = this->_hx___offsetX;
HXDLIN(1467)			Float py = this->_hx___offsetY;
HXDLIN(1467)			Float _hx_tmp = (px * _this->a);
HXDLIN(1467)			_this->tx = ((_hx_tmp + (py * _this->c)) + _this->tx);
HXDLIN(1467)			Float _hx_tmp1 = (px * _this->b);
HXDLIN(1467)			_this->ty = ((_hx_tmp1 + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1481_get_antiAliasType)
HXDLIN(1481)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1486_set_antiAliasType)
HXLINE(1488)		bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(1494)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1501_get_autoSize)
HXDLIN(1501)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1506_set_autoSize)
HXLINE(1508)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(1510)			this->_hx___dirty = true;
HXLINE(1511)			this->_hx___layoutDirty = true;
            		}
HXLINE(1515)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1522_get_background)
HXDLIN(1522)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1527_set_background)
HXLINE(1529)		if ((value != this->_hx___textEngine->background)) {
HXLINE(1531)			this->_hx___dirty = true;
            		}
HXLINE(1535)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1542_get_backgroundColor)
HXDLIN(1542)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1547_set_backgroundColor)
HXLINE(1549)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(1551)			this->_hx___dirty = true;
            		}
HXLINE(1555)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1562_get_border)
HXDLIN(1562)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1567_set_border)
HXLINE(1569)		if ((value != this->_hx___textEngine->border)) {
HXLINE(1571)			this->_hx___dirty = true;
            		}
HXLINE(1575)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1582_get_borderColor)
HXDLIN(1582)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1587_set_borderColor)
HXLINE(1589)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(1591)			this->_hx___dirty = true;
            		}
HXLINE(1595)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1600_get_bottomScrollV)
HXLINE(1602)		this->_hx___updateLayout();
HXLINE(1604)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1611_get_caretIndex)
HXDLIN(1611)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1618_get_defaultTextFormat)
HXDLIN(1618)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1623_set_defaultTextFormat)
HXLINE(1625)		this->_hx___textFormat->_hx___merge(value);
HXLINE(1627)		this->_hx___layoutDirty = true;
HXLINE(1628)		this->_hx___dirty = true;
HXLINE(1630)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1637_get_displayAsPassword)
HXDLIN(1637)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1642_set_displayAsPassword)
HXLINE(1644)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(1646)			this->_hx___dirty = true;
HXLINE(1647)			this->_hx___layoutDirty = true;
HXLINE(1649)			this->_hx___displayAsPassword = value;
HXLINE(1650)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(1654)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1661_get_embedFonts)
HXDLIN(1661)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1675_set_embedFonts)
HXDLIN(1675)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1682_get_gridFitType)
HXDLIN(1682)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1696_set_gridFitType)
HXDLIN(1696)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1701_get_height)
HXLINE(1703)		this->_hx___updateLayout();
HXLINE(1704)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(1704)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1709_set_height)
HXLINE(1711)		if ((value != this->_hx___textEngine->height)) {
HXLINE(1713)			if (!(this->_hx___transformDirty)) {
HXLINE(1713)				this->_hx___transformDirty = true;
HXDLIN(1713)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1714)			this->_hx___dirty = true;
HXLINE(1715)			this->_hx___layoutDirty = true;
HXLINE(1717)			this->_hx___textEngine->height = value;
            		}
HXLINE(1721)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(1721)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1728_get_htmlText)
HXDLIN(1728)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1733_set_htmlText)
HXLINE(1735)		bool _hx_tmp;
HXDLIN(1735)		if (!(!(this->_hx___isHTML))) {
HXLINE(1735)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(1735)			_hx_tmp = true;
            		}
HXDLIN(1735)		if (_hx_tmp) {
HXLINE(1737)			this->_hx___dirty = true;
HXLINE(1738)			this->_hx___layoutDirty = true;
            		}
HXLINE(1742)		this->_hx___isHTML = true;
HXLINE(1748)		{
HXLINE(1750)			value = ::openfl::text::TextField_obj::_hx___regexBreakTag->replace(value,HX_("\n",0a,00,00,00));
HXLINE(1751)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)0).StaticCast<  ::EReg >()->replace(value,HX_("\"",22,00,00,00));
HXLINE(1752)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)1).StaticCast<  ::EReg >()->replace(value,HX_("'",27,00,00,00));
HXLINE(1753)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)2).StaticCast<  ::EReg >()->replace(value,HX_("&",26,00,00,00));
HXLINE(1757)			::Array< ::String > segments = value.split(HX_("<",3c,00,00,00));
HXLINE(1759)			if ((segments->length == (int)1)) {
HXLINE(1761)				value = ::openfl::text::TextField_obj::_hx___regexHTMLTag->replace(value,HX_("",00,00,00,00));
HXLINE(1763)				if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(1765)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1765)					( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            				}
HXLINE(1769)				value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(value,HX_("<",3c,00,00,00));
HXLINE(1770)				value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(value,HX_(">",3e,00,00,00));
HXLINE(1772)				 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1773)				range->format = this->_hx___textFormat;
HXLINE(1774)				range->start = (int)0;
HXLINE(1775)				range->end = value.length;
HXLINE(1777)				this->_hx___updateText(value);
HXLINE(1779)				return value;
            			}
            			else {
HXLINE(1783)				{
HXLINE(1783)					::Dynamic this2 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1783)					( ( ::openfl::_Vector::ObjectVector)(this2) )->splice((int)0,this->_hx___textEngine->textFormatRanges->get_length());
            				}
HXLINE(1785)				value = HX_("",00,00,00,00);
HXLINE(1786)				::String segment;
HXLINE(1788)				{
HXLINE(1788)					int _g1 = (int)0;
HXDLIN(1788)					int _g = segments->length;
HXDLIN(1788)					while((_g1 < _g)){
HXLINE(1788)						_g1 = (_g1 + (int)1);
HXDLIN(1788)						int i = (_g1 - (int)1);
HXLINE(1790)						segment = segments->__get(i);
HXLINE(1791)						segment = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(segment,HX_("<",3c,00,00,00));
HXLINE(1792)						segment = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(segment,HX_(">",3e,00,00,00));
HXLINE(1793)						segments[i] = segment;
            					}
            				}
HXLINE(1797)				::Array< ::Dynamic> formatStack = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->_hx___textFormat->clone());
HXLINE(1798)				::String sub;
HXLINE(1799)				bool noLineBreak = false;
HXLINE(1801)				{
HXLINE(1801)					int _g2 = (int)0;
HXDLIN(1801)					while((_g2 < segments->length)){
HXLINE(1801)						::String segment1 = segments->__get(_g2);
HXDLIN(1801)						_g2 = (_g2 + (int)1);
HXLINE(1803)						if ((segment1 == HX_("",00,00,00,00))) {
HXLINE(1803)							continue;
            						}
HXLINE(1805)						bool isClosingTag = (segment1.substr((int)0,(int)1) == HX_("/",2f,00,00,00));
HXLINE(1806)						int tagEndIndex = segment1.indexOf(HX_(">",3e,00,00,00),null());
HXLINE(1807)						int start = (tagEndIndex + (int)1);
HXLINE(1808)						int spaceIndex = segment1.indexOf(HX_(" ",20,00,00,00),null());
HXLINE(1809)						int tagName;
HXDLIN(1809)						if (isClosingTag) {
HXLINE(1809)							tagName = (int)1;
            						}
            						else {
HXLINE(1809)							tagName = (int)0;
            						}
HXDLIN(1809)						 ::Dynamic tagName1;
HXDLIN(1809)						bool tagName2;
HXDLIN(1809)						if ((spaceIndex > (int)-1)) {
HXLINE(1809)							tagName2 = (spaceIndex < tagEndIndex);
            						}
            						else {
HXLINE(1809)							tagName2 = false;
            						}
HXDLIN(1809)						if (tagName2) {
HXLINE(1809)							tagName1 = spaceIndex;
            						}
            						else {
HXLINE(1809)							tagName1 = tagEndIndex;
            						}
HXDLIN(1809)						::String tagName3 = segment1.substring(tagName,tagName1);
HXLINE(1810)						 ::openfl::text::TextFormat format;
HXLINE(1812)						if (isClosingTag) {
HXLINE(1814)							formatStack->pop().StaticCast<  ::openfl::text::TextFormat >();
HXLINE(1815)							format = formatStack->__get((formatStack->length - (int)1)).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE(1817)							bool _hx_tmp1;
HXDLIN(1817)							if ((tagName3.toLowerCase() == HX_("p",70,00,00,00))) {
HXLINE(1817)								_hx_tmp1 = (this->_hx___textEngine->textFormatRanges->get_length() > (int)0);
            							}
            							else {
HXLINE(1817)								_hx_tmp1 = false;
            							}
HXDLIN(1817)							if (_hx_tmp1) {
HXLINE(1819)								value = (value + HX_("\n",0a,00,00,00));
HXLINE(1820)								noLineBreak = true;
            							}
HXLINE(1824)							if ((start < segment1.length)) {
HXLINE(1826)								sub = segment1.substr(start,null());
HXLINE(1827)								{
HXLINE(1827)									::Dynamic this3 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1827)									int value1 = value.length;
HXDLIN(1827)									( ( ::openfl::_Vector::ObjectVector)(this3) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value1,(value.length + sub.length)));
            								}
HXLINE(1828)								value = (value + sub);
HXLINE(1829)								noLineBreak = false;
            							}
            						}
            						else {
HXLINE(1835)							format = formatStack->__get((formatStack->length - (int)1)).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE(1837)							if ((tagEndIndex > (int)-1)) {
HXLINE(1839)								{
HXLINE(1839)									::String _g11 = tagName3.toLowerCase();
HXDLIN(1839)									::String _hx_switch_0 = _g11;
            									if (  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE(1843)										if (::openfl::text::TextField_obj::_hx___regexHref->match(segment1)) {
HXLINE(1845)											format->url = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexHref);
            										}
HXLINE(1843)										goto _hx_goto_98;
            									}
            									if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE(1897)										format->bold = true;
HXDLIN(1897)										goto _hx_goto_98;
            									}
            									if (  (_hx_switch_0==HX_("em",68,58,00,00)) ||  (_hx_switch_0==HX_("i",69,00,00,00)) ){
HXLINE(1905)										format->italic = true;
HXDLIN(1905)										goto _hx_goto_98;
            									}
            									if (  (_hx_switch_0==HX_("font",cf,5d,c0,43)) ){
HXLINE(1865)										if (::openfl::text::TextField_obj::_hx___regexFace->match(segment1)) {
HXLINE(1867)											format->font = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexFace);
            										}
HXLINE(1871)										if (::openfl::text::TextField_obj::_hx___regexColor->match(segment1)) {
HXLINE(1873)											format->color = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexColor)));
            										}
HXLINE(1877)										if (::openfl::text::TextField_obj::_hx___regexSize->match(segment1)) {
HXLINE(1879)											::String sizeAttr = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexSize);
HXLINE(1880)											 ::Dynamic firstChar = sizeAttr.charCodeAt((int)0);
HXLINE(1882)											bool _hx_tmp2;
HXDLIN(1882)											if (hx::IsNotEq( firstChar,(int)43 )) {
HXLINE(1882)												_hx_tmp2 = hx::IsEq( firstChar,(int)45 );
            											}
            											else {
HXLINE(1882)												_hx_tmp2 = true;
            											}
HXDLIN(1882)											if (_hx_tmp2) {
HXLINE(1884)												 ::openfl::text::TextFormat parentFormat;
HXDLIN(1884)												if ((formatStack->length >= (int)2)) {
HXLINE(1884)													parentFormat = formatStack->__get((formatStack->length - (int)2)).StaticCast<  ::openfl::text::TextFormat >();
            												}
            												else {
HXLINE(1884)													parentFormat = this->_hx___textFormat;
            												}
HXLINE(1885)												 ::Dynamic parentFormat1 = parentFormat->size;
HXDLIN(1885)												format->size = (parentFormat1 + ::Std_obj::parseInt(sizeAttr));
            											}
            											else {
HXLINE(1889)												format->size = ::Std_obj::parseInt(sizeAttr);
            											}
            										}
HXLINE(1863)										goto _hx_goto_98;
            									}
            									if (  (_hx_switch_0==HX_("p",70,00,00,00)) ){
HXLINE(1851)										bool _hx_tmp3;
HXDLIN(1851)										if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges) > (int)0)) {
HXLINE(1851)											_hx_tmp3 = !(noLineBreak);
            										}
            										else {
HXLINE(1851)											_hx_tmp3 = false;
            										}
HXDLIN(1851)										if (_hx_tmp3) {
HXLINE(1853)											value = (value + HX_("\n",0a,00,00,00));
            										}
HXLINE(1857)										if (::openfl::text::TextField_obj::_hx___regexAlign->match(segment1)) {
HXLINE(1859)											format->align = ::openfl::text::_TextFormatAlign::TextFormatAlign_Impl__obj::fromString(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexAlign).toLowerCase());
            										}
HXLINE(1849)										goto _hx_goto_98;
            									}
            									if (  (_hx_switch_0==HX_("textformat",a4,9b,ea,ff)) ){
HXLINE(1909)										if (::openfl::text::TextField_obj::_hx___regexBlockIndent->match(segment1)) {
HXLINE(1911)											format->blockIndent = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexBlockIndent));
            										}
HXLINE(1915)										if (::openfl::text::TextField_obj::_hx___regexIndent->match(segment1)) {
HXLINE(1917)											format->indent = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexIndent));
            										}
HXLINE(1921)										if (::openfl::text::TextField_obj::_hx___regexLeading->match(segment1)) {
HXLINE(1923)											format->leading = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexLeading));
            										}
HXLINE(1927)										if (::openfl::text::TextField_obj::_hx___regexLeftMargin->match(segment1)) {
HXLINE(1929)											format->leftMargin = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexLeftMargin));
            										}
HXLINE(1933)										if (::openfl::text::TextField_obj::_hx___regexRightMargin->match(segment1)) {
HXLINE(1935)											format->rightMargin = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexRightMargin));
            										}
HXLINE(1939)										if (::openfl::text::TextField_obj::_hx___regexTabStops->match(segment1)) {
HXLINE(1941)											::Array< ::String > values = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexTabStops).split(HX_(" ",20,00,00,00));
HXLINE(1942)											::Array< ::Dynamic> tabStops = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1944)											{
HXLINE(1944)												int _g12 = (int)0;
HXDLIN(1944)												while((_g12 < values->length)){
HXLINE(1944)													::String stop = values->__get(_g12);
HXDLIN(1944)													_g12 = (_g12 + (int)1);
HXLINE(1946)													tabStops->push(::Std_obj::parseInt(stop));
            												}
            											}
HXLINE(1950)											format->tabStops = tabStops;
            										}
HXLINE(1907)										goto _hx_goto_98;
            									}
            									if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1901)										format->underline = true;
HXDLIN(1901)										goto _hx_goto_98;
            									}
            									_hx_goto_98:;
            								}
HXLINE(1956)								formatStack->push(format);
HXLINE(1958)								if ((start < segment1.length)) {
HXLINE(1960)									sub = segment1.substring(start,null());
HXLINE(1961)									{
HXLINE(1961)										::Dynamic this4 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1961)										int value2 = value.length;
HXDLIN(1961)										( ( ::openfl::_Vector::ObjectVector)(this4) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value2,(value.length + sub.length)));
            									}
HXLINE(1962)									value = (value + sub);
HXLINE(1963)									noLineBreak = false;
            								}
            							}
            							else {
HXLINE(1969)								{
HXLINE(1969)									::Dynamic this5 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1969)									int value3 = value.length;
HXDLIN(1969)									( ( ::openfl::_Vector::ObjectVector)(this5) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value3,(value.length + segment1.length)));
            								}
HXLINE(1970)								value = (value + segment1);
HXLINE(1971)								noLineBreak = false;
            							}
            						}
            					}
            				}
HXLINE(1979)				if ((this->_hx___textEngine->textFormatRanges->get_length() == (int)0)) {
HXLINE(1981)					::Dynamic this6 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1981)					( ( ::openfl::_Vector::ObjectVector)(this6) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,formatStack->__get((int)0).StaticCast<  ::openfl::text::TextFormat >(),(int)0,(int)0));
            				}
            			}
            		}
HXLINE(1992)		this->_hx___updateText(value);
HXLINE(1995)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2000_get_length)
HXLINE(2002)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(2004)			return this->_hx___text.length;
            		}
HXLINE(2008)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2015_get_maxChars)
HXDLIN(2015)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2020_set_maxChars)
HXLINE(2022)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2024)			this->_hx___dirty = true;
HXLINE(2025)			this->_hx___layoutDirty = true;
            		}
HXLINE(2029)		return (this->_hx___textEngine->maxChars = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2034_get_maxScrollH)
HXLINE(2036)		this->_hx___updateLayout();
HXLINE(2038)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2043_get_maxScrollV)
HXLINE(2045)		this->_hx___updateLayout();
HXLINE(2047)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2054_get_mouseWheelEnabled)
HXDLIN(2054)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2061_set_mouseWheelEnabled)
HXDLIN(2061)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2068_get_multiline)
HXDLIN(2068)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2073_set_multiline)
HXLINE(2075)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(2077)			this->_hx___dirty = true;
HXLINE(2078)			this->_hx___layoutDirty = true;
            		}
HXLINE(2082)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2087_get_numLines)
HXLINE(2089)		this->_hx___updateLayout();
HXLINE(2091)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2098_get_restrict)
HXDLIN(2098)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2105_set_restrict)
HXDLIN(2105)		return this->_hx___textEngine->set_restrict(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2112_get_scrollH)
HXDLIN(2112)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2117_set_scrollH)
HXLINE(2119)		this->_hx___updateLayout();
HXLINE(2121)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2121)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2122)		if ((value < (int)0)) {
HXLINE(2122)			value = (int)0;
            		}
HXLINE(2124)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2126)			this->_hx___dirty = true;
            		}
HXLINE(2130)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2137_get_scrollV)
HXDLIN(2137)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2142_set_scrollV)
HXLINE(2144)		this->_hx___updateLayout();
HXLINE(2146)		if ((value > this->_hx___textEngine->maxScrollV)) {
HXLINE(2146)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(2147)		if ((value < (int)1)) {
HXLINE(2147)			value = (int)1;
            		}
HXLINE(2149)		if ((value != this->_hx___textEngine->scrollV)) {
HXLINE(2151)			this->_hx___dirty = true;
            		}
HXLINE(2155)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2162_get_selectable)
HXDLIN(2162)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2167_set_selectable)
HXLINE(2169)		bool _hx_tmp;
HXDLIN(2169)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2169)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2169)			_hx_tmp = false;
            		}
HXDLIN(2169)		if (_hx_tmp) {
HXLINE(2171)			bool _hx_tmp1;
HXDLIN(2171)			if (hx::IsNotNull( this->stage )) {
HXLINE(2171)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2171)				_hx_tmp1 = false;
            			}
HXDLIN(2171)			if (_hx_tmp1) {
HXLINE(2173)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2175)				if (!(value)) {
HXLINE(2177)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2183)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2190_get_selectionBeginIndex)
HXDLIN(2190)		return ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2197_get_selectionEndIndex)
HXDLIN(2197)		return ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2204_get_sharpness)
HXDLIN(2204)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2209_set_sharpness)
HXLINE(2211)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2213)			this->_hx___dirty = true;
            		}
HXLINE(2217)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2224_get_text)
HXDLIN(2224)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2229_set_text)
HXLINE(2231)		bool _hx_tmp;
HXDLIN(2231)		if (!(this->_hx___isHTML)) {
HXLINE(2231)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2231)			_hx_tmp = true;
            		}
HXDLIN(2231)		if (_hx_tmp) {
HXLINE(2233)			this->_hx___dirty = true;
HXLINE(2234)			this->_hx___layoutDirty = true;
            		}
            		else {
HXLINE(2238)			return value;
            		}
HXLINE(2242)		if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(2244)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2244)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            		}
HXLINE(2248)		 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2249)		range->format = this->_hx___textFormat;
HXLINE(2250)		range->start = (int)0;
HXLINE(2251)		range->end = value.length;
HXLINE(2253)		this->_hx___isHTML = false;
HXLINE(2255)		this->_hx___updateText(value);
HXLINE(2257)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2264_get_textColor)
HXDLIN(2264)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2269_set_textColor)
HXLINE(2271)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(2271)			this->_hx___dirty = true;
            		}
HXLINE(2273)		{
HXLINE(2273)			int _g = (int)0;
HXDLIN(2273)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2273)			while((_g < _g1->get_length())){
HXLINE(2273)				 ::openfl::_internal::text::TextFormatRange range = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(2273)				_g = (_g + (int)1);
HXLINE(2275)				range->format->color = value;
            			}
            		}
HXLINE(2279)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2283_get_textWidth)
HXLINE(2285)		this->_hx___updateLayout();
HXLINE(2286)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2291_get_textHeight)
HXLINE(2293)		this->_hx___updateLayout();
HXLINE(2294)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2301_get_type)
HXDLIN(2301)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2306_set_type)
HXLINE(2308)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(2310)			if (hx::IsEq( value,(int)1 )) {
HXLINE(2312)				this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE(2313)				this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE(2314)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(2316)				this->this_onFocusIn(null());
HXLINE(2317)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(2321)				this->removeEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null());
HXLINE(2322)				this->removeEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null());
HXLINE(2323)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(2325)				this->_hx___stopTextInput();
HXLINE(2326)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(2330)			this->_hx___dirty = true;
            		}
HXLINE(2334)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2339_get_width)
HXLINE(2341)		this->_hx___updateLayout();
HXLINE(2342)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2342)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2347_set_width)
HXLINE(2349)		if ((value != this->_hx___textEngine->width)) {
HXLINE(2351)			if (!(this->_hx___transformDirty)) {
HXLINE(2351)				this->_hx___transformDirty = true;
HXDLIN(2351)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(2352)			this->_hx___dirty = true;
HXLINE(2353)			this->_hx___layoutDirty = true;
HXLINE(2355)			this->_hx___textEngine->width = value;
            		}
HXLINE(2359)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2359)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2366_get_wordWrap)
HXDLIN(2366)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2371_set_wordWrap)
HXLINE(2373)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(2375)			this->_hx___dirty = true;
HXLINE(2376)			this->_hx___layoutDirty = true;
            		}
HXLINE(2380)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2392_stage_onMouseMove)
HXLINE(2394)		if (hx::IsNull( this->stage )) {
HXLINE(2394)			return;
            		}
HXLINE(2396)		bool _hx_tmp;
HXDLIN(2396)		if (this->_hx___textEngine->selectable) {
HXLINE(2396)			_hx_tmp = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(2396)			_hx_tmp = false;
            		}
HXDLIN(2396)		if (_hx_tmp) {
HXLINE(2398)			this->_hx___updateLayout();
HXLINE(2400)			Float position = this->get_mouseX();
HXDLIN(2400)			int position1 = this->_hx___getPosition(position,this->get_mouseY());
HXLINE(2402)			if ((position1 != this->_hx___caretIndex)) {
HXLINE(2404)				this->_hx___caretIndex = position1;
HXLINE(2406)				this->_hx___dirty = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2416_stage_onMouseUp)
HXLINE(2418)		if (hx::IsNull( this->stage )) {
HXLINE(2418)			return;
            		}
HXLINE(2420)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(2421)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(2423)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2425)			this->_hx___getWorldTransform();
HXLINE(2426)			this->_hx___updateLayout();
HXLINE(2428)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(2428)			Float px = this->get_x();
HXDLIN(2428)			Float py = this->get_y();
HXDLIN(2428)			Float norm = (_this->a * _this->d);
HXDLIN(2428)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2428)			Float px1;
HXDLIN(2428)			if ((norm1 == (int)0)) {
HXLINE(2428)				px1 = -(_this->tx);
            			}
            			else {
HXLINE(2428)				Float _this1 = _this->c;
HXDLIN(2428)				Float px2 = (_this1 * (_this->ty - py));
HXDLIN(2428)				Float _this2 = _this->d;
HXDLIN(2428)				px1 = (((Float)((Float)1.0) / (Float)norm1) * (px2 + (_this2 * (px - _this->tx))));
            			}
HXLINE(2429)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(2429)			Float px3 = this->get_x();
HXDLIN(2429)			Float py1 = this->get_y();
HXDLIN(2429)			Float norm2 = (_this3->a * _this3->d);
HXDLIN(2429)			Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(2429)			Float py2;
HXDLIN(2429)			if ((norm3 == (int)0)) {
HXLINE(2429)				py2 = -(_this3->ty);
            			}
            			else {
HXLINE(2429)				Float _this4 = _this3->a;
HXDLIN(2429)				Float py3 = (_this4 * (py1 - _this3->ty));
HXDLIN(2429)				Float _this5 = _this3->b;
HXDLIN(2429)				py2 = (((Float)((Float)1.0) / (Float)norm3) * (py3 + (_this5 * (_this3->tx - px3))));
            			}
HXLINE(2431)			Float upPos = this->get_mouseX();
HXDLIN(2431)			int upPos1 = this->_hx___getPosition(upPos,this->get_mouseY());
HXLINE(2432)			int leftPos;
HXLINE(2433)			int rightPos;
HXLINE(2435)			leftPos = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___selectionIndex,upPos1));
HXLINE(2436)			rightPos = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___selectionIndex,upPos1));
HXLINE(2438)			this->_hx___selectionIndex = leftPos;
HXLINE(2439)			this->_hx___caretIndex = rightPos;
HXLINE(2441)			if (this->_hx___inputEnabled) {
HXLINE(2443)				this->this_onFocusIn(null());
HXLINE(2445)				this->_hx___stopCursorTimer();
HXLINE(2446)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2457_this_onAddedToStage)
HXDLIN(2457)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2464_this_onFocusIn)
HXDLIN(2464)		bool _hx_tmp;
HXDLIN(2464)		bool _hx_tmp1;
HXDLIN(2464)		bool _hx_tmp2;
HXDLIN(2464)		if (this->get_selectable()) {
HXDLIN(2464)			_hx_tmp2 = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(2464)			_hx_tmp2 = false;
            		}
HXDLIN(2464)		if (_hx_tmp2) {
HXDLIN(2464)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(2464)			_hx_tmp1 = false;
            		}
HXDLIN(2464)		if (_hx_tmp1) {
HXDLIN(2464)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(2464)			_hx_tmp = false;
            		}
HXDLIN(2464)		if (_hx_tmp) {
HXLINE(2466)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2475_this_onFocusOut)
HXDLIN(2475)		this->_hx___stopTextInput();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2480_this_onMouseDown)
HXLINE(2482)		if (!(this->get_selectable())) {
HXLINE(2482)			return;
            		}
HXLINE(2484)		this->_hx___updateLayout();
HXLINE(2486)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2486)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp,this->get_mouseY());
HXLINE(2487)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2489)		this->_hx___dirty = true;
HXLINE(2492)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(2493)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2500_window_onKeyDown)
HXDLIN(2500)		switch((int)(key)){
            			case (int)8: {
HXLINE(2513)				bool _hx_tmp;
HXDLIN(2513)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2513)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(2513)					_hx_tmp = false;
            				}
HXDLIN(2513)				if (_hx_tmp) {
HXLINE(2515)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(2519)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2521)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2522)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2524)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(2730)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2732)					this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2733)					this->_hx___selectionIndex = (int)0;
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(2681)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2683)					::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(2705)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2707)					::String text = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE(2709)					if (hx::IsNotNull( text )) {
HXLINE(2711)						this->replaceSelectedText(text);
            					}
            					else {
HXLINE(2715)						this->replaceSelectedText(HX_("",00,00,00,00));
            					}
HXLINE(2719)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(2723)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2723)					( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1,(( (int)(this->_hx___textEngine->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) )->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(2689)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2691)					::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(2693)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2695)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2696)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(2530)				bool _hx_tmp1;
HXDLIN(2530)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2530)					_hx_tmp1 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(2530)					_hx_tmp1 = false;
            				}
HXDLIN(2530)				if (_hx_tmp1) {
HXLINE(2532)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(2536)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2538)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2539)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2541)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2669)				this->_hx___caretBeginningOfLine();
HXLINE(2670)				this->_hx___stopCursorTimer();
HXLINE(2671)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741901: {
HXLINE(2675)				this->_hx___caretEndOfLine();
HXLINE(2676)				this->_hx___stopCursorTimer();
HXLINE(2677)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2582)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2584)					this->_hx___caretEndOfLine();
HXLINE(2586)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2588)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2592)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2594)						this->_hx___caretNextCharacter();
            					}
            					else {
HXLINE(2598)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2600)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(2604)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2608)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2612)				this->_hx___stopCursorTimer();
HXLINE(2613)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2547)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2549)					this->_hx___caretBeginningOfLine();
HXLINE(2551)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2553)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2557)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2559)						this->_hx___caretPreviousCharacter();
            					}
            					else {
HXLINE(2563)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2565)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(2569)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2573)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2577)				this->_hx___stopCursorTimer();
HXLINE(2578)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2617)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2619)					this->_hx___caretNextLine(null(),null());
            				}
            				else {
HXLINE(2623)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2625)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(2629)						int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2630)						this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2634)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2638)				this->_hx___stopCursorTimer();
HXLINE(2639)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2643)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2645)					this->_hx___caretPreviousLine(null(),null());
            				}
            				else {
HXLINE(2649)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2651)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(2655)						int lineIndex1 = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2656)						this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2660)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2664)				this->_hx___stopCursorTimer();
HXLINE(2665)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(2504)				if (this->_hx___textEngine->multiline) {
HXLINE(2506)					this->replaceSelectedText(HX_("\n",0a,00,00,00));
HXLINE(2507)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2744_window_onTextInput)
HXLINE(2746)		this->replaceSelectedText(value);
HXLINE(2748)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;

 ::EReg TextField_obj::_hx___regexAlign;

 ::EReg TextField_obj::_hx___regexColor;

 ::EReg TextField_obj::_hx___regexBlockIndent;

 ::EReg TextField_obj::_hx___regexBreakTag;

::Array< ::Dynamic> TextField_obj::_hx___regexEntities;

 ::EReg TextField_obj::_hx___regexFace;

 ::EReg TextField_obj::_hx___regexHref;

 ::EReg TextField_obj::_hx___regexHTMLTag;

 ::EReg TextField_obj::_hx___regexIndent;

 ::EReg TextField_obj::_hx___regexLeading;

 ::EReg TextField_obj::_hx___regexLeftMargin;

 ::EReg TextField_obj::_hx___regexRightMargin;

 ::EReg TextField_obj::_hx___regexTabStops;

 ::EReg TextField_obj::_hx___regexSize;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAttributeMatch") ) { return hx::Val( _hx___getAttributeMatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { outValue = ( _hx___regexFace ); return true; }
		if (HX_FIELD_EQ(inName,"__regexHref") ) { outValue = ( _hx___regexHref ); return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { outValue = ( _hx___regexSize ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { outValue = ( _hx___regexAlign ); return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { outValue = ( _hx___regexColor ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { outValue = ( _hx___regexIndent ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { outValue = ( _hx___regexHTMLTag ); return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { outValue = ( _hx___regexLeading ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { outValue = ( _hx___regexBreakTag ); return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { outValue = ( _hx___regexEntities ); return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { outValue = ( _hx___regexTabStops ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { outValue = ( _hx___regexLeftMargin ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { outValue = ( _hx___regexBlockIndent ); return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { outValue = ( _hx___regexRightMargin ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { _hx___regexFace=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexHref") ) { _hx___regexHref=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { _hx___regexSize=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { _hx___regexAlign=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { _hx___regexColor=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { _hx___regexIndent=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { _hx___regexHTMLTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { _hx___regexLeading=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { _hx___regexBreakTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { _hx___regexEntities=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { _hx___regexTabStops=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { _hx___regexLeftMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { _hx___regexBlockIndent=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { _hx___regexRightMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::symbols::DynamicTextSymbol*/ ,(int)offsetof(TextField_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexAlign,HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexColor,HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexBlockIndent,HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexBreakTag,HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &TextField_obj::_hx___regexEntities,HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexFace,HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexHref,HX_HCSTRING("__regexHref","\x32","\x1d","\xc6","\x13")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexHTMLTag,HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexIndent,HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexLeading,HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexLeftMargin,HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexRightMargin,HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexTabStops,HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexSize,HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__caretBeginningOfLine","\x45","\xc9","\x47","\xfd"),
	HX_HCSTRING("__caretEndOfLine","\x03","\x74","\xb1","\x5c"),
	HX_HCSTRING("__caretNextCharacter","\xd3","\x7b","\x4f","\xea"),
	HX_HCSTRING("__caretNextLine","\x0a","\x68","\xad","\x0d"),
	HX_HCSTRING("__caretPreviousCharacter","\x8f","\xce","\x6c","\x11"),
	HX_HCSTRING("__caretPreviousLine","\xce","\x0e","\x89","\x48"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getAttributeMatch","\x9f","\x3b","\x2c","\x45"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCharIndexOnDifferentLine","\x08","\x76","\x0f","\x0a"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getGroup","\xe9","\x35","\x04","\x9d"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexAlign,"__regexAlign");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexColor,"__regexColor");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexEntities,"__regexEntities");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexFace,"__regexFace");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexHref,"__regexHref");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexIndent,"__regexIndent");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexLeading,"__regexLeading");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexTabStops,"__regexTabStops");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexSize,"__regexSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexAlign,"__regexAlign");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexColor,"__regexColor");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexEntities,"__regexEntities");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexFace,"__regexFace");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexHref,"__regexHref");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexIndent,"__regexIndent");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexLeading,"__regexLeading");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexTabStops,"__regexTabStops");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexSize,"__regexSize");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a"),
	HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d"),
	HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56"),
	HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8"),
	HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6"),
	HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c"),
	HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12"),
	HX_HCSTRING("__regexHref","\x32","\x1d","\xc6","\x13"),
	HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76"),
	HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f"),
	HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d"),
	HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3"),
	HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98"),
	HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec"),
	HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_52_boot)
HXDLIN(  52)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_53_boot)
HXDLIN(  53)		_hx___regexAlign =  ::EReg_obj::__alloc( HX_CTX ,HX_("align=(\"([^\"]+)\"|'([^']+)')",46,80,3f,0e),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_54_boot)
HXDLIN(  54)		_hx___regexColor =  ::EReg_obj::__alloc( HX_CTX ,HX_("color=(\"#([^\"]+)\"|'#([^']+)')",36,15,0f,76),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_55_boot)
HXDLIN(  55)		_hx___regexBlockIndent =  ::EReg_obj::__alloc( HX_CTX ,HX_("blockindent=(\"([^\"]+)\"|'([^']+)')",fa,c9,96,24),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_56_boot)
HXDLIN(  56)		_hx___regexBreakTag =  ::EReg_obj::__alloc( HX_CTX ,HX_("<br\\s*/?>",47,ed,43,f6),HX_("gi",22,5a,00,00));
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_57_boot)
HXDLIN(  57)			 ::EReg _hx_tmp =  ::EReg_obj::__alloc( HX_CTX ,HX_("&quot;",2c,d9,81,8f),HX_("g",67,00,00,00));
HXDLIN(  57)			 ::EReg _hx_tmp1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&apos;",22,7f,ca,55),HX_("g",67,00,00,00));
HXDLIN(  57)			 ::EReg _hx_tmp2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&amp;",dd,d4,aa,21),HX_("g",67,00,00,00));
HXDLIN(  57)			 ::EReg _hx_tmp3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&lt;",4d,74,70,19),HX_("g",67,00,00,00));
HXDLIN(  57)			return ::Array_obj< ::Dynamic>::__new(5)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4, ::EReg_obj::__alloc( HX_CTX ,HX_("&gt;",08,a9,6c,19),HX_("g",67,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_57_boot)
HXDLIN(  57)		_hx___regexEntities =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_58_boot)
HXDLIN(  58)		_hx___regexFace =  ::EReg_obj::__alloc( HX_CTX ,HX_("face=(\"([^\"]+)\"|'([^']+)')",1e,00,2b,89),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_59_boot)
HXDLIN(  59)		_hx___regexHref =  ::EReg_obj::__alloc( HX_CTX ,HX_("href=(\"([^\"]+)\"|'([^']+)')",ec,3f,eb,b5),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_60_boot)
HXDLIN(  60)		_hx___regexHTMLTag =  ::EReg_obj::__alloc( HX_CTX ,HX_("<.*?>",97,b4,92,aa),HX_("g",67,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_61_boot)
HXDLIN(  61)		_hx___regexIndent =  ::EReg_obj::__alloc( HX_CTX ,HX_(" indent=(\"([^\"]+)\"|'([^']+)')",4d,db,5b,9f),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_62_boot)
HXDLIN(  62)		_hx___regexLeading =  ::EReg_obj::__alloc( HX_CTX ,HX_("leading=(\"([^\"]+)\"|'([^']+)')",07,25,07,ae),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_63_boot)
HXDLIN(  63)		_hx___regexLeftMargin =  ::EReg_obj::__alloc( HX_CTX ,HX_("leftmargin=(\"([^\"]+)\"|'([^']+)')",f6,e4,c9,11),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_64_boot)
HXDLIN(  64)		_hx___regexRightMargin =  ::EReg_obj::__alloc( HX_CTX ,HX_("rightmargin=(\"([^\"]+)\"|'([^']+)')",4b,8e,21,c0),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_65_boot)
HXDLIN(  65)		_hx___regexTabStops =  ::EReg_obj::__alloc( HX_CTX ,HX_("tabstops=(\"([^\"]+)\"|'([^']+)')",7d,fe,73,09),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_66_boot)
HXDLIN(  66)		_hx___regexSize =  ::EReg_obj::__alloc( HX_CTX ,HX_("size=(\"([^\"]+)\"|'([^']+)')",42,27,be,87),HX_("i",69,00,00,00));
            	}
}

} // end namespace openfl
} // end namespace text
