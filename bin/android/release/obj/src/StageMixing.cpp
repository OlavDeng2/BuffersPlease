// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_GameManager
#include <GameManager.h>
#endif
#ifndef INCLUDED_ImageManager
#include <ImageManager.h>
#endif
#ifndef INCLUDED_StageMixing
#include <StageMixing.h>
#endif
#ifndef INCLUDED_UIButton
#include <UIButton.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dcc7c7cba3a6eb55_16_new,"StageMixing","new",0xdf73f0f6,"StageMixing.new","StageMixing.hx",16,0x55f3df3a)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc7c7cba3a6eb55_26_setup,"StageMixing","setup",0x7a09a093,"StageMixing.setup","StageMixing.hx",26,0x55f3df3a)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc7c7cba3a6eb55_30_start,"StageMixing","start",0x83e56678,"StageMixing.start","StageMixing.hx",30,0x55f3df3a)

void StageMixing_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_dcc7c7cba3a6eb55_16_new)
HXDLIN(  16)		super::__construct();
            	}

Dynamic StageMixing_obj::__CreateEmpty() { return new StageMixing_obj; }

void *StageMixing_obj::_hx_vtable = 0;

Dynamic StageMixing_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StageMixing_obj > _hx_result = new StageMixing_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StageMixing_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x7f8dd020;
		}
	}
}

 ::openfl::display::Stage StageMixing_obj::myStage;

void StageMixing_obj::setup( ::openfl::display::Stage stageref){
            	HX_STACKFRAME(&_hx_pos_dcc7c7cba3a6eb55_26_setup)
HXDLIN(  26)		::StageMixing_obj::myStage = stageref;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StageMixing_obj,setup,(void))

void StageMixing_obj::start(){
            	HX_STACKFRAME(&_hx_pos_dcc7c7cba3a6eb55_30_start)
HXLINE(  32)		::UIButton_obj::nextButton((int)360,(int)900);
HXLINE(  33)		::ImageManager_obj::addImage(HX_("img/shackUI/Meter.png",f1,91,0a,e5),(int)400,(int)400);
HXLINE(  34)		::GameManager_obj::getPuzzle(HX_("Mixing1",8b,70,3e,db));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(StageMixing_obj,start,(void))


hx::ObjectPtr< StageMixing_obj > StageMixing_obj::__new() {
	hx::ObjectPtr< StageMixing_obj > __this = new StageMixing_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< StageMixing_obj > StageMixing_obj::__alloc(hx::Ctx *_hx_ctx) {
	StageMixing_obj *__this = (StageMixing_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StageMixing_obj), true, "StageMixing"));
	*(void **)__this = StageMixing_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StageMixing_obj::StageMixing_obj()
{
}

bool StageMixing_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { outValue = setup_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myStage") ) { outValue = ( myStage ); return true; }
	}
	return false;
}

bool StageMixing_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"myStage") ) { myStage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *StageMixing_obj_sMemberStorageInfo = 0;
static hx::StaticInfo StageMixing_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &StageMixing_obj::myStage,HX_HCSTRING("myStage","\xb2","\x13","\x0b","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void StageMixing_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StageMixing_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(StageMixing_obj::myStage,"myStage");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StageMixing_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StageMixing_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(StageMixing_obj::myStage,"myStage");
};

#endif

hx::Class StageMixing_obj::__mClass;

static ::String StageMixing_obj_sStaticFields[] = {
	HX_HCSTRING("myStage","\xb2","\x13","\x0b","\x2d"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	::String(null())
};

void StageMixing_obj::__register()
{
	hx::Object *dummy = new StageMixing_obj;
	StageMixing_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("StageMixing","\x04","\xfe","\xc6","\xd0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StageMixing_obj::__GetStatic;
	__mClass->mSetStaticField = &StageMixing_obj::__SetStatic;
	__mClass->mMarkFunc = StageMixing_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StageMixing_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< StageMixing_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StageMixing_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StageMixing_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StageMixing_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

