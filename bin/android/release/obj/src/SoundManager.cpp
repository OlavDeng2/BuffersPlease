// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_SoundManager
#include <SoundManager.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_09b0c952f61e0576_27_playMusic,"SoundManager","playMusic",0x9c60d321,"SoundManager.playMusic","SoundManager.hx",27,0xe9be8400)
HX_LOCAL_STACK_FRAME(_hx_pos_09b0c952f61e0576_48_playSFX,"SoundManager","playSFX",0xcb9eac01,"SoundManager.playSFX","SoundManager.hx",48,0xe9be8400)
HX_LOCAL_STACK_FRAME(_hx_pos_09b0c952f61e0576_58_musicGainSofter,"SoundManager","musicGainSofter",0x6d4847cb,"SoundManager.musicGainSofter","SoundManager.hx",58,0xe9be8400)
HX_LOCAL_STACK_FRAME(_hx_pos_09b0c952f61e0576_79_musicGainLouder,"SoundManager","musicGainLouder",0xaaa6d073,"SoundManager.musicGainLouder","SoundManager.hx",79,0xe9be8400)
HX_LOCAL_STACK_FRAME(_hx_pos_09b0c952f61e0576_22_boot,"SoundManager","boot",0xb569c922,"SoundManager.boot","SoundManager.hx",22,0xe9be8400)
HX_LOCAL_STACK_FRAME(_hx_pos_09b0c952f61e0576_23_boot,"SoundManager","boot",0xb569c922,"SoundManager.boot","SoundManager.hx",23,0xe9be8400)

void SoundManager_obj::__construct() { }

Dynamic SoundManager_obj::__CreateEmpty() { return new SoundManager_obj; }

void *SoundManager_obj::_hx_vtable = 0;

Dynamic SoundManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundManager_obj > _hx_result = new SoundManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SoundManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f3d47e2;
}

 ::openfl::media::SoundChannel SoundManager_obj::musicChannel;

 ::openfl::media::SoundChannel SoundManager_obj::sfxChannel;

 ::openfl::media::Sound SoundManager_obj::playedMusic;

 ::openfl::media::Sound SoundManager_obj::sfxSoundPlay;

bool SoundManager_obj::musicPlaying;

Float SoundManager_obj::musicGain;

void SoundManager_obj::playMusic(::String musicName){
            	HX_GC_STACKFRAME(&_hx_pos_09b0c952f61e0576_27_playMusic)
HXLINE(  29)		if (hx::IsNotNull( ::SoundManager_obj::musicChannel )) {
HXLINE(  30)			::SoundManager_obj::musicChannel->stop();
            		}
HXLINE(  34)		::SoundManager_obj::playedMusic = ::openfl::utils::Assets_obj::getMusic(((HX_("music/",ea,bf,1b,3f) + musicName) + HX_(".ogg",e1,64,bc,1e)),null());
HXLINE(  35)		::SoundManager_obj::musicChannel = ::SoundManager_obj::playedMusic->play(((Float)0.0),(int)1000,null());
HXLINE(  42)		 ::openfl::media::SoundChannel _hx_tmp = ::SoundManager_obj::musicChannel;
HXDLIN(  42)		_hx_tmp->set_soundTransform( ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,::SoundManager_obj::musicGain,(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SoundManager_obj,playMusic,(void))

void SoundManager_obj::playSFX(::String sfxName){
            	HX_STACKFRAME(&_hx_pos_09b0c952f61e0576_48_playSFX)
HXLINE(  50)		::SoundManager_obj::sfxSoundPlay = ::openfl::utils::Assets_obj::getSound(((HX_("sfx/",0a,58,51,4c) + sfxName) + HX_(".ogg",e1,64,bc,1e)),null());
HXLINE(  53)		::SoundManager_obj::sfxChannel = ::SoundManager_obj::sfxSoundPlay->play(null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SoundManager_obj,playSFX,(void))

void SoundManager_obj::musicGainSofter(){
            	HX_GC_STACKFRAME(&_hx_pos_09b0c952f61e0576_58_musicGainSofter)
HXLINE(  60)		 ::Dynamic _hx_tmp = hx::ClassOf< ::SoundManager >();
HXDLIN(  60)		::SoundManager_obj::musicGain = (::SoundManager_obj::musicGain - ((Float)0.01));
HXLINE(  61)		if ((::SoundManager_obj::musicGain <= (int)0)) {
HXLINE(  61)			::SoundManager_obj::musicGain = (int)0;
            		}
HXLINE(  65)		if ((::SoundManager_obj::musicGain == (int)0)) {
HXLINE(  67)			if (hx::IsNotNull( ::SoundManager_obj::musicChannel )) {
HXLINE(  68)				::SoundManager_obj::musicChannel->stop();
            			}
HXLINE(  70)			::SoundManager_obj::musicPlaying = false;
            		}
HXLINE(  74)		 ::openfl::media::SoundChannel _hx_tmp1 = ::SoundManager_obj::musicChannel;
HXDLIN(  74)		_hx_tmp1->set_soundTransform( ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,::SoundManager_obj::musicGain,(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundManager_obj,musicGainSofter,(void))

void SoundManager_obj::musicGainLouder(){
            	HX_GC_STACKFRAME(&_hx_pos_09b0c952f61e0576_79_musicGainLouder)
HXLINE(  81)		 ::Dynamic _hx_tmp = hx::ClassOf< ::SoundManager >();
HXDLIN(  81)		::SoundManager_obj::musicGain = (::SoundManager_obj::musicGain + ((Float)0.01));
HXLINE(  82)		if ((::SoundManager_obj::musicGain >= ((Float)0.05))) {
HXLINE(  82)			::SoundManager_obj::musicGain = ((Float)0.05);
            		}
HXLINE(  86)		if ((::SoundManager_obj::musicPlaying == false)) {
HXLINE(  88)			::SoundManager_obj::musicChannel = ::SoundManager_obj::playedMusic->play(((Float)0.0),(int)1000,null());
HXLINE(  90)			::SoundManager_obj::musicPlaying = true;
            		}
HXLINE(  94)		 ::openfl::media::SoundChannel _hx_tmp1 = ::SoundManager_obj::musicChannel;
HXDLIN(  94)		_hx_tmp1->set_soundTransform( ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,::SoundManager_obj::musicGain,(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundManager_obj,musicGainLouder,(void))


SoundManager_obj::SoundManager_obj()
{
}

bool SoundManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"playSFX") ) { outValue = playSFX_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"musicGain") ) { outValue = ( musicGain ); return true; }
		if (HX_FIELD_EQ(inName,"playMusic") ) { outValue = playMusic_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sfxChannel") ) { outValue = ( sfxChannel ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playedMusic") ) { outValue = ( playedMusic ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"musicChannel") ) { outValue = ( musicChannel ); return true; }
		if (HX_FIELD_EQ(inName,"sfxSoundPlay") ) { outValue = ( sfxSoundPlay ); return true; }
		if (HX_FIELD_EQ(inName,"musicPlaying") ) { outValue = ( musicPlaying ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"musicGainSofter") ) { outValue = musicGainSofter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"musicGainLouder") ) { outValue = musicGainLouder_dyn(); return true; }
	}
	return false;
}

bool SoundManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"musicGain") ) { musicGain=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sfxChannel") ) { sfxChannel=ioValue.Cast<  ::openfl::media::SoundChannel >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playedMusic") ) { playedMusic=ioValue.Cast<  ::openfl::media::Sound >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"musicChannel") ) { musicChannel=ioValue.Cast<  ::openfl::media::SoundChannel >(); return true; }
		if (HX_FIELD_EQ(inName,"sfxSoundPlay") ) { sfxSoundPlay=ioValue.Cast<  ::openfl::media::Sound >(); return true; }
		if (HX_FIELD_EQ(inName,"musicPlaying") ) { musicPlaying=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SoundManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SoundManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::media::SoundChannel*/ ,(void *) &SoundManager_obj::musicChannel,HX_HCSTRING("musicChannel","\x9e","\xe6","\x45","\x83")},
	{hx::fsObject /*::openfl::media::SoundChannel*/ ,(void *) &SoundManager_obj::sfxChannel,HX_HCSTRING("sfxChannel","\xbe","\x56","\x6c","\xd7")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(void *) &SoundManager_obj::playedMusic,HX_HCSTRING("playedMusic","\x52","\x68","\x3a","\x7e")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(void *) &SoundManager_obj::sfxSoundPlay,HX_HCSTRING("sfxSoundPlay","\x1e","\x05","\x80","\xfb")},
	{hx::fsBool,(void *) &SoundManager_obj::musicPlaying,HX_HCSTRING("musicPlaying","\x49","\xf5","\x8b","\x40")},
	{hx::fsFloat,(void *) &SoundManager_obj::musicGain,HX_HCSTRING("musicGain","\xc4","\xa3","\x58","\xce")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void SoundManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SoundManager_obj::musicChannel,"musicChannel");
	HX_MARK_MEMBER_NAME(SoundManager_obj::sfxChannel,"sfxChannel");
	HX_MARK_MEMBER_NAME(SoundManager_obj::playedMusic,"playedMusic");
	HX_MARK_MEMBER_NAME(SoundManager_obj::sfxSoundPlay,"sfxSoundPlay");
	HX_MARK_MEMBER_NAME(SoundManager_obj::musicPlaying,"musicPlaying");
	HX_MARK_MEMBER_NAME(SoundManager_obj::musicGain,"musicGain");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SoundManager_obj::musicChannel,"musicChannel");
	HX_VISIT_MEMBER_NAME(SoundManager_obj::sfxChannel,"sfxChannel");
	HX_VISIT_MEMBER_NAME(SoundManager_obj::playedMusic,"playedMusic");
	HX_VISIT_MEMBER_NAME(SoundManager_obj::sfxSoundPlay,"sfxSoundPlay");
	HX_VISIT_MEMBER_NAME(SoundManager_obj::musicPlaying,"musicPlaying");
	HX_VISIT_MEMBER_NAME(SoundManager_obj::musicGain,"musicGain");
};

#endif

hx::Class SoundManager_obj::__mClass;

static ::String SoundManager_obj_sStaticFields[] = {
	HX_HCSTRING("musicChannel","\x9e","\xe6","\x45","\x83"),
	HX_HCSTRING("sfxChannel","\xbe","\x56","\x6c","\xd7"),
	HX_HCSTRING("playedMusic","\x52","\x68","\x3a","\x7e"),
	HX_HCSTRING("sfxSoundPlay","\x1e","\x05","\x80","\xfb"),
	HX_HCSTRING("musicPlaying","\x49","\xf5","\x8b","\x40"),
	HX_HCSTRING("musicGain","\xc4","\xa3","\x58","\xce"),
	HX_HCSTRING("playMusic","\x11","\xfe","\x3e","\x31"),
	HX_HCSTRING("playSFX","\xf1","\x3a","\x07","\x8a"),
	HX_HCSTRING("musicGainSofter","\xbb","\x46","\x41","\x7e"),
	HX_HCSTRING("musicGainLouder","\x63","\xcf","\x9f","\xbb"),
	::String(null())
};

void SoundManager_obj::__register()
{
	hx::Object *dummy = new SoundManager_obj;
	SoundManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("SoundManager","\x7e","\x41","\x0c","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoundManager_obj::__GetStatic;
	__mClass->mSetStaticField = &SoundManager_obj::__SetStatic;
	__mClass->mMarkFunc = SoundManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SoundManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SoundManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SoundManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_09b0c952f61e0576_22_boot)
HXDLIN(  22)		musicPlaying = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_09b0c952f61e0576_23_boot)
HXDLIN(  23)		musicGain = ((Float)0.05);
            	}
}

