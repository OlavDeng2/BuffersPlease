// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Atom
#include <Atom.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7ecc0c5f93cc9928_19_new,"Atom","new",0xa08eb263,"Atom.new","Atom.hx",19,0x2202ea6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7ecc0c5f93cc9928_36_OnMouseClick,"Atom","OnMouseClick",0x8db9a39f,"Atom.OnMouseClick","Atom.hx",36,0x2202ea6d)

void Atom_obj::__construct(::String _element){
            	HX_GC_STACKFRAME(&_hx_pos_7ecc0c5f93cc9928_19_new)
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->element = _element;
HXLINE(  25)		 ::openfl::display::BitmapData atomImageData = ::openfl::utils::Assets_obj::getBitmapData(((HX_("img/Chemicals/",da,66,96,30) + this->element) + HX_(".png",3b,2d,bd,1e)),null());
HXLINE(  26)		 ::openfl::display::Bitmap atomImage =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,atomImageData,null(),null());
HXLINE(  29)		this->addChild(atomImage);
HXLINE(  32)		this->addEventListener(HX_("click",48,7c,5e,48),this->OnMouseClick_dyn(),null(),null(),null());
            	}

Dynamic Atom_obj::__CreateEmpty() { return new Atom_obj; }

void *Atom_obj::_hx_vtable = 0;

Dynamic Atom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Atom_obj > _hx_result = new Atom_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Atom_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2b4f44f1) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2b4f44f1;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Atom_obj::OnMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_7ecc0c5f93cc9928_36_OnMouseClick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Atom_obj,OnMouseClick,(void))


hx::ObjectPtr< Atom_obj > Atom_obj::__new(::String _element) {
	hx::ObjectPtr< Atom_obj > __this = new Atom_obj();
	__this->__construct(_element);
	return __this;
}

hx::ObjectPtr< Atom_obj > Atom_obj::__alloc(hx::Ctx *_hx_ctx,::String _element) {
	Atom_obj *__this = (Atom_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Atom_obj), true, "Atom"));
	*(void **)__this = Atom_obj::_hx_vtable;
	__this->__construct(_element);
	return __this;
}

Atom_obj::Atom_obj()
{
}

void Atom_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Atom);
	HX_MARK_MEMBER_NAME(element,"element");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Atom_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(element,"element");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Atom_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { return hx::Val( element ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"OnMouseClick") ) { return hx::Val( OnMouseClick_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Atom_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { element=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Atom_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("element","\xbc","\xae","\x54","\x06"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Atom_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Atom_obj,element),HX_HCSTRING("element","\xbc","\xae","\x54","\x06")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Atom_obj_sStaticStorageInfo = 0;
#endif

static ::String Atom_obj_sMemberFields[] = {
	HX_HCSTRING("element","\xbc","\xae","\x54","\x06"),
	HX_HCSTRING("OnMouseClick","\x02","\x5e","\x81","\x06"),
	::String(null()) };

static void Atom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Atom_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Atom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Atom_obj::__mClass,"__mClass");
};

#endif

hx::Class Atom_obj::__mClass;

void Atom_obj::__register()
{
	hx::Object *dummy = new Atom_obj;
	Atom_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Atom","\xf1","\x44","\x4f","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Atom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Atom_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Atom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Atom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Atom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Atom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

