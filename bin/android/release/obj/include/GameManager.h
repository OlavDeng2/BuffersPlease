// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_GameManager
#define INCLUDED_GameManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Atom)
HX_DECLARE_CLASS0(GameManager)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)



class HXCPP_CLASS_ATTRIBUTES GameManager_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GameManager_obj OBJ_;
		GameManager_obj();

	public:
		enum { _hx_ClassId = 0x3a3844b3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="GameManager")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"GameManager"); }

		hx::ObjectPtr< GameManager_obj > __new() {
			hx::ObjectPtr< GameManager_obj > __this = new GameManager_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GameManager_obj > __alloc(hx::Ctx *_hx_ctx) {
			GameManager_obj *__this = (GameManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameManager_obj), false, "GameManager"));
			*(void **)__this = GameManager_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GameManager_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GameManager","\x7b","\xa0","\xaa","\xdc"); }

		static void __boot();
		static int currentScore;
		static int place;
		static ::String currentName;
		static  ::openfl::text::TextField characterTextInput;
		static ::Array< ::Dynamic> selection;
		static  ::openfl::display::Stage myStage;
		static void setMyStage();
		static ::Dynamic setMyStage_dyn();

		static int getCurrentScore();
		static ::Dynamic getCurrentScore_dyn();

		static void setCurrentScore(int score);
		static ::Dynamic setCurrentScore_dyn();

		static ::String getCurrentName();
		static ::Dynamic getCurrentName_dyn();

		static void setCurrentName(::String name);
		static ::Dynamic setCurrentName_dyn();

		static void writeScoreToDB();
		static ::Dynamic writeScoreToDB_dyn();

		static void getLeaderboard();
		static ::Dynamic getLeaderboard_dyn();

		static void getPuzzle(::String puzzle);
		static ::Dynamic getPuzzle_dyn();

		static void hydrogenAtom(int xPos,int yPos);
		static ::Dynamic hydrogenAtom_dyn();

		static void carbonAtom(int xPos,int yPos);
		static ::Dynamic carbonAtom_dyn();

		static void oxygenAtom(int xPos,int yPos);
		static ::Dynamic oxygenAtom_dyn();

		static void sodiumAtom(int xPos,int yPos);
		static ::Dynamic sodiumAtom_dyn();

		static void onAtomSelect( ::openfl::events::MouseEvent event);
		static ::Dynamic onAtomSelect_dyn();

		static void checkIfMixed();
		static ::Dynamic checkIfMixed_dyn();

};


#endif /* INCLUDED_GameManager */ 
