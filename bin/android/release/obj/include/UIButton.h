// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_UIButton
#define INCLUDED_UIButton

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Button
#include <Button.h>
#endif
HX_DECLARE_CLASS0(Button)
HX_DECLARE_CLASS0(UIButton)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)



class HXCPP_CLASS_ATTRIBUTES UIButton_obj : public  ::Button_obj
{
	public:
		typedef  ::Button_obj super;
		typedef UIButton_obj OBJ_;
		UIButton_obj();

	public:
		enum { _hx_ClassId = 0x4e209bca };

		void __construct(::String buttonName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="UIButton")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"UIButton"); }
		static hx::ObjectPtr< UIButton_obj > __new(::String buttonName);
		static hx::ObjectPtr< UIButton_obj > __alloc(hx::Ctx *_hx_ctx,::String buttonName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~UIButton_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("UIButton","\x66","\x97","\xd3","\xe7"); }

		static  ::openfl::display::Stage myStage;
		static void setMyStage();
		static ::Dynamic setMyStage_dyn();

		static void exitButton(int xPos,int yPos);
		static ::Dynamic exitButton_dyn();

		static void exitButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic exitButtonPress_dyn();

		static void startButton(int xPos,int yPos);
		static ::Dynamic startButton_dyn();

		static void startButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic startButtonPress_dyn();

		static void nextButton(int xPos,int yPos);
		static ::Dynamic nextButton_dyn();

		static void nextButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic nextButtonPress_dyn();

		static void leaderboardButton(int xPos,int yPos);
		static ::Dynamic leaderboardButton_dyn();

		static void leaderboardButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic leaderboardButtonPress_dyn();

		static void musicOffButton(int xPos,int yPos);
		static ::Dynamic musicOffButton_dyn();

		static void musicOffButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic musicOffButtonPress_dyn();

		static void musicOnButton(int xPos,int yPos);
		static ::Dynamic musicOnButton_dyn();

		static void musicOnButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic musicOnButtonPress_dyn();

		static void mixingButton(int xPos,int yPos);
		static ::Dynamic mixingButton_dyn();

		static void mixingButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic mixingButtonPress_dyn();

		static void bufferReadyButton(int xPos,int yPos);
		static ::Dynamic bufferReadyButton_dyn();

		static void bufferReadyButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic bufferReadyButtonPress_dyn();

		static void mainMenuButton(int xPos,int yPos);
		static ::Dynamic mainMenuButton_dyn();

		static void mainMenuButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic mainMenuButtonPress_dyn();

		static void notepadButton(int xPos,int yPos);
		static ::Dynamic notepadButton_dyn();

		static void notepadButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic notepadButtonPress_dyn();

		static void chemGuideButton(int xPos,int yPos);
		static ::Dynamic chemGuideButton_dyn();

		static void chemGuideButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic chemGuideButtonPress_dyn();

		static void cupboardOpenButton(Float xPos,Float yPos);
		static ::Dynamic cupboardOpenButton_dyn();

		static void cupboardOpenButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic cupboardOpenButtonPress_dyn();

		static void cupboardCloseButton(Float xPos,Float yPos);
		static ::Dynamic cupboardCloseButton_dyn();

		static void cupboardCloseButtonPress( ::openfl::events::MouseEvent event);
		static ::Dynamic cupboardCloseButtonPress_dyn();

};


#endif /* INCLUDED_UIButton */ 
